"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_utils_memory_ts";
exports.ids = ["_rsc_lib_utils_memory_ts"];
exports.modules = {

/***/ "(rsc)/./lib/utils/memory.ts":
/*!*****************************!*\
  !*** ./lib/utils/memory.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationMemory: () => (/* binding */ ConversationMemory),\n/* harmony export */   getSessionMemory: () => (/* binding */ getSessionMemory)\n/* harmony export */ });\n// In-memory storage (extendable to database later)\nconst sessions = new Map();\n// Configuration\nconst MAX_MESSAGES_BEFORE_SUMMARIZATION = 20;\nconst SUMMARIZATION_INTERVAL_MINUTES = 30;\nclass ConversationMemory {\n    constructor(sessionId){\n        this.sessionId = sessionId;\n        this.initSession();\n    }\n    initSession() {\n        if (!sessions.has(this.sessionId)) {\n            sessions.set(this.sessionId, {\n                sessionId: this.sessionId,\n                messages: [],\n                fileOperations: [],\n                createdAt: new Date(),\n                lastActive: new Date()\n            });\n        } else {\n            const session = sessions.get(this.sessionId);\n            session.lastActive = new Date();\n            sessions.set(this.sessionId, session);\n        }\n    }\n    // Add a message to memory\n    addMessage(role, content) {\n        const message = {\n            id: Date.now().toString(),\n            role,\n            content,\n            timestamp: new Date()\n        };\n        const session = sessions.get(this.sessionId);\n        session.messages.push(message);\n        session.lastActive = new Date();\n        sessions.set(this.sessionId, session);\n        return message;\n    }\n    // Add a file operation to memory\n    addFileOperation(type, filename) {\n        const operation = {\n            type,\n            filename,\n            timestamp: new Date(),\n            sessionId: this.sessionId\n        };\n        const session = sessions.get(this.sessionId);\n        session.fileOperations.push(operation);\n        sessions.set(this.sessionId, session);\n        return operation;\n    }\n    // Get conversation history\n    getMessages(limit) {\n        const session = sessions.get(this.sessionId);\n        if (!session) return [];\n        const messages = session.messages;\n        return limit ? messages.slice(-limit) : messages;\n    }\n    // Get recent file operations\n    getRecentFileOperations(limit = 10) {\n        const session = sessions.get(this.sessionId);\n        if (!session) return [];\n        return session.fileOperations.slice(-limit);\n    }\n    // Get all files created/modified in this session\n    getSessionFiles() {\n        const session = sessions.get(this.sessionId);\n        if (!session) return [];\n        const fileSet = new Set();\n        session.fileOperations.forEach((op)=>{\n            if (op.type !== \"deleted\") {\n                fileSet.add(op.filename);\n            }\n        });\n        return Array.from(fileSet);\n    }\n    // Search messages by content\n    searchMessages(query) {\n        const session = sessions.get(this.sessionId);\n        if (!session) return [];\n        const lowerQuery = query.toLowerCase();\n        return session.messages.filter((msg)=>msg.content.toLowerCase().includes(lowerQuery));\n    }\n    // Get context summary for new requests\n    getContextSummary() {\n        const session = sessions.get(this.sessionId);\n        if (!session) return \"\";\n        const recentMessages = session.messages.slice(-4); // Last 4 messages\n        const recentFiles = this.getSessionFiles();\n        let summary = \"\";\n        // Include summarized history if available\n        if (session.summarizedHistory) {\n            summary += `Previous context (summarized):\\n${session.summarizedHistory}\\n\\n`;\n        }\n        if (recentMessages.length > 0) {\n            summary += `Recent conversation (${recentMessages.length} messages):\\n`;\n            recentMessages.forEach((msg, idx)=>{\n                summary += `${idx + 1}. ${msg.role}: ${msg.content.substring(0, 100)}${msg.content.length > 100 ? \"...\" : \"\"}\\n`;\n            });\n            summary += \"\\n\";\n        }\n        if (recentFiles.length > 0) {\n            summary += `Files created/modified in this session:\\n${recentFiles.join(\"\\n\")}\\n\\n`;\n        }\n        return summary;\n    }\n    // Get compressed context (for token efficiency)\n    async getCompressedContext(maxTokens = 2000) {\n        const session = sessions.get(this.sessionId);\n        if (!session) return \"\";\n        // Check if we need to create/update summarization\n        const shouldSummarize = session.messages.length > MAX_MESSAGES_BEFORE_SUMMARIZATION && (!session.lastSummarizedAt || Date.now() - session.lastSummarizedAt.getTime() > SUMMARIZATION_INTERVAL_MINUTES * 60 * 1000);\n        if (shouldSummarize) {\n            await this.summarizeHistory();\n        }\n        return this.getContextSummary();\n    }\n    // Summarize conversation history to save tokens\n    async summarizeHistory() {\n        const session = sessions.get(this.sessionId);\n        if (!session || session.messages.length < 10) return;\n        // Import summarizer (dynamic to avoid circular dependencies)\n        const { summarizeConversation } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./summarizer */ \"(rsc)/./lib/utils/summarizer.ts\"));\n        // Keep last 5 messages fresh, summarize the rest\n        const messagesToSummarize = session.messages.slice(0, -5);\n        if (messagesToSummarize.length === 0) return;\n        const { summary } = await summarizeConversation(messagesToSummarize.map((m)=>({\n                role: m.role,\n                content: m.content\n            })), 0 // Summarize all\n        );\n        session.summarizedHistory = summary;\n        session.lastSummarizedAt = new Date();\n        // Remove old messages, keep only recent ones\n        session.messages = session.messages.slice(-5);\n        sessions.set(this.sessionId, session);\n        console.log(`ðŸ“Š Summarized ${messagesToSummarize.length} messages for session ${this.sessionId}`);\n    }\n    // Get token estimate for context\n    getTokenEstimate() {\n        const context = this.getContextSummary();\n        // Rough estimate: 4 chars â‰ˆ 1 token\n        return Math.ceil(context.length / 4);\n    }\n    // Get all active sessions (for debugging/stats)\n    static getAllSessions() {\n        return Array.from(sessions.values());\n    }\n    static getSessionCount() {\n        return sessions.size;\n    }\n    // Cleanup old sessions (older than 24 hours)\n    static cleanupOldSessions() {\n        const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n        const toDelete = [];\n        sessions.forEach((session, id)=>{\n            if (session.lastActive < oneDayAgo) {\n                toDelete.push(id);\n            }\n        });\n        toDelete.forEach((id)=>sessions.delete(id));\n        return toDelete.length;\n    }\n}\n// Utility to create/get memory instance\nfunction getSessionMemory(sessionId) {\n    return new ConversationMemory(sessionId);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/memory.ts\n");

/***/ })

};
;