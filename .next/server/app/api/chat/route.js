"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@14.2.5_@playwright+test@1.56.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2FApple%2FDesktop%2FNextLovable%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FApple%2FDesktop%2FNextLovable&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@14.2.5_@playwright+test@1.56.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2FApple%2FDesktop%2FNextLovable%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FApple%2FDesktop%2FNextLovable&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/.pnpm/next@14.2.5_@playwright+test@1.56.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/.pnpm/next@14.2.5_@playwright+test@1.56.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/.pnpm/next@14.2.5_@playwright+test@1.56.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_Apple_Desktop_NextLovable_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/chat/route.ts */ \"(rsc)/./app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"/Users/Apple/Desktop/NextLovable/app/api/chat/route.ts\",\n    nextConfigOutput,\n    userland: _Users_Apple_Desktop_NextLovable_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjVfQHBsYXl3cmlnaHQrdGVzdEAxLjU2LjFfcmVhY3QtZG9tQDE4LjMuMV9yZWFjdEAxOC4zLjFfX3JlYWN0QDE4LjMuMS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRkFwcGxlJTJGRGVza3RvcCUyRk5leHRMb3ZhYmxlJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRkFwcGxlJTJGRGVza3RvcCUyRk5leHRMb3ZhYmxlJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNNO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnJvdXRlci1sYW5nZ3JhcGgvP2ZkZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL0FwcGxlL0Rlc2t0b3AvTmV4dExvdmFibGUvYXBwL2FwaS9jaGF0L3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jaGF0L3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2hhdFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY2hhdC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9BcHBsZS9EZXNrdG9wL05leHRMb3ZhYmxlL2FwcC9hcGkvY2hhdC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvY2hhdC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@14.2.5_@playwright+test@1.56.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2FApple%2FDesktop%2FNextLovable%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FApple%2FDesktop%2FNextLovable&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/chat/route.ts":
/*!*******************************!*\
  !*** ./app/api/chat/route.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _lib_agents_agent_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/agents/agent-core */ \"(rsc)/./lib/agents/agent-core.ts\");\n/* harmony import */ var _lib_agents_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/agents/utils */ \"(rsc)/./lib/agents/utils.ts\");\n/* harmony import */ var _lib_utils_memory_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/utils/memory-db */ \"(rsc)/./lib/utils/memory-db.ts\");\n/* harmony import */ var _lib_db_database__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/db/database */ \"(rsc)/./lib/db/database.ts\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n// Store for ongoing streams\nconst activeStreams = new Map();\nasync function POST(request) {\n    const encoder = new TextEncoder();\n    const stream = new ReadableStream({\n        async start (controller) {\n            try {\n                const { userRequest, sessionId, model } = await request.json();\n                if (!userRequest) {\n                    controller.enqueue(encoder.encode(`data: ${JSON.stringify({\n                        error: \"userRequest is required\"\n                    })}\\n\\n`));\n                    controller.close();\n                    return;\n                }\n                if (sessionId) {\n                    activeStreams.set(sessionId, {\n                        controller,\n                        isComplete: false\n                    });\n                    // Set the emit function for this session\n                    (0,_lib_agents_agent_core__WEBPACK_IMPORTED_MODULE_0__.setEmitFunction)(emitStreamEvent);\n                }\n                console.log(\"\\uD83D\\uDE80 Starting agent generation for request:\", userRequest);\n                // Initialize session memory and create project folder\n                (0,_lib_agents_utils__WEBPACK_IMPORTED_MODULE_1__.setSessionMemory)(sessionId || \"default\");\n                const projectFolder = (0,_lib_agents_utils__WEBPACK_IMPORTED_MODULE_1__.getProjectFolder)();\n                // Ensure session exists in database before adding messages\n                await (0,_lib_db_database__WEBPACK_IMPORTED_MODULE_3__.getOrCreateSession)(sessionId || \"default\", projectFolder);\n                const memory = (0,_lib_utils_memory_db__WEBPACK_IMPORTED_MODULE_2__.getSessionMemory)(sessionId || \"default\", projectFolder);\n                console.log(\"\\uD83D\\uDCC1 Project folder:\", projectFolder);\n                // Save user message to database\n                await (0,_lib_db_database__WEBPACK_IMPORTED_MODULE_3__.addConversation)(sessionId, \"user\", userRequest);\n                // Add user message to memory\n                await memory.addMessage(\"user\", userRequest);\n                // Get conversation context for the agent\n                const contextSummary = await memory.getContextSummary();\n                console.log(\"\\uD83D\\uDCAD Context from memory:\", contextSummary ? \"Available\" : \"None\");\n                // Create the streaming agent graph with context\n                const graph = (0,_lib_agents_agent_core__WEBPACK_IMPORTED_MODULE_0__.createStreamingLovableAgentGraph)(sessionId, model);\n                // Run the agent workflow with context\n                const result = await graph.invoke({\n                    userRequest: contextSummary ? `${contextSummary}\\n\\nNew request: ${userRequest}` : userRequest,\n                    messages: [\n                        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_4__.HumanMessage(contextSummary ? `${contextSummary}\\n\\n${userRequest}` : userRequest)\n                    ]\n                });\n                console.log(\"\\n✅ Generation complete!\");\n                // Extract chain of thought from messages\n                const chainOfThought = [];\n                result.messages.forEach((message, index)=>{\n                    if (message.content.toString().includes(\"Chain of Thought:\")) {\n                        const cotMatch = message.content.toString().match(/Chain of Thought:\\s*([\\s\\S]*?)(?=Files:|FILENAME:|$)/i);\n                        if (cotMatch) {\n                            chainOfThought.push(`Step ${Math.floor(index / 2) + 1}: ${cotMatch[1].trim()}`);\n                        }\n                    }\n                });\n                // Save generated files and track in memory\n                if (Object.keys(result.generatedFiles).length > 0) {\n                    (0,_lib_agents_agent_core__WEBPACK_IMPORTED_MODULE_0__.saveGeneratedFiles)(result.generatedFiles);\n                    // Track file operations in memory\n                    for (const filename of Object.keys(result.generatedFiles)){\n                        await memory.addFileOperation(\"created\", path__WEBPACK_IMPORTED_MODULE_5__.join(projectFolder, filename));\n                    }\n                }\n                // Get tool call statistics\n                const toolStats = (0,_lib_agents_agent_core__WEBPACK_IMPORTED_MODULE_0__.getToolCallSummary)();\n                console.log(\"\\n\" + toolStats);\n                const response = {\n                    success: true,\n                    plan: result.plan,\n                    generatedFiles: Object.keys(result.generatedFiles),\n                    projectFolder: projectFolder,\n                    chainOfThought,\n                    reviewFeedback: result.reviewFeedback,\n                    isComplete: result.isComplete,\n                    toolStats: toolStats,\n                    type: \"complete\"\n                };\n                // Add AI response to memory (summarized)\n                const aiSummary = `Generated ${Object.keys(result.generatedFiles).length} files following ${result.plan?.length || 0} steps. ${result.reviewFeedback || \"\"}`;\n                // Save AI response to database\n                await (0,_lib_db_database__WEBPACK_IMPORTED_MODULE_3__.addConversation)(sessionId, \"assistant\", aiSummary);\n                await memory.addMessage(\"assistant\", aiSummary);\n                controller.enqueue(encoder.encode(`data: ${JSON.stringify(response)}\\n\\n`));\n                controller.close();\n                // Clear tool logs for next request\n                (0,_lib_agents_agent_core__WEBPACK_IMPORTED_MODULE_0__.clearToolCallLogs)();\n                if (sessionId) {\n                    const streamData = activeStreams.get(sessionId);\n                    if (streamData) {\n                        streamData.isComplete = true;\n                        activeStreams.delete(sessionId);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error:\", error);\n                controller.enqueue(encoder.encode(`data: ${JSON.stringify({\n                    error: \"Failed to process request\",\n                    details: error instanceof Error ? error.message : String(error),\n                    type: \"error\"\n                })}\\n\\n`));\n                controller.close();\n            }\n        }\n    });\n    return new Response(stream, {\n        headers: {\n            \"Content-Type\": \"text/event-stream\",\n            \"Cache-Control\": \"no-cache\",\n            \"Connection\": \"keep-alive\"\n        }\n    });\n}\n// Function to emit streaming events\nfunction emitStreamEvent(sessionId, data) {\n    const streamData = activeStreams.get(sessionId);\n    if (streamData && !streamData.isComplete) {\n        const encoder = new TextEncoder();\n        streamData.controller.enqueue(encoder.encode(`data: ${JSON.stringify(data)}\\n\\n`));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/agent-core.ts":
/*!**********************************!*\
  !*** ./lib/agents/agent-core.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearToolCallLogs: () => (/* binding */ clearToolCallLogs),\n/* harmony export */   createLovableAgentGraph: () => (/* binding */ createLovableAgentGraph),\n/* harmony export */   createStreamingLovableAgentGraph: () => (/* binding */ createStreamingLovableAgentGraph),\n/* harmony export */   getMemoryStats: () => (/* binding */ getMemoryStats),\n/* harmony export */   getToolCallStats: () => (/* binding */ getToolCallStats),\n/* harmony export */   getToolCallSummary: () => (/* binding */ getToolCallSummary),\n/* harmony export */   saveGeneratedFiles: () => (/* binding */ saveGeneratedFiles),\n/* harmony export */   setEmitFunction: () => (/* binding */ setEmitFunction)\n/* harmony export */ });\n/* harmony import */ var _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/langgraph */ \"(rsc)/./node_modules/.pnpm/@langchain+langgraph@1.0.1_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___r_79a741b742ae68db3a00eb54de512e24/node_modules/@langchain/langgraph/dist/index.js\");\n/* harmony import */ var _utils_tool_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/tool-logger */ \"(rsc)/./lib/utils/tool-logger.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(rsc)/./lib/agents/utils.ts\");\n/* harmony import */ var _streaming_agents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./streaming-agents */ \"(rsc)/./lib/agents/streaming-agents.ts\");\n/* harmony import */ var _agents__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./agents */ \"(rsc)/./lib/agents/agents.ts\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n// Import the emit function from the API route\nlet emitEvent = ()=>{};\nfunction setEmitFunction(fn) {\n    emitEvent = fn;\n}\n// Define the state schema for our Lovable-like agent\nconst AgentState = _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.Annotation.Root({\n    messages: (0,_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.Annotation)({\n        reducer: (current, update)=>[\n                ...current,\n                ...update\n            ],\n        default: ()=>[]\n    }),\n    userRequest: (0,_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.Annotation)({\n        reducer: (_, update)=>update,\n        default: ()=>\"\"\n    }),\n    plan: (0,_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.Annotation)({\n        reducer: (_, update)=>update,\n        default: ()=>[]\n    }),\n    generatedFiles: (0,_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.Annotation)({\n        reducer: (current, update)=>({\n                ...current,\n                ...update\n            }),\n        default: ()=>({})\n    }),\n    currentIteration: (0,_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.Annotation)({\n        reducer: (_, update)=>update,\n        default: ()=>0\n    }),\n    reviewFeedback: (0,_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.Annotation)({\n        reducer: (_, update)=>update,\n        default: ()=>\"\"\n    }),\n    isComplete: (0,_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.Annotation)({\n        reducer: (_, update)=>update,\n        default: ()=>false\n    }),\n    reviewIterations: (0,_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.Annotation)({\n        reducer: (_, update)=>update,\n        default: ()=>0\n    })\n});\n// Streaming agent graph\nfunction createStreamingLovableAgentGraph(sessionId, model) {\n    // Update LLM if a specific model is requested\n    if (model) {\n        const { createLLM } = __webpack_require__(/*! ./model-providers */ \"(rsc)/./lib/agents/model-providers.ts\");\n        const { llm: newLlm } = __webpack_require__(/*! ./model-providers */ \"(rsc)/./lib/agents/model-providers.ts\");\n    // This is a bit of a hack - we need to update the module-level llm\n    // In a real refactor, we'd pass llm as a parameter\n    }\n    const workflow = new _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.StateGraph(AgentState).addNode(\"planner\", (state)=>(0,_streaming_agents__WEBPACK_IMPORTED_MODULE_3__.streamingPlannerAgent)(state, sessionId, model)).addNode(\"generator\", (state)=>(0,_streaming_agents__WEBPACK_IMPORTED_MODULE_3__.streamingCodeGeneratorAgent)(state, sessionId, model)).addNode(\"reviewer\", (state)=>(0,_streaming_agents__WEBPACK_IMPORTED_MODULE_3__.streamingReviewerAgent)(state, sessionId, model)).addNode(\"fix_issues\", (state)=>(0,_streaming_agents__WEBPACK_IMPORTED_MODULE_3__.streamingFixerAgent)(state, sessionId, model)).addEdge(_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.START, \"planner\").addConditionalEdges(\"planner\", _streaming_agents__WEBPACK_IMPORTED_MODULE_3__.shouldContinue, {\n        planner: \"planner\",\n        generator: \"generator\",\n        end: _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.END\n    }).addConditionalEdges(\"generator\", _streaming_agents__WEBPACK_IMPORTED_MODULE_3__.shouldContinue, {\n        generator: \"generator\",\n        reviewer: \"reviewer\",\n        end: _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.END\n    }).addConditionalEdges(\"reviewer\", _streaming_agents__WEBPACK_IMPORTED_MODULE_3__.shouldContinue, {\n        fix_issues: \"fix_issues\",\n        end: _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.END\n    }).addConditionalEdges(\"fix_issues\", _streaming_agents__WEBPACK_IMPORTED_MODULE_3__.shouldContinue, {\n        reviewer: \"reviewer\",\n        end: _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.END\n    });\n    return workflow.compile();\n}\n// Non-streaming agent graph\nfunction createLovableAgentGraph(sessionId, model) {\n    const workflow = new _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.StateGraph(AgentState).addNode(\"planner\", (state)=>(0,_agents__WEBPACK_IMPORTED_MODULE_4__.plannerAgent)(state, sessionId, model)).addNode(\"generator\", (state)=>(0,_agents__WEBPACK_IMPORTED_MODULE_4__.codeGeneratorAgent)(state, sessionId, model)).addNode(\"reviewer\", (state)=>(0,_agents__WEBPACK_IMPORTED_MODULE_4__.reviewerAgent)(state, sessionId, model)).addEdge(_langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.START, \"planner\").addConditionalEdges(\"planner\", _streaming_agents__WEBPACK_IMPORTED_MODULE_3__.shouldContinue, {\n        generator: \"generator\",\n        end: _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.END\n    }).addConditionalEdges(\"generator\", _streaming_agents__WEBPACK_IMPORTED_MODULE_3__.shouldContinue, {\n        generator: \"generator\",\n        reviewer: \"reviewer\",\n        end: _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.END\n    }).addConditionalEdges(\"reviewer\", _streaming_agents__WEBPACK_IMPORTED_MODULE_3__.shouldContinue, {\n        generator: \"generator\",\n        end: _langchain_langgraph__WEBPACK_IMPORTED_MODULE_0__.END\n    });\n    return workflow.compile();\n}\n// Helper function to save generated files to disk\nfunction saveGeneratedFiles(files, outputDir) {\n    const memory = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getMemory)();\n    // Use project folder if no output directory specified\n    const targetDir = outputDir || (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getProjectFolder)();\n    if (!fs__WEBPACK_IMPORTED_MODULE_5__.existsSync(targetDir)) {\n        fs__WEBPACK_IMPORTED_MODULE_5__.mkdirSync(targetDir, {\n            recursive: true\n        });\n    }\n    const savedFiles = [];\n    for (const [filename, content] of Object.entries(files)){\n        const fullPath = path__WEBPACK_IMPORTED_MODULE_6__.join(targetDir, filename);\n        const dir = path__WEBPACK_IMPORTED_MODULE_6__.dirname(fullPath);\n        if (!fs__WEBPACK_IMPORTED_MODULE_5__.existsSync(dir)) {\n            fs__WEBPACK_IMPORTED_MODULE_5__.mkdirSync(dir, {\n                recursive: true\n            });\n        }\n        const exists = fs__WEBPACK_IMPORTED_MODULE_5__.existsSync(fullPath);\n        fs__WEBPACK_IMPORTED_MODULE_5__.writeFileSync(fullPath, content, \"utf-8\");\n        // Track in memory\n        memory.addFileOperation(exists ? \"modified\" : \"created\", fullPath);\n        savedFiles.push(fullPath);\n    }\n    return savedFiles;\n}\n// Export tool logger statistics\nfunction getToolCallStats() {\n    return _utils_tool_logger__WEBPACK_IMPORTED_MODULE_1__.toolLogger.getStats();\n}\nfunction getToolCallSummary() {\n    return _utils_tool_logger__WEBPACK_IMPORTED_MODULE_1__.toolLogger.getSummary();\n}\nfunction clearToolCallLogs() {\n    _utils_tool_logger__WEBPACK_IMPORTED_MODULE_1__.toolLogger.clear();\n}\n// Get memory statistics for debugging/monitoring\nasync function getMemoryStats() {\n    const memory = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getMemory)();\n    const messages = await memory.getMessages();\n    const fileOps = await memory.getRecentFileOperations();\n    const sessionFiles = await memory.getSessionFiles();\n    return {\n        tokenEstimate: await memory.getTokenEstimate(),\n        messageCount: messages.length,\n        fileOperationCount: fileOps.length,\n        sessionFiles: sessionFiles\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/agent-core.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/agents.ts":
/*!******************************!*\
  !*** ./lib/agents/agents.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeGeneratorAgent: () => (/* binding */ codeGeneratorAgent),\n/* harmony export */   plannerAgent: () => (/* binding */ plannerAgent),\n/* harmony export */   reviewerAgent: () => (/* binding */ reviewerAgent)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _model_providers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model-providers */ \"(rsc)/./lib/agents/model-providers.ts\");\n\n\n// Non-streaming Planner Agent\nasync function plannerAgent(state, sessionId, model) {\n    const systemPrompt = `You are a senior software architect. Break down the user's request into clear, actionable steps.\nEach step should be specific and focused on a single file or component.\n\nOutput format:\n1. [Step description]\n2. [Step description]\n...\n\nBe concise but clear about what needs to be built.`;\n    const messages = [\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessage(systemPrompt),\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(`User request: ${state.userRequest}\\n\\nCreate a detailed plan with numbered steps.`)\n    ];\n    // Use model-specific LLM if provided, otherwise use global llm\n    const llmToUse = model ? (0,_model_providers__WEBPACK_IMPORTED_MODULE_1__.createLLM)(model) : _model_providers__WEBPACK_IMPORTED_MODULE_1__.llm;\n    const response = await llmToUse.invoke(messages);\n    const planText = response.content.toString();\n    // Extract numbered steps\n    const steps = planText.split(\"\\n\").filter((line)=>/^\\d+\\./.test(line.trim())).map((line)=>line.trim());\n    return {\n        plan: steps,\n        messages: [\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(`Plan created:\\n${planText}`)\n        ]\n    };\n}\n// Non-streaming Code Generator Agent\nasync function codeGeneratorAgent(state, sessionId, model) {\n    const currentStep = state.currentIteration;\n    const stepToImplement = state.plan[currentStep];\n    if (!stepToImplement) {\n        return {\n            isComplete: true,\n            messages: [\n                new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(\"All planned steps have been completed.\")\n            ]\n        };\n    }\n    // Use consistent project ID for vector context\n    const projectId = \"agent_context_project\";\n    // Get vector context for better code generation\n    let similarExamples = \"\";\n    let projectContext = \"\";\n    try {\n        // Search for similar code examples\n        similarExamples = await searchSimilarCode(stepToImplement, projectId, 3);\n        console.log(`📚 Found similar examples for step: ${stepToImplement.substring(0, 50)}...`);\n        // Get project context\n        projectContext = await getProjectContext(projectId);\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        console.log(`⚠️ Vector search unavailable (${errorMessage}) - proceeding without examples`);\n        similarExamples = \"Vector search not available - proceeding without examples.\";\n        projectContext = \"Project context not available.\";\n    }\n    const systemPrompt = `You are an expert full-stack developer. Generate clean, well-documented code.\n\nRules:\n1. Think step by step when generating code and log your chain of thought\n2. Generate complete, working code\n3. Include comments for complex logic\n4. Follow best practices and modern patterns\n5. Use TypeScript when applicable\n6. Return code in a structured format with filename and content\n7. Reference similar examples when applicable to maintain consistency\n\nOutput format:\nChain of Thought:\n[Your step-by-step reasoning here]\n\nFiles:\nFILENAME: [relative/path/to/file.ext]\n\\`\\`\\`[language]\n[code here]\n\\`\\`\\`\n\nYou can output multiple files if needed.`;\n    const contextMessages = [\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessage(systemPrompt),\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(`Current step to implement: ${stepToImplement}\n\nFull plan context:\n${state.plan.join(\"\\n\")}\n\nSimilar examples from codebase:\n${similarExamples}\n\nProject context:\n${projectContext}\n\nCurrent iteration: ${currentStep + 1}/${state.plan.length}`)\n    ];\n    // Use model-specific LLM if provided, otherwise use global llm\n    const llmToUse = model ? (0,_model_providers__WEBPACK_IMPORTED_MODULE_1__.createLLM)(model) : _model_providers__WEBPACK_IMPORTED_MODULE_1__.llm;\n    const response = await llmToUse.invoke(contextMessages);\n    const generatedContent = response.content.toString();\n    // Parse the generated content to extract files\n    const files = parseGeneratedFiles(generatedContent);\n    return {\n        generatedFiles: files,\n        currentIteration: currentStep + 1,\n        messages: [\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(`Generated code for step ${currentStep + 1}:\\n${generatedContent}`)\n        ]\n    };\n}\n// Non-streaming Reviewer Agent\nasync function reviewerAgent(state, sessionId, model) {\n    const generatedFiles = state.generatedFiles;\n    if (Object.keys(generatedFiles).length === 0) {\n        return {\n            isComplete: true,\n            messages: [\n                new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(\"No files to review.\")\n            ]\n        };\n    }\n    const systemPrompt = `You are a senior code reviewer. Analyze the generated code for:\n1. Syntax errors and type issues\n2. Logic errors or bugs\n3. Security vulnerabilities\n4. Performance issues\n5. Code quality and best practices\n6. Missing functionality\n7. Integration issues\n\nBe thorough but constructive. If you find issues, provide specific recommendations for fixes.\n\nOutput format:\nISSUES FOUND:\n- [Issue 1 with specific details]\n- [Issue 2 with specific details]\n\nRECOMMENDATIONS:\n- [Specific fix for issue 1]\n- [Specific fix for issue 2]\n\nIf no issues found, say \"CODE REVIEW PASSED\"`;\n    const fileContents = Object.entries(generatedFiles).map(([filename, content])=>`File: ${filename}\\n\\`\\`\\`\\n${content}\\n\\`\\`\\``).join(\"\\n\\n\");\n    const messages = [\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessage(systemPrompt),\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(`Review the following generated code:\n\n${fileContents}\n\nUser request: ${state.userRequest}\nPlan: ${state.plan.join(\"\\n\")}`)\n    ];\n    // Use model-specific LLM if provided, otherwise use global llm\n    const llmToUse = model ? (0,_model_providers__WEBPACK_IMPORTED_MODULE_1__.createLLM)(model) : _model_providers__WEBPACK_IMPORTED_MODULE_1__.llm;\n    const response = await llmToUse.invoke(messages);\n    const reviewContent = response.content.toString();\n    const hasIssues = !reviewContent.toLowerCase().includes(\"code review passed\");\n    return {\n        reviewFeedback: reviewContent,\n        reviewIterations: state.reviewIterations + 1,\n        messages: [\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(`Code review completed:\\n${reviewContent}`)\n        ]\n    };\n}\n// Helper functions (copied from original)\nasync function searchSimilarCode(query, projectId, limit = 3) {\n    // This would integrate with vector search - placeholder for now\n    return \"Vector search integration needed\";\n}\nasync function getProjectContext(projectId) {\n    // This would get project context - placeholder for now\n    return \"Project context integration needed\";\n}\nfunction parseGeneratedFiles(content) {\n    const files = {};\n    const fileRegex = /FILENAME:\\s*([^\\n]+)\\n```[\\w]*\\n([\\s\\S]*?)```/g;\n    let match;\n    while((match = fileRegex.exec(content)) !== null){\n        const filename = match[1].trim();\n        const fileContent = match[2].trim();\n        files[filename] = fileContent;\n    }\n    return files;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/agents.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/model-providers.ts":
/*!***************************************!*\
  !*** ./lib/agents/model-providers.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLLM: () => (/* binding */ createLLM),\n/* harmony export */   getModelName: () => (/* binding */ getModelName),\n/* harmony export */   llm: () => (/* binding */ llm)\n/* harmony export */ });\n/* harmony import */ var _langchain_groq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/groq */ \"(rsc)/./node_modules/.pnpm/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/groq/dist/index.js\");\n/* harmony import */ var _langchain_google_genai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/google-genai */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/index.js\");\n/* harmony import */ var _langchain_openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/openai */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/index.js\");\n\n\n\n// Model ID to actual model name mapping\nconst getModelName = (modelId)=>{\n    const modelMappings = {\n        \"groq-mixtral-8x7b\": \"mixtral-8x7b-32768\",\n        \"groq-llama-3.1-8b-instant\": \"llama-3.1-8b-instant\",\n        \"groq-llama-3.3-70b-versatile\": \"llama-3.3-70b-versatile\",\n        \"gemini-2.5-flash\": \"gemini-2.5-flash\",\n        \"gemini-2.5-pro\": \"gemini-2.5-pro\"\n    };\n    return modelMappings[modelId] || modelId;\n};\n// Initialize the LLM model with provider selection\nfunction createLLM(model) {\n    // If a specific model is requested, try to use it\n    if (model) {\n        const groqApiKey = process.env.GROQ_API_KEY;\n        const geminiApiKey = process.env.GEMINI_API_KEY;\n        const openRouterApiKey = process.env.OPENROUTER_API_KEY ?? process.env.OPENAI_API_KEY;\n        if (model.startsWith(\"groq-\") && groqApiKey) {\n            const actualModel = getModelName(model);\n            console.log(\"⚡ Using Groq API (Fastest) - Model:\", actualModel);\n            return new _langchain_groq__WEBPACK_IMPORTED_MODULE_0__.ChatGroq({\n                apiKey: groqApiKey,\n                model: actualModel,\n                temperature: 0.7,\n                maxTokens: 4096\n            });\n        } else if (model.startsWith(\"gemini-\") && geminiApiKey) {\n            const actualModel = getModelName(model);\n            console.log(\"\\uD83E\\uDD16 Using Google Gemini API - Model:\", actualModel);\n            return new _langchain_google_genai__WEBPACK_IMPORTED_MODULE_1__.ChatGoogleGenerativeAI({\n                apiKey: geminiApiKey,\n                model: actualModel,\n                temperature: 0.7,\n                maxOutputTokens: 4096\n            });\n        } else if (openRouterApiKey) {\n            console.log(\"\\uD83D\\uDD04 Using OpenRouter API - Model:\", model);\n            const apiBase = process.env.OPENROUTER_API_BASE ?? process.env.OPENAI_API_BASE ?? \"https://openrouter.ai/api/v1\";\n            return new _langchain_openai__WEBPACK_IMPORTED_MODULE_2__.ChatOpenAI({\n                apiKey: openRouterApiKey,\n                configuration: {\n                    baseURL: apiBase\n                },\n                model: model,\n                temperature: 0.7\n            });\n        }\n    }\n    // Default priority: Groq (fastest) → Gemini (reliable) → OpenRouter (fallback)\n    const groqApiKey = process.env.GROQ_API_KEY;\n    const geminiApiKey = process.env.GEMINI_API_KEY;\n    const openRouterApiKey = process.env.OPENROUTER_API_KEY ?? process.env.OPENAI_API_KEY;\n    if (groqApiKey) {\n        console.log(\"⚡ Using Groq API (Fastest)\");\n        return new _langchain_groq__WEBPACK_IMPORTED_MODULE_0__.ChatGroq({\n            apiKey: groqApiKey,\n            model: process.env.GROQ_MODEL ?? \"llama-3.1-8b-instant\",\n            temperature: 0.7,\n            maxTokens: 4096\n        });\n    } else if (geminiApiKey) {\n        console.log(\"\\uD83E\\uDD16 Using Google Gemini API\");\n        return new _langchain_google_genai__WEBPACK_IMPORTED_MODULE_1__.ChatGoogleGenerativeAI({\n            apiKey: geminiApiKey,\n            model: process.env.GEMINI_MODEL ?? \"gemini-2.5-flash\",\n            temperature: 0.7,\n            maxOutputTokens: 4096\n        });\n    } else if (openRouterApiKey) {\n        console.log(\"\\uD83D\\uDD04 Using OpenRouter API\");\n        const apiBase = process.env.OPENROUTER_API_BASE ?? process.env.OPENAI_API_BASE ?? \"https://openrouter.ai/api/v1\";\n        return new _langchain_openai__WEBPACK_IMPORTED_MODULE_2__.ChatOpenAI({\n            apiKey: openRouterApiKey,\n            configuration: {\n                baseURL: apiBase\n            },\n            model: process.env.OPENAI_MODEL ?? process.env.OPENROUTER_MODEL ?? \"openai/gpt-4o\",\n            temperature: 0.7\n        });\n    } else {\n        throw new Error(\"No API key found. Set GROQ_API_KEY, GEMINI_API_KEY, or OPENROUTER_API_KEY/OPENAI_API_KEY\");\n    }\n}\nlet llm = createLLM();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYWdlbnRzL21vZGVsLXByb3ZpZGVycy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMkM7QUFDc0I7QUFDbEI7QUFFL0Msd0NBQXdDO0FBQ2pDLE1BQU1HLGVBQWUsQ0FBQ0M7SUFDM0IsTUFBTUMsZ0JBQXdDO1FBQzVDLHFCQUFxQjtRQUNyQiw2QkFBNkI7UUFDN0IsZ0NBQWdDO1FBQ2hDLG9CQUFvQjtRQUNwQixrQkFBa0I7SUFDcEI7SUFDQSxPQUFPQSxhQUFhLENBQUNELFFBQVEsSUFBSUE7QUFDbkMsRUFBRTtBQUVGLG1EQUFtRDtBQUM1QyxTQUFTRSxVQUFVQyxLQUFjO0lBQ3RDLGtEQUFrRDtJQUNsRCxJQUFJQSxPQUFPO1FBQ1QsTUFBTUMsYUFBYUMsUUFBUUMsR0FBRyxDQUFDQyxZQUFZO1FBQzNDLE1BQU1DLGVBQWVILFFBQVFDLEdBQUcsQ0FBQ0csY0FBYztRQUMvQyxNQUFNQyxtQkFBbUJMLFFBQVFDLEdBQUcsQ0FBQ0ssa0JBQWtCLElBQUlOLFFBQVFDLEdBQUcsQ0FBQ00sY0FBYztRQUVyRixJQUFJVCxNQUFNVSxVQUFVLENBQUMsWUFBWVQsWUFBWTtZQUMzQyxNQUFNVSxjQUFjZixhQUFhSTtZQUNqQ1ksUUFBUUMsR0FBRyxDQUFDLHVDQUF1Q0Y7WUFDbkQsT0FBTyxJQUFJbEIscURBQVFBLENBQUM7Z0JBQ2xCcUIsUUFBUWI7Z0JBQ1JELE9BQU9XO2dCQUNQSSxhQUFhO2dCQUNiQyxXQUFXO1lBQ2I7UUFDRixPQUFPLElBQUloQixNQUFNVSxVQUFVLENBQUMsY0FBY0wsY0FBYztZQUN0RCxNQUFNTSxjQUFjZixhQUFhSTtZQUNqQ1ksUUFBUUMsR0FBRyxDQUFDLGlEQUF1Q0Y7WUFDbkQsT0FBTyxJQUFJakIsMkVBQXNCQSxDQUFDO2dCQUNoQ29CLFFBQVFUO2dCQUNSTCxPQUFPVztnQkFDUEksYUFBYTtnQkFDYkUsaUJBQWlCO1lBQ25CO1FBQ0YsT0FBTyxJQUFJVixrQkFBa0I7WUFDM0JLLFFBQVFDLEdBQUcsQ0FBQyw4Q0FBb0NiO1lBQ2hELE1BQU1rQixVQUFVaEIsUUFBUUMsR0FBRyxDQUFDZ0IsbUJBQW1CLElBQUlqQixRQUFRQyxHQUFHLENBQUNpQixlQUFlLElBQUk7WUFDbEYsT0FBTyxJQUFJekIseURBQVVBLENBQUM7Z0JBQ3BCbUIsUUFBUVA7Z0JBQ1JjLGVBQWU7b0JBQ2JDLFNBQVNKO2dCQUNYO2dCQUNBbEIsT0FBT0E7Z0JBQ1BlLGFBQWE7WUFDZjtRQUNGO0lBQ0Y7SUFFQSwrRUFBK0U7SUFDL0UsTUFBTWQsYUFBYUMsUUFBUUMsR0FBRyxDQUFDQyxZQUFZO0lBQzNDLE1BQU1DLGVBQWVILFFBQVFDLEdBQUcsQ0FBQ0csY0FBYztJQUMvQyxNQUFNQyxtQkFBbUJMLFFBQVFDLEdBQUcsQ0FBQ0ssa0JBQWtCLElBQUlOLFFBQVFDLEdBQUcsQ0FBQ00sY0FBYztJQUVyRixJQUFJUixZQUFZO1FBQ2RXLFFBQVFDLEdBQUcsQ0FBQztRQUNaLE9BQU8sSUFBSXBCLHFEQUFRQSxDQUFDO1lBQ2xCcUIsUUFBUWI7WUFDUkQsT0FBT0UsUUFBUUMsR0FBRyxDQUFDb0IsVUFBVSxJQUFJO1lBQ2pDUixhQUFhO1lBQ2JDLFdBQVc7UUFDYjtJQUNGLE9BQU8sSUFBSVgsY0FBYztRQUN2Qk8sUUFBUUMsR0FBRyxDQUFDO1FBQ1osT0FBTyxJQUFJbkIsMkVBQXNCQSxDQUFDO1lBQ2hDb0IsUUFBUVQ7WUFDUkwsT0FBT0UsUUFBUUMsR0FBRyxDQUFDcUIsWUFBWSxJQUFJO1lBQ25DVCxhQUFhO1lBQ2JFLGlCQUFpQjtRQUNuQjtJQUNGLE9BQU8sSUFBSVYsa0JBQWtCO1FBQzNCSyxRQUFRQyxHQUFHLENBQUM7UUFDWixNQUFNSyxVQUFVaEIsUUFBUUMsR0FBRyxDQUFDZ0IsbUJBQW1CLElBQUlqQixRQUFRQyxHQUFHLENBQUNpQixlQUFlLElBQUk7UUFDbEYsT0FBTyxJQUFJekIseURBQVVBLENBQUM7WUFDcEJtQixRQUFRUDtZQUNSYyxlQUFlO2dCQUNiQyxTQUFTSjtZQUNYO1lBQ0FsQixPQUFPRSxRQUFRQyxHQUFHLENBQUNzQixZQUFZLElBQUl2QixRQUFRQyxHQUFHLENBQUN1QixnQkFBZ0IsSUFBSTtZQUNuRVgsYUFBYTtRQUNmO0lBQ0YsT0FBTztRQUNMLE1BQU0sSUFBSVksTUFBTTtJQUNsQjtBQUNGO0FBRU8sSUFBSUMsTUFBTTdCLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL2xpYi9hZ2VudHMvbW9kZWwtcHJvdmlkZXJzLnRzP2U4NzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhdEdyb3EgfSBmcm9tICdAbGFuZ2NoYWluL2dyb3EnO1xuaW1wb3J0IHsgQ2hhdEdvb2dsZUdlbmVyYXRpdmVBSSB9IGZyb20gJ0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpJztcbmltcG9ydCB7IENoYXRPcGVuQUkgfSBmcm9tICdAbGFuZ2NoYWluL29wZW5haSc7XG5cbi8vIE1vZGVsIElEIHRvIGFjdHVhbCBtb2RlbCBuYW1lIG1hcHBpbmdcbmV4cG9ydCBjb25zdCBnZXRNb2RlbE5hbWUgPSAobW9kZWxJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgY29uc3QgbW9kZWxNYXBwaW5nczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAnZ3JvcS1taXh0cmFsLTh4N2InOiAnbWl4dHJhbC04eDdiLTMyNzY4JyxcbiAgICAnZ3JvcS1sbGFtYS0zLjEtOGItaW5zdGFudCc6ICdsbGFtYS0zLjEtOGItaW5zdGFudCcsXG4gICAgJ2dyb3EtbGxhbWEtMy4zLTcwYi12ZXJzYXRpbGUnOiAnbGxhbWEtMy4zLTcwYi12ZXJzYXRpbGUnLFxuICAgICdnZW1pbmktMi41LWZsYXNoJzogJ2dlbWluaS0yLjUtZmxhc2gnLFxuICAgICdnZW1pbmktMi41LXBybyc6ICdnZW1pbmktMi41LXBybycsXG4gIH07XG4gIHJldHVybiBtb2RlbE1hcHBpbmdzW21vZGVsSWRdIHx8IG1vZGVsSWQ7XG59O1xuXG4vLyBJbml0aWFsaXplIHRoZSBMTE0gbW9kZWwgd2l0aCBwcm92aWRlciBzZWxlY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMTE0obW9kZWw/OiBzdHJpbmcpIHtcbiAgLy8gSWYgYSBzcGVjaWZpYyBtb2RlbCBpcyByZXF1ZXN0ZWQsIHRyeSB0byB1c2UgaXRcbiAgaWYgKG1vZGVsKSB7XG4gICAgY29uc3QgZ3JvcUFwaUtleSA9IHByb2Nlc3MuZW52LkdST1FfQVBJX0tFWTtcbiAgICBjb25zdCBnZW1pbmlBcGlLZXkgPSBwcm9jZXNzLmVudi5HRU1JTklfQVBJX0tFWTtcbiAgICBjb25zdCBvcGVuUm91dGVyQXBpS2V5ID0gcHJvY2Vzcy5lbnYuT1BFTlJPVVRFUl9BUElfS0VZID8/IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZO1xuXG4gICAgaWYgKG1vZGVsLnN0YXJ0c1dpdGgoJ2dyb3EtJykgJiYgZ3JvcUFwaUtleSkge1xuICAgICAgY29uc3QgYWN0dWFsTW9kZWwgPSBnZXRNb2RlbE5hbWUobW9kZWwpO1xuICAgICAgY29uc29sZS5sb2coJ+KaoSBVc2luZyBHcm9xIEFQSSAoRmFzdGVzdCkgLSBNb2RlbDonLCBhY3R1YWxNb2RlbCk7XG4gICAgICByZXR1cm4gbmV3IENoYXRHcm9xKHtcbiAgICAgICAgYXBpS2V5OiBncm9xQXBpS2V5LFxuICAgICAgICBtb2RlbDogYWN0dWFsTW9kZWwsXG4gICAgICAgIHRlbXBlcmF0dXJlOiAwLjcsXG4gICAgICAgIG1heFRva2VuczogNDA5NixcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobW9kZWwuc3RhcnRzV2l0aCgnZ2VtaW5pLScpICYmIGdlbWluaUFwaUtleSkge1xuICAgICAgY29uc3QgYWN0dWFsTW9kZWwgPSBnZXRNb2RlbE5hbWUobW9kZWwpO1xuICAgICAgY29uc29sZS5sb2coJ/CfpJYgVXNpbmcgR29vZ2xlIEdlbWluaSBBUEkgLSBNb2RlbDonLCBhY3R1YWxNb2RlbCk7XG4gICAgICByZXR1cm4gbmV3IENoYXRHb29nbGVHZW5lcmF0aXZlQUkoe1xuICAgICAgICBhcGlLZXk6IGdlbWluaUFwaUtleSxcbiAgICAgICAgbW9kZWw6IGFjdHVhbE1vZGVsLFxuICAgICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgICAgICBtYXhPdXRwdXRUb2tlbnM6IDQwOTYsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG9wZW5Sb3V0ZXJBcGlLZXkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SEIFVzaW5nIE9wZW5Sb3V0ZXIgQVBJIC0gTW9kZWw6JywgbW9kZWwpO1xuICAgICAgY29uc3QgYXBpQmFzZSA9IHByb2Nlc3MuZW52Lk9QRU5ST1VURVJfQVBJX0JBU0UgPz8gcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9CQVNFID8/ICdodHRwczovL29wZW5yb3V0ZXIuYWkvYXBpL3YxJztcbiAgICAgIHJldHVybiBuZXcgQ2hhdE9wZW5BSSh7XG4gICAgICAgIGFwaUtleTogb3BlblJvdXRlckFwaUtleSxcbiAgICAgICAgY29uZmlndXJhdGlvbjoge1xuICAgICAgICAgIGJhc2VVUkw6IGFwaUJhc2UsXG4gICAgICAgIH0sXG4gICAgICAgIG1vZGVsOiBtb2RlbCxcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIERlZmF1bHQgcHJpb3JpdHk6IEdyb3EgKGZhc3Rlc3QpIOKGkiBHZW1pbmkgKHJlbGlhYmxlKSDihpIgT3BlblJvdXRlciAoZmFsbGJhY2spXG4gIGNvbnN0IGdyb3FBcGlLZXkgPSBwcm9jZXNzLmVudi5HUk9RX0FQSV9LRVk7XG4gIGNvbnN0IGdlbWluaUFwaUtleSA9IHByb2Nlc3MuZW52LkdFTUlOSV9BUElfS0VZO1xuICBjb25zdCBvcGVuUm91dGVyQXBpS2V5ID0gcHJvY2Vzcy5lbnYuT1BFTlJPVVRFUl9BUElfS0VZID8/IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZO1xuXG4gIGlmIChncm9xQXBpS2V5KSB7XG4gICAgY29uc29sZS5sb2coJ+KaoSBVc2luZyBHcm9xIEFQSSAoRmFzdGVzdCknKTtcbiAgICByZXR1cm4gbmV3IENoYXRHcm9xKHtcbiAgICAgIGFwaUtleTogZ3JvcUFwaUtleSxcbiAgICAgIG1vZGVsOiBwcm9jZXNzLmVudi5HUk9RX01PREVMID8/ICdsbGFtYS0zLjEtOGItaW5zdGFudCcsXG4gICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgICAgbWF4VG9rZW5zOiA0MDk2LFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKGdlbWluaUFwaUtleSkge1xuICAgIGNvbnNvbGUubG9nKCfwn6SWIFVzaW5nIEdvb2dsZSBHZW1pbmkgQVBJJyk7XG4gICAgcmV0dXJuIG5ldyBDaGF0R29vZ2xlR2VuZXJhdGl2ZUFJKHtcbiAgICAgIGFwaUtleTogZ2VtaW5pQXBpS2V5LFxuICAgICAgbW9kZWw6IHByb2Nlc3MuZW52LkdFTUlOSV9NT0RFTCA/PyAnZ2VtaW5pLTIuNS1mbGFzaCcsXG4gICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgICAgbWF4T3V0cHV0VG9rZW5zOiA0MDk2LFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKG9wZW5Sb3V0ZXJBcGlLZXkpIHtcbiAgICBjb25zb2xlLmxvZygn8J+UhCBVc2luZyBPcGVuUm91dGVyIEFQSScpO1xuICAgIGNvbnN0IGFwaUJhc2UgPSBwcm9jZXNzLmVudi5PUEVOUk9VVEVSX0FQSV9CQVNFID8/IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfQkFTRSA/PyAnaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MSc7XG4gICAgcmV0dXJuIG5ldyBDaGF0T3BlbkFJKHtcbiAgICAgIGFwaUtleTogb3BlblJvdXRlckFwaUtleSxcbiAgICAgIGNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgYmFzZVVSTDogYXBpQmFzZSxcbiAgICAgIH0sXG4gICAgICBtb2RlbDogcHJvY2Vzcy5lbnYuT1BFTkFJX01PREVMID8/IHByb2Nlc3MuZW52Lk9QRU5ST1VURVJfTU9ERUwgPz8gJ29wZW5haS9ncHQtNG8nLFxuICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIEFQSSBrZXkgZm91bmQuIFNldCBHUk9RX0FQSV9LRVksIEdFTUlOSV9BUElfS0VZLCBvciBPUEVOUk9VVEVSX0FQSV9LRVkvT1BFTkFJX0FQSV9LRVknKTtcbiAgfVxufVxuXG5leHBvcnQgbGV0IGxsbSA9IGNyZWF0ZUxMTSgpOyJdLCJuYW1lcyI6WyJDaGF0R3JvcSIsIkNoYXRHb29nbGVHZW5lcmF0aXZlQUkiLCJDaGF0T3BlbkFJIiwiZ2V0TW9kZWxOYW1lIiwibW9kZWxJZCIsIm1vZGVsTWFwcGluZ3MiLCJjcmVhdGVMTE0iLCJtb2RlbCIsImdyb3FBcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiR1JPUV9BUElfS0VZIiwiZ2VtaW5pQXBpS2V5IiwiR0VNSU5JX0FQSV9LRVkiLCJvcGVuUm91dGVyQXBpS2V5IiwiT1BFTlJPVVRFUl9BUElfS0VZIiwiT1BFTkFJX0FQSV9LRVkiLCJzdGFydHNXaXRoIiwiYWN0dWFsTW9kZWwiLCJjb25zb2xlIiwibG9nIiwiYXBpS2V5IiwidGVtcGVyYXR1cmUiLCJtYXhUb2tlbnMiLCJtYXhPdXRwdXRUb2tlbnMiLCJhcGlCYXNlIiwiT1BFTlJPVVRFUl9BUElfQkFTRSIsIk9QRU5BSV9BUElfQkFTRSIsImNvbmZpZ3VyYXRpb24iLCJiYXNlVVJMIiwiR1JPUV9NT0RFTCIsIkdFTUlOSV9NT0RFTCIsIk9QRU5BSV9NT0RFTCIsIk9QRU5ST1VURVJfTU9ERUwiLCJFcnJvciIsImxsbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/model-providers.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/streaming-agents.ts":
/*!****************************************!*\
  !*** ./lib/agents/streaming-agents.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setEmitFunction: () => (/* binding */ setEmitFunction),\n/* harmony export */   shouldContinue: () => (/* binding */ shouldContinue),\n/* harmony export */   streamingCodeGeneratorAgent: () => (/* binding */ streamingCodeGeneratorAgent),\n/* harmony export */   streamingFixerAgent: () => (/* binding */ streamingFixerAgent),\n/* harmony export */   streamingPlannerAgent: () => (/* binding */ streamingPlannerAgent),\n/* harmony export */   streamingReviewerAgent: () => (/* binding */ streamingReviewerAgent)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _utils_prompt_optimizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/prompt-optimizer */ \"(rsc)/./lib/utils/prompt-optimizer.ts\");\n/* harmony import */ var _utils_summarizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/summarizer */ \"(rsc)/./lib/utils/summarizer.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(rsc)/./lib/agents/utils.ts\");\n/* harmony import */ var _model_providers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./model-providers */ \"(rsc)/./lib/agents/model-providers.ts\");\n/* harmony import */ var _tools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tools */ \"(rsc)/./lib/agents/tools.ts\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n// Import the emit function from the API route\nlet emitEvent = ()=>{};\nfunction setEmitFunction(fn) {\n    emitEvent = fn;\n}\n// Bind tools to the LLM\nconst llmWithTools = _model_providers__WEBPACK_IMPORTED_MODULE_4__.llm.bindTools(_tools__WEBPACK_IMPORTED_MODULE_5__.tools);\n// Helper function to parse generated files from LLM output\nfunction parseGeneratedFiles(content) {\n    const files = {};\n    const fileRegex = /FILENAME:\\s*(.+?)\\n```(\\w+)?\\n([\\s\\S]*?)```/g;\n    let match;\n    while((match = fileRegex.exec(content)) !== null){\n        const filename = match[1].trim();\n        const code = match[3].trim();\n        files[filename] = code;\n    }\n    return files;\n}\n// Streaming Planner Agent: Breaks down user request into actionable steps\nasync function streamingPlannerAgent(state, sessionId, model) {\n    emitEvent(sessionId || \"\", {\n        type: \"status\",\n        message: \"Planning your request...\"\n    });\n    const memory = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getMemory)();\n    // Add user request to memory\n    await memory.addMessage(\"user\", state.userRequest);\n    // Get compressed context from memory\n    const contextSummary = await memory.getCompressedContext(state.userRequest);\n    const sessionFiles = await memory.getSessionFiles();\n    // Check if there are existing files - if so, this is a modification request\n    const hasExistingFiles = Object.keys(state.generatedFiles).length > 0 || sessionFiles.length > 0;\n    let systemPrompt = `You are a senior software architect. Analyze the user's request and create a clear plan.\n\n${hasExistingFiles ? `\nIMPORTANT: There are EXISTING FILES in this session. The user wants to MODIFY or ENHANCE them.\nSession files: ${sessionFiles.length > 0 ? sessionFiles.join(\", \") : \"None\"}\nCurrent state files: ${Object.keys(state.generatedFiles).join(\", \")}\n\nYour plan should focus on MODIFYING these existing files, not creating new random files.\n` : `\nThis is a NEW project. Create a plan to build it from scratch.\n`}\n\n${contextSummary ? `\\nRECENT CONTEXT:\\n${(0,_utils_summarizer__WEBPACK_IMPORTED_MODULE_2__.smartTruncate)(contextSummary, 800)}` : \"\"}\n\nOUTPUT FORMAT: Just numbered steps like:\n1. Create/Modify [specific file] - [what to do]\n2. Update [specific file] - [what to change]\n3. Add [feature] to [file]\n\nRULES:\n- Maximum 5 steps\n- Be SPECIFIC about which files to create/modify\n- If modifying, say \"Modify\" or \"Update\", not \"Create\"\n- Each step should produce tangible code\n- Keep it simple and actionable`;\n    // Optimize the system prompt\n    systemPrompt = _utils_prompt_optimizer__WEBPACK_IMPORTED_MODULE_1__.promptOptimizer.optimizeSystemPrompt(systemPrompt, contextSummary || undefined);\n    let contextInfo = `User request: ${state.userRequest}`;\n    if (hasExistingFiles) {\n        const allFiles = Array.from(new Set([\n            ...sessionFiles,\n            ...Object.keys(state.generatedFiles)\n        ]));\n        contextInfo += `\\n\\nEXISTING PROJECT FILES:\\n${allFiles.map((f)=>`- ${f}`).join(\"\\n\")}`;\n        contextInfo += `\\n\\nThe user wants to modify/enhance the existing project. Create a plan that works WITH these files.`;\n    }\n    const messages = [\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessage(systemPrompt),\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(contextInfo)\n    ];\n    // Use model-specific LLM if provided, otherwise use global llm\n    const llmToUse = model ? (0,_model_providers__WEBPACK_IMPORTED_MODULE_4__.createLLM)(model) : _model_providers__WEBPACK_IMPORTED_MODULE_4__.llm;\n    const response = await llmToUse.invoke(messages);\n    const planText = response.content.toString();\n    // Add plan to memory\n    await memory.addMessage(\"assistant\", `Planning: ${planText.substring(0, 200)}...`);\n    // Parse the plan into steps\n    const planSteps = planText.split(\"\\n\").filter((line)=>/^\\d+\\./.test(line.trim())).map((line)=>line.replace(/^\\d+\\.\\s*/, \"\").trim()).filter((step)=>step.length > 0).slice(0, 5); // Limit to 5 steps\n    console.log(`📋 Generated plan with ${planSteps.length} steps:`, planSteps);\n    // Emit plan to client\n    emitEvent(sessionId || \"\", {\n        type: \"plan\",\n        plan: planSteps\n    });\n    return {\n        plan: planSteps,\n        messages: [\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(`Planning completed. Created ${planSteps.length} steps to implement your request.`)\n        ]\n    };\n}\n// Streaming Code Generator Agent: Implements each step of the plan\nasync function streamingCodeGeneratorAgent(state, sessionId, model) {\n    const currentStep = state.currentIteration;\n    const stepToImplement = state.plan[currentStep];\n    emitEvent(sessionId || \"\", {\n        type: \"status\",\n        message: `Generating code for step ${currentStep + 1}: ${stepToImplement?.substring(0, 50)}...`\n    });\n    if (!stepToImplement) {\n        console.log(\"⚠️  No step to implement at iteration\", currentStep);\n        return {\n            isComplete: true\n        };\n    }\n    const memory = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getMemory)();\n    const contextSummary = await memory.getCompressedContext(state.userRequest);\n    const sessionFiles = await memory.getSessionFiles();\n    // Get existing files for context\n    const existingFiles = {\n        ...state.generatedFiles\n    };\n    for (const file of sessionFiles){\n        try {\n            const content = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23)).then((fs)=>fs.readFileSync(file, \"utf-8\"));\n            existingFiles[file] = content;\n        } catch (error) {\n            console.warn(`Could not read existing file ${file}:`, error);\n        }\n    }\n    const systemPrompt = `You are an expert software engineer. Implement the specified step using the available tools.\n\nIMPORTANT RULES:\n- Use the provided tools to create/modify files\n- Each tool call should be purposeful and targeted\n- Read existing files first to understand the current state\n- Make incremental, testable changes\n- Include proper imports and dependencies\n- Follow the existing code style and patterns\n- Test your changes by reading the files back\n\n${contextSummary ? `CONTEXT:\\n${(0,_utils_summarizer__WEBPACK_IMPORTED_MODULE_2__.smartTruncate)(contextSummary, 600)}\\n\\n` : \"\"}\n\nAVAILABLE TOOLS:\n- read_file: Read existing files\n- write_file: Create new files or replace entire files\n- append_to_file: Add content to existing files\n- replace_in_file: Find and replace text patterns\n- insert_at_line: Insert content at specific line numbers\n- replace_block: Replace content between markers\n- replace_line_range: Replace specific line ranges\n- search_files: Find code patterns across files\n- execute_command: Run shell commands (npm, git, etc.)\n\nOUTPUT FORMAT:\nChain of Thought: [Your reasoning process]\nFiles: [List of files you'll create/modify]\n[Then use the appropriate tools to implement the changes]\n\nTOOL USAGE:\n- Use tools by calling them directly in your response\n- Each tool call should be a separate function call with proper JSON arguments\n- Tools will automatically execute and provide results\n- Format: Call tools like normal function calls with the tool name and arguments\n- Example: write_file({ \"filePath\": \"index.html\", \"content\": \"<html>...</html>\" })`;\n    const userPrompt = `Implement this step: \"${stepToImplement}\"\n\nExisting project files: ${Object.keys(existingFiles).join(\", \") || \"None\"}\n\n${state.reviewFeedback ? `Previous review feedback to address: ${state.reviewFeedback}` : \"\"}`;\n    const messages = [\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessage(systemPrompt),\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(userPrompt)\n    ];\n    // Use model-specific LLM if provided, otherwise use global llmWithTools\n    const llmToUse = model ? (0,_model_providers__WEBPACK_IMPORTED_MODULE_4__.createLLM)(model) : _model_providers__WEBPACK_IMPORTED_MODULE_4__.llm;\n    const llmWithToolsToUse = model ? llmToUse.bindTools(_tools__WEBPACK_IMPORTED_MODULE_5__.tools) : llmWithTools;\n    const response = await llmWithToolsToUse.invoke(messages);\n    // Extract generated files from tool calls or response content\n    const generatedFiles = {};\n    let chainOfThought = \"\";\n    if (response.tool_calls && response.tool_calls.length > 0) {\n        for (const toolCall of response.tool_calls){\n            console.log(`🔧 Tool called: ${toolCall.name}`, toolCall.args);\n            if (toolCall.name === \"write_file\" || toolCall.name === \"append_to_file\") {\n                try {\n                    const args = toolCall.args;\n                    if (args.filePath && args.content) {\n                        generatedFiles[args.filePath] = args.content;\n                    }\n                } catch (error) {\n                    console.warn(\"Could not parse tool call arguments:\", error);\n                }\n            }\n        }\n        console.log(`📊 Processed ${response.tool_calls.length} tool calls`);\n    } else {\n        // Fallback: parse files from response content\n        const newFiles = parseGeneratedFiles(response.content.toString());\n        Object.assign(generatedFiles, newFiles);\n    }\n    // Extract chain of thought from response\n    const content = response.content.toString();\n    const cotMatch = content.match(/Chain of Thought:\\s*([\\s\\S]*?)(?=Files:|FILENAME:|$)/i);\n    if (cotMatch) {\n        chainOfThought = cotMatch[1].trim();\n    }\n    // Add to memory\n    await memory.addMessage(\"assistant\", `Step ${currentStep + 1}: ${chainOfThought.substring(0, 200)}...`);\n    // Emit real-time updates\n    if (chainOfThought) {\n        console.log(`🔍 Real-time COT Step ${currentStep + 1}: ${chainOfThought.substring(0, 100)}...`);\n        emitEvent(sessionId || \"\", {\n            type: \"chain_of_thought\",\n            step: currentStep + 1,\n            reasoning: chainOfThought\n        });\n    }\n    if (Object.keys(generatedFiles).length > 0) {\n        const files = Object.keys(generatedFiles);\n        console.log(`📁 Real-time Files Generated: ${files.join(\", \")}`);\n        emitEvent(sessionId || \"\", {\n            type: \"files_generated\",\n            files: files,\n            step: currentStep + 1\n        });\n    }\n    return {\n        generatedFiles,\n        currentIteration: currentStep + 1,\n        messages: [\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(`Step ${currentStep + 1} completed. ${Object.keys(generatedFiles).length} files updated.`)\n        ]\n    };\n}\n// Streaming Reviewer Agent: Reviews the generated code for quality and completeness\nasync function streamingReviewerAgent(state, sessionId, model) {\n    emitEvent(sessionId || \"\", {\n        type: \"status\",\n        message: \"Reviewing generated code...\"\n    });\n    const memory = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getMemory)();\n    const allFiles = {\n        ...state.generatedFiles\n    };\n    // Read current state of all files - try multiple resolution strategies\n    // 1) If filePath is absolute or exists under project folder, use it\n    // 2) Otherwise try to find a matching basename in session files tracked in memory\n    // 3) Fallback to the content already present in state.generatedFiles\n    const sessionFiles = await memory.getSessionFiles();\n    for (const filePath of Object.keys(allFiles)){\n        try {\n            const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n            const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getProjectFolder)();\n            // Candidate 1: absolute path or projectFolder + filePath\n            const candidate = path__WEBPACK_IMPORTED_MODULE_6__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_6__.join(projectFolder, filePath);\n            if (fs.existsSync(candidate)) {\n                allFiles[filePath] = fs.readFileSync(candidate, \"utf-8\");\n                continue;\n            }\n            // Candidate 2: look up by basename in sessionFiles recorded in memory\n            const base = path__WEBPACK_IMPORTED_MODULE_6__.basename(filePath);\n            const match = sessionFiles.find((f)=>path__WEBPACK_IMPORTED_MODULE_6__.basename(f) === base);\n            if (match && fs.existsSync(match)) {\n                allFiles[filePath] = fs.readFileSync(match, \"utf-8\");\n                continue;\n            }\n            // Candidate 3: attempt a recursive scan under project folder for a matching basename (best-effort)\n            let found = null;\n            try {\n                const walk = (dir)=>{\n                    const entries = fs.readdirSync(dir, {\n                        withFileTypes: true\n                    });\n                    for (const ent of entries){\n                        const p = path__WEBPACK_IMPORTED_MODULE_6__.join(dir, ent.name);\n                        if (ent.isDirectory()) {\n                            walk(p);\n                            if (found) return;\n                        } else if (ent.isFile() && path__WEBPACK_IMPORTED_MODULE_6__.basename(p) === base) {\n                            found = p;\n                            return;\n                        }\n                    }\n                };\n                if (fs.existsSync(projectFolder)) walk(projectFolder);\n            } catch (err) {\n            // ignore scanning errors\n            }\n            if (found && fs.existsSync(found)) {\n                allFiles[filePath] = fs.readFileSync(found, \"utf-8\");\n                continue;\n            }\n            // If none of the above succeeded, leave the content as-is and warn\n            console.warn(`Could not locate file ${filePath} under project folder; using in-memory content if available.`);\n        } catch (error) {\n            console.warn(`Could not read file ${filePath} for review:`, error);\n        }\n    }\n    const systemPrompt = `You are a senior code reviewer. Review the generated code for quality, completeness, and correctness.\n\nEVALUATION CRITERIA:\n- Code quality and best practices\n- Proper imports and dependencies\n- Error handling and edge cases\n- TypeScript types (if applicable)\n- Code organization and readability\n- Completeness of implementation\n- Integration with existing codebase\n\nOUTPUT FORMAT:\nAPPROVED or NEEDS IMPROVEMENT\n\nIf NEEDS IMPROVEMENT, provide specific, actionable feedback.\nIf APPROVED, confirm the implementation is complete and ready.\n\nBe constructive and specific in your feedback.`;\n    const codeSummary = Object.entries(allFiles).map(([file, content])=>`=== ${file} ===\\n${content.substring(0, 500)}${content.length > 500 ? \"\\n... (truncated)\" : \"\"}`).join(\"\\n\\n\");\n    const messages = [\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessage(systemPrompt),\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(`Review the following generated code:\\n\\n${codeSummary}`)\n    ];\n    // Use model-specific LLM if provided, otherwise use global llm\n    const llmToUse = model ? (0,_model_providers__WEBPACK_IMPORTED_MODULE_4__.createLLM)(model) : _model_providers__WEBPACK_IMPORTED_MODULE_4__.llm;\n    const response = await llmToUse.invoke(messages);\n    const feedback = response.content.toString().trim();\n    const isApproved = feedback.toUpperCase().includes(\"APPROVED\") && !feedback.toLowerCase().includes(\"missing\") && !feedback.toLowerCase().includes(\"not implemented\");\n    console.log(`🔍 Review result: ${isApproved ? \"APPROVED\" : \"NEEDS IMPROVEMENT\"}`);\n    console.log(`📝 Feedback: ${feedback.substring(0, 100)}...`);\n    // Add to memory\n    await memory.addMessage(\"assistant\", `Review: ${feedback.substring(0, 200)}...`);\n    // Emit review results\n    emitEvent(sessionId || \"\", {\n        type: \"review\",\n        feedback: feedback\n    });\n    if (isApproved) {\n        emitEvent(sessionId || \"\", {\n            type: \"complete\",\n            message: \"Code generation completed successfully!\"\n        });\n    }\n    return {\n        reviewFeedback: feedback,\n        isComplete: isApproved,\n        reviewIterations: (state.reviewIterations || 0) + 1\n    };\n}\n// Streaming Fixer Agent: Addresses review feedback by fixing issues\nasync function streamingFixerAgent(state, sessionId, model) {\n    emitEvent(sessionId || \"\", {\n        type: \"status\",\n        message: \"Fixing issues based on review...\"\n    });\n    const memory = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.getMemory)();\n    const contextSummary = await memory.getCompressedContext(state.userRequest);\n    const systemPrompt = `You are an expert software engineer. Fix the issues identified in the review feedback.\n\nINSTRUCTIONS:\n- Address each point in the review feedback\n- Make targeted fixes using the available tools\n- Test your changes by reading files back\n- Ensure the fixes are complete and correct\n- Maintain code quality and consistency\n\n${contextSummary ? `CONTEXT:\\n${(0,_utils_summarizer__WEBPACK_IMPORTED_MODULE_2__.smartTruncate)(contextSummary, 400)}\\n\\n` : \"\"}\n\nUse the same tools as before to implement fixes.`;\n    const messages = [\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessage(systemPrompt),\n        new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(`Review feedback to address: ${state.reviewFeedback}\n\nCurrent files: ${Object.keys(state.generatedFiles).join(\", \")}\n\nPlease fix the identified issues.`)\n    ];\n    // Use model-specific LLM if provided, otherwise use global llmWithTools\n    const llmToUse = model ? (0,_model_providers__WEBPACK_IMPORTED_MODULE_4__.createLLM)(model) : _model_providers__WEBPACK_IMPORTED_MODULE_4__.llm;\n    const llmWithToolsToUse = model ? llmToUse.bindTools(_tools__WEBPACK_IMPORTED_MODULE_5__.tools) : llmWithTools;\n    const response = await llmWithToolsToUse.invoke(messages);\n    // Extract fixed files from tool calls or response content\n    const generatedFiles = {};\n    if (response.tool_calls && response.tool_calls.length > 0) {\n        for (const toolCall of response.tool_calls){\n            console.log(`🔧 Tool called: ${toolCall.name}`, toolCall.args);\n            if (toolCall.name === \"write_file\" || toolCall.name === \"append_to_file\") {\n                try {\n                    const args = toolCall.args;\n                    if (args.filePath && args.content) {\n                        generatedFiles[args.filePath] = args.content;\n                    }\n                } catch (error) {\n                    console.warn(\"Could not parse tool call arguments:\", error);\n                }\n            }\n        }\n    } else {\n        // Fallback: parse files from response content\n        const fixedFiles = parseGeneratedFiles(response.content.toString());\n        Object.assign(generatedFiles, fixedFiles);\n    }\n    // Add to memory\n    await memory.addMessage(\"assistant\", `Fixed issues based on review feedback. Updated ${Object.keys(generatedFiles).length} files.`);\n    // Emit fixes\n    if (Object.keys(generatedFiles).length > 0) {\n        const files = Object.keys(generatedFiles);\n        console.log(`🔧 Real-time Fixes Applied: ${files.join(\", \")}`);\n        emitEvent(sessionId || \"\", {\n            type: \"files_fixed\",\n            files: files\n        });\n    }\n    return {\n        generatedFiles,\n        currentIteration: 0,\n        messages: [\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(`Applied fixes for review feedback. ${Object.keys(generatedFiles).length} files updated.`)\n        ]\n    };\n}\n// Helper function to determine if we should continue the workflow\nfunction shouldContinue(state) {\n    // If marked complete, we're done\n    if (state.isComplete) {\n        return \"end\";\n    }\n    // Start with planning if no plan exists\n    if (state.plan.length === 0) {\n        return \"planner\";\n    }\n    // If we haven't finished all steps, continue generating\n    if (state.currentIteration < state.plan.length) {\n        return \"generator\";\n    }\n    // All steps completed, need review\n    if (!state.reviewFeedback) {\n        return \"reviewer\";\n    }\n    // Review feedback exists - check if approved\n    const feedback = state.reviewFeedback.toUpperCase();\n    const isApproved = feedback.includes(\"APPROVED\") && !feedback.toLowerCase().includes(\"missing\") && !feedback.toLowerCase().includes(\"not implemented\");\n    if (isApproved) {\n        // Approved - we're done!\n        return \"end\";\n    }\n    // Not approved - check if we can retry\n    const reviewIter = state.reviewIterations || 0;\n    if (reviewIter >= 3) {\n        // Max iterations reached, force end\n        console.log(\"⚠️  Max review iterations reached in router, ending\");\n        return \"end\";\n    }\n    // Not approved and can retry - go back to executor to fix issues\n    console.log(`🔄 Review not approved (iteration ${reviewIter}), retrying executor to fix issues`);\n    // Reset current iteration to re-execute all steps with feedback\n    return \"fix_issues\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/streaming-agents.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/tools.ts":
/*!*****************************!*\
  !*** ./lib/agents/tools.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendToFileTool: () => (/* binding */ appendToFileTool),\n/* harmony export */   copyFileTool: () => (/* binding */ copyFileTool),\n/* harmony export */   createDirectoryTool: () => (/* binding */ createDirectoryTool),\n/* harmony export */   deleteFileTool: () => (/* binding */ deleteFileTool),\n/* harmony export */   deleteLinesTool: () => (/* binding */ deleteLinesTool),\n/* harmony export */   executeCommandTool: () => (/* binding */ executeCommandTool),\n/* harmony export */   getFileInfoTool: () => (/* binding */ getFileInfoTool),\n/* harmony export */   getProjectStructureTool: () => (/* binding */ getProjectStructureTool),\n/* harmony export */   insertAtLineTool: () => (/* binding */ insertAtLineTool),\n/* harmony export */   listDirectoryTool: () => (/* binding */ listDirectoryTool),\n/* harmony export */   moveFileTool: () => (/* binding */ moveFileTool),\n/* harmony export */   readFileTool: () => (/* binding */ readFileTool),\n/* harmony export */   readLinesTool: () => (/* binding */ readLinesTool),\n/* harmony export */   replaceBlockTool: () => (/* binding */ replaceBlockTool),\n/* harmony export */   replaceInFileTool: () => (/* binding */ replaceInFileTool),\n/* harmony export */   replaceLineRangeTool: () => (/* binding */ replaceLineRangeTool),\n/* harmony export */   searchFilesTool: () => (/* binding */ searchFilesTool),\n/* harmony export */   tools: () => (/* binding */ tools),\n/* harmony export */   wrapToolWithLogging: () => (/* binding */ wrapToolWithLogging),\n/* harmony export */   writeFileTool: () => (/* binding */ writeFileTool)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/tools */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/tools/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_fileops__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/fileops */ \"(rsc)/./lib/utils/fileops.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(rsc)/./lib/agents/utils.ts\");\n/* harmony import */ var _utils_tool_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/tool-logger */ \"(rsc)/./lib/utils/tool-logger.ts\");\n\n\n\n\n\n\n\n// File operation tools\nconst readFileTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath })=>{\n    // Resolve path relative to project folder\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`📖 Reading file: ${fullPath}`);\n    const result = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.readFile)(fullPath);\n    if (result.success) {\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"read\", fullPath);\n        return `File content:\\n${result.content}`;\n    } else {\n        return `Error reading file: ${result.error}`;\n    }\n}, {\n    name: \"read_file\",\n    description: \"Read the contents of a file. Use this to examine existing code or documents.\",\n    schema: _utils_fileops__WEBPACK_IMPORTED_MODULE_3__.FileReadSchema\n});\nconst writeFileTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath, content })=>{\n    // Resolve path relative to project folder\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`📝 Writing file: ${fullPath}`);\n    const result = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.writeFile)(fullPath, content);\n    if (result.success) {\n        const exists = fs__WEBPACK_IMPORTED_MODULE_1__.existsSync(fullPath);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(exists ? \"modified\" : \"created\", fullPath);\n        return `File written successfully: ${fullPath}`;\n    } else {\n        return `Error writing file: ${result.error}`;\n    }\n}, {\n    name: \"write_file\",\n    description: \"Create or overwrite a file with content. Use this to create new files or completely replace existing ones.\",\n    schema: _utils_fileops__WEBPACK_IMPORTED_MODULE_3__.FileWriteSchema\n});\nconst appendToFileTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath, content })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`📎 Appending to file: ${fullPath}`);\n    const result = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.appendToFile)(fullPath, content);\n    if (result.success) {\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"modified\", fullPath);\n        return `Content appended successfully to: ${fullPath}`;\n    } else {\n        return `Error appending to file: ${result.error}`;\n    }\n}, {\n    name: \"append_to_file\",\n    description: \"Append content to the end of an existing file. Use this to add to existing files.\",\n    schema: _utils_fileops__WEBPACK_IMPORTED_MODULE_3__.FileAppendSchema\n});\nconst deleteFileTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`🗑️ Deleting file: ${fullPath}`);\n    const result = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.deleteFile)(fullPath);\n    if (result.success) {\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"deleted\", fullPath);\n        return `File deleted successfully: ${fullPath}`;\n    } else {\n        return `Error deleting file: ${result.error}`;\n    }\n}, {\n    name: \"delete_file\",\n    description: \"Delete a file. Only works on files in the generated directory for security.\",\n    schema: _utils_fileops__WEBPACK_IMPORTED_MODULE_3__.FileDeleteSchema\n});\nconst listDirectoryTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ dirPath })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(dirPath) ? dirPath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, dirPath);\n    console.log(`📂 Listing directory: ${fullPath}`);\n    const result = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.listDirectory)(fullPath);\n    if (result.success && result.files) {\n        return `Directory contents:\\n${result.files.join(\"\\n\")}`;\n    } else {\n        return `Error listing directory: ${result.error}`;\n    }\n}, {\n    name: \"list_directory\",\n    description: \"List the contents of a directory. Use this to see what files are available.\",\n    schema: _utils_fileops__WEBPACK_IMPORTED_MODULE_3__.DirectoryListSchema\n});\nconst searchFilesTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ dirPath, pattern })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(dirPath) ? dirPath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, dirPath);\n    console.log(`🔍 Searching files in ${fullPath} for pattern: ${pattern}`);\n    const result = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.searchFiles)(fullPath, pattern);\n    if (result.success && result.matches) {\n        const matchesText = result.matches.slice(0, 20) // Limit to first 20 matches\n        .map((match)=>`${match.file}:${match.line} - ${match.content}`).join(\"\\n\");\n        return `${result.matches.length} matches found:\\n${matchesText}${result.matches.length > 20 ? \"\\n... (showing first 20)\" : \"\"}`;\n    } else {\n        return `Error searching files: ${result.error}`;\n    }\n}, {\n    name: \"search_files\",\n    description: \"Search for files containing a regex pattern. Use this to find specific code patterns or text.\",\n    schema: _utils_fileops__WEBPACK_IMPORTED_MODULE_3__.FileSearchSchema\n});\n// Advanced code editing tools\nconst replaceInFileTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath, searchText, replaceText })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`✏️ Replacing text in file: ${fullPath}`);\n    try {\n        const readResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.readFile)(fullPath);\n        if (!readResult.success || !readResult.content) {\n            return `Error: Could not read file ${fullPath}`;\n        }\n        const originalContent = readResult.content;\n        const newContent = originalContent.replace(new RegExp(searchText, \"g\"), replaceText);\n        const replacementCount = (originalContent.match(new RegExp(searchText, \"g\")) || []).length;\n        if (replacementCount === 0) {\n            return `No matches found for \"${searchText}\" in ${fullPath}`;\n        }\n        const writeResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.writeFile)(fullPath, newContent);\n        if (writeResult.success) {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"modified\", fullPath);\n            return `Replaced ${replacementCount} occurrence(s) of \"${searchText}\" with \"${replaceText}\" in ${fullPath}`;\n        } else {\n            return `Error writing file: ${writeResult.error}`;\n        }\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}, {\n    name: \"replace_in_file\",\n    description: \"Find and replace text in a file using regex. Use this for refactoring or fixing code patterns.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        filePath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Path to the file\"),\n        searchText: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Text or regex pattern to search for\"),\n        replaceText: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Text to replace with\")\n    })\n});\nconst insertAtLineTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath, lineNumber, content })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`📍 Inserting at line ${lineNumber} in: ${fullPath}`);\n    try {\n        const readResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.readFile)(fullPath);\n        if (!readResult.success || !readResult.content) {\n            return `Error: Could not read file ${fullPath}`;\n        }\n        const lines = readResult.content.split(\"\\n\");\n        if (lineNumber < 1 || lineNumber > lines.length + 1) {\n            return `Error: Line number ${lineNumber} is out of range (file has ${lines.length} lines)`;\n        }\n        lines.splice(lineNumber - 1, 0, content);\n        const newContent = lines.join(\"\\n\");\n        const writeResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.writeFile)(fullPath, newContent);\n        if (writeResult.success) {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"modified\", fullPath);\n            return `Inserted content at line ${lineNumber} in ${fullPath}`;\n        } else {\n            return `Error writing file: ${writeResult.error}`;\n        }\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}, {\n    name: \"insert_at_line\",\n    description: \"Insert content at a specific line number in a file. Use this for precise code additions.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        filePath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Path to the file\"),\n        lineNumber: zod__WEBPACK_IMPORTED_MODULE_6__.number().describe(\"Line number where content should be inserted (1-based)\"),\n        content: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Content to insert\")\n    })\n});\nconst deleteLinesTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath, startLine, endLine })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`✂️ Deleting lines ${startLine}-${endLine} in: ${fullPath}`);\n    try {\n        const readResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.readFile)(fullPath);\n        if (!readResult.success || !readResult.content) {\n            return `Error: Could not read file ${fullPath}`;\n        }\n        const lines = readResult.content.split(\"\\n\");\n        if (startLine < 1 || endLine > lines.length || startLine > endLine) {\n            return `Error: Invalid line range ${startLine}-${endLine} (file has ${lines.length} lines)`;\n        }\n        lines.splice(startLine - 1, endLine - startLine + 1);\n        const newContent = lines.join(\"\\n\");\n        const writeResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.writeFile)(fullPath, newContent);\n        if (writeResult.success) {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"modified\", fullPath);\n            return `Deleted lines ${startLine}-${endLine} in ${fullPath}`;\n        } else {\n            return `Error writing file: ${writeResult.error}`;\n        }\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}, {\n    name: \"delete_lines\",\n    description: \"Delete a range of lines from a file. Use this to remove code blocks.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        filePath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Path to the file\"),\n        startLine: zod__WEBPACK_IMPORTED_MODULE_6__.number().describe(\"Starting line number (1-based, inclusive)\"),\n        endLine: zod__WEBPACK_IMPORTED_MODULE_6__.number().describe(\"Ending line number (1-based, inclusive)\")\n    })\n});\nconst replaceBlockTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath, startMarker, endMarker, newContent })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`🔄 Replacing block in: ${fullPath}`);\n    console.log(`   Start marker: ${startMarker}`);\n    console.log(`   End marker: ${endMarker}`);\n    try {\n        const readResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.readFile)(fullPath);\n        if (!readResult.success || !readResult.content) {\n            return `Error: Could not read file ${fullPath}`;\n        }\n        const content = readResult.content;\n        // Find start and end positions\n        const startIdx = content.indexOf(startMarker);\n        if (startIdx === -1) {\n            return `Error: Start marker \"${startMarker}\" not found in ${fullPath}`;\n        }\n        const endIdx = content.indexOf(endMarker, startIdx + startMarker.length);\n        if (endIdx === -1) {\n            return `Error: End marker \"${endMarker}\" not found after start marker in ${fullPath}`;\n        }\n        // Replace the block (including markers)\n        const before = content.substring(0, startIdx);\n        const after = content.substring(endIdx + endMarker.length);\n        const newFileContent = before + startMarker + \"\\n\" + newContent + \"\\n\" + endMarker + after;\n        const writeResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.writeFile)(fullPath, newFileContent);\n        if (writeResult.success) {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"modified\", fullPath);\n            const oldBlock = content.substring(startIdx, endIdx + endMarker.length);\n            return `Successfully replaced block in ${fullPath}\\nOld block (${oldBlock.split(\"\\n\").length} lines) → New block (${newContent.split(\"\\n\").length} lines)`;\n        } else {\n            return `Error writing file: ${writeResult.error}`;\n        }\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}, {\n    name: \"replace_block\",\n    description: \"Replace a block of code between two markers. More efficient than rewriting entire file. Perfect for updating functions, classes, or sections.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        filePath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Path to the file\"),\n        startMarker: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe('Unique text that marks the start of the block (e.g., \"function myFunc(\" or \"// START SECTION\")'),\n        endMarker: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe('Unique text that marks the end of the block (e.g., \"}\" or \"// END SECTION\")'),\n        newContent: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"New content to replace the block between markers (markers will be preserved)\")\n    })\n});\nconst replaceLineRangeTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath, startLine, endLine, newContent })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`📝 Replacing lines ${startLine}-${endLine} in: ${fullPath}`);\n    try {\n        const readResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.readFile)(fullPath);\n        if (!readResult.success || !readResult.content) {\n            return `Error: Could not read file ${fullPath}`;\n        }\n        const lines = readResult.content.split(\"\\n\");\n        if (startLine < 1 || endLine > lines.length || startLine > endLine) {\n            return `Error: Invalid line range ${startLine}-${endLine} (file has ${lines.length} lines)`;\n        }\n        // Replace the line range\n        const before = lines.slice(0, startLine - 1);\n        const after = lines.slice(endLine);\n        const newLines = newContent.split(\"\\n\");\n        const newFileLines = [\n            ...before,\n            ...newLines,\n            ...after\n        ];\n        const writeResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.writeFile)(fullPath, newFileLines.join(\"\\n\"));\n        if (writeResult.success) {\n            (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"modified\", fullPath);\n            const oldLineCount = endLine - startLine + 1;\n            const newLineCount = newLines.length;\n            return `Replaced lines ${startLine}-${endLine} (${oldLineCount} lines) with new content (${newLineCount} lines) in ${fullPath}`;\n        } else {\n            return `Error writing file: ${writeResult.error}`;\n        }\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}, {\n    name: \"replace_line_range\",\n    description: \"Replace a specific range of lines with new content. More precise than replace_block. Use when you know exact line numbers.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        filePath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Path to the file\"),\n        startLine: zod__WEBPACK_IMPORTED_MODULE_6__.number().describe(\"Starting line number (1-based, inclusive)\"),\n        endLine: zod__WEBPACK_IMPORTED_MODULE_6__.number().describe(\"Ending line number (1-based, inclusive)\"),\n        newContent: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"New content to replace the specified lines\")\n    })\n});\nconst getFileInfoTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`ℹ️ Getting file info: ${fullPath}`);\n    try {\n        const stats = fs__WEBPACK_IMPORTED_MODULE_1__.statSync(fullPath);\n        const readResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.readFile)(fullPath);\n        if (!readResult.success || !readResult.content) {\n            return `Error: Could not read file ${fullPath}`;\n        }\n        const lines = readResult.content.split(\"\\n\");\n        const extension = path__WEBPACK_IMPORTED_MODULE_2__.extname(fullPath);\n        return JSON.stringify({\n            path: fullPath,\n            size: stats.size,\n            lines: lines.length,\n            extension,\n            created: stats.birthtime,\n            modified: stats.mtime,\n            isDirectory: stats.isDirectory()\n        }, null, 2);\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}, {\n    name: \"get_file_info\",\n    description: \"Get detailed information about a file (size, lines, dates, etc.). Use this to understand file structure.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        filePath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Path to the file\")\n    })\n});\nconst createDirectoryTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ dirPath })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(dirPath) ? dirPath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, dirPath);\n    console.log(`📁 Creating directory: ${fullPath}`);\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_1__.mkdirSync(fullPath, {\n            recursive: true\n        });\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"created\", fullPath);\n        return `Directory created successfully: ${fullPath}`;\n    } catch (error) {\n        return `Error creating directory: ${error.message}`;\n    }\n}, {\n    name: \"create_directory\",\n    description: \"Create a new directory (including parent directories if needed). Use this to organize project structure.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        dirPath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Path to the directory to create\")\n    })\n});\nconst copyFileTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ sourcePath, destinationPath })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullSourcePath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(sourcePath) ? sourcePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, sourcePath);\n    const fullDestPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(destinationPath) ? destinationPath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, destinationPath);\n    console.log(`📋 Copying file from ${fullSourcePath} to ${fullDestPath}`);\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_1__.copyFileSync(fullSourcePath, fullDestPath);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"created\", fullDestPath);\n        return `File copied successfully from ${fullSourcePath} to ${fullDestPath}`;\n    } catch (error) {\n        return `Error copying file: ${error.message}`;\n    }\n}, {\n    name: \"copy_file\",\n    description: \"Copy a file to a new location. Use this to duplicate files or create templates.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        sourcePath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Source file path\"),\n        destinationPath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Destination file path\")\n    })\n});\nconst moveFileTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ sourcePath, destinationPath })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullSourcePath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(sourcePath) ? sourcePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, sourcePath);\n    const fullDestPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(destinationPath) ? destinationPath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, destinationPath);\n    console.log(`🚚 Moving file from ${fullSourcePath} to ${fullDestPath}`);\n    try {\n        fs__WEBPACK_IMPORTED_MODULE_1__.renameSync(fullSourcePath, fullDestPath);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"deleted\", fullSourcePath);\n        (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getMemory)().addFileOperation(\"created\", fullDestPath);\n        return `File moved successfully from ${fullSourcePath} to ${fullDestPath}`;\n    } catch (error) {\n        return `Error moving file: ${error.message}`;\n    }\n}, {\n    name: \"move_file\",\n    description: \"Move or rename a file. Use this to reorganize project structure.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        sourcePath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Source file path\"),\n        destinationPath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Destination file path\")\n    })\n});\nconst readLinesTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ filePath, startLine, endLine })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.isAbsolute(filePath) ? filePath : path__WEBPACK_IMPORTED_MODULE_2__.join(projectFolder, filePath);\n    console.log(`📖 Reading lines ${startLine}-${endLine} from: ${fullPath}`);\n    try {\n        const readResult = await (0,_utils_fileops__WEBPACK_IMPORTED_MODULE_3__.readFile)(fullPath);\n        if (!readResult.success || !readResult.content) {\n            return `Error: Could not read file ${fullPath}`;\n        }\n        const lines = readResult.content.split(\"\\n\");\n        if (startLine < 1 || endLine > lines.length || startLine > endLine) {\n            return `Error: Invalid line range ${startLine}-${endLine} (file has ${lines.length} lines)`;\n        }\n        const selectedLines = lines.slice(startLine - 1, endLine);\n        return `Lines ${startLine}-${endLine} of ${fullPath}:\\n${selectedLines.join(\"\\n\")}`;\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}, {\n    name: \"read_lines\",\n    description: \"Read a specific range of lines from a file. Use this to examine specific code sections.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        filePath: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Path to the file\"),\n        startLine: zod__WEBPACK_IMPORTED_MODULE_6__.number().describe(\"Starting line number (1-based, inclusive)\"),\n        endLine: zod__WEBPACK_IMPORTED_MODULE_6__.number().describe(\"Ending line number (1-based, inclusive)\")\n    })\n});\nconst getProjectStructureTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ maxDepth })=>{\n    const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n    console.log(`🗂️ Getting project structure from: ${projectFolder}`);\n    try {\n        const structure = [];\n        const traverseDirectory = (dir, depth, prefix = \"\")=>{\n            if (depth > maxDepth) return;\n            const items = fs__WEBPACK_IMPORTED_MODULE_1__.readdirSync(dir);\n            items.forEach((item, index)=>{\n                const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.join(dir, item);\n                const isLast = index === items.length - 1;\n                const connector = isLast ? \"└── \" : \"├── \";\n                const relativePath = path__WEBPACK_IMPORTED_MODULE_2__.relative(projectFolder, fullPath);\n                // Skip node_modules and hidden files\n                if (item === \"node_modules\" || item.startsWith(\".\")) return;\n                structure.push(`${prefix}${connector}${item}`);\n                if (fs__WEBPACK_IMPORTED_MODULE_1__.statSync(fullPath).isDirectory()) {\n                    const newPrefix = prefix + (isLast ? \"    \" : \"│   \");\n                    traverseDirectory(fullPath, depth + 1, newPrefix);\n                }\n            });\n        };\n        traverseDirectory(projectFolder, 0);\n        return `Project structure:\\n${projectFolder}\\n${structure.join(\"\\n\")}`;\n    } catch (error) {\n        return `Error: ${error.message}`;\n    }\n}, {\n    name: \"get_project_structure\",\n    description: \"Get a tree view of the project directory structure. Use this to understand project organization.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        maxDepth: zod__WEBPACK_IMPORTED_MODULE_6__.number().default(3).describe(\"Maximum depth to traverse (default: 3)\")\n    })\n});\nconst executeCommandTool = (0,_langchain_core_tools__WEBPACK_IMPORTED_MODULE_0__.tool)(async ({ command, description })=>{\n    console.log(`⚙️ Executing command: ${command}`);\n    console.log(`📝 Description: ${description}`);\n    try {\n        const { execSync } = __webpack_require__(/*! child_process */ \"child_process\");\n        const projectFolder = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getProjectFolder)();\n        // Execute command in project folder\n        const output = execSync(command, {\n            cwd: projectFolder,\n            encoding: \"utf-8\",\n            maxBuffer: 1024 * 1024 * 10,\n            timeout: 30000\n        });\n        return `Command executed successfully:\\n${output}`;\n    } catch (error) {\n        return `Command failed with error:\\n${error.message}\\n${error.stdout || \"\"}\\n${error.stderr || \"\"}`;\n    }\n}, {\n    name: \"execute_command\",\n    description: \"Execute a shell command in the project directory. Use this for npm install, git operations, building, testing, etc. ALWAYS provide a clear description.\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_6__.object({\n        command: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Shell command to execute\"),\n        description: zod__WEBPACK_IMPORTED_MODULE_6__.string().describe(\"Clear description of what this command does and why\")\n    })\n});\n// Create the tools array with all tools\nconst tools = [\n    // Basic file operations\n    readFileTool,\n    writeFileTool,\n    appendToFileTool,\n    deleteFileTool,\n    listDirectoryTool,\n    searchFilesTool,\n    // Advanced editing tools\n    replaceInFileTool,\n    insertAtLineTool,\n    deleteLinesTool,\n    replaceBlockTool,\n    replaceLineRangeTool,\n    readLinesTool,\n    // File management\n    getFileInfoTool,\n    createDirectoryTool,\n    copyFileTool,\n    moveFileTool,\n    // Project tools\n    getProjectStructureTool,\n    executeCommandTool\n];\n// Helper function to wrap tool execution with logging\nfunction wrapToolWithLogging(toolFn, toolName) {\n    return async (...args)=>{\n        const callId = _utils_tool_logger__WEBPACK_IMPORTED_MODULE_5__.toolLogger.startCall(toolName, args[0] || {});\n        try {\n            const result = await toolFn(...args);\n            _utils_tool_logger__WEBPACK_IMPORTED_MODULE_5__.toolLogger.endCall(callId, result, true);\n            return result;\n        } catch (error) {\n            const errorMsg = error.message || String(error);\n            _utils_tool_logger__WEBPACK_IMPORTED_MODULE_5__.toolLogger.endCall(callId, errorMsg, false, errorMsg);\n            throw error;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/tools.ts\n");

/***/ }),

/***/ "(rsc)/./lib/agents/utils.ts":
/*!*****************************!*\
  !*** ./lib/agents/utils.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMemory: () => (/* binding */ getMemory),\n/* harmony export */   getProjectFolder: () => (/* binding */ getProjectFolder),\n/* harmony export */   setSessionMemory: () => (/* binding */ setSessionMemory),\n/* harmony export */   validateFileContent: () => (/* binding */ validateFileContent)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_memory_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/memory-db */ \"(rsc)/./lib/utils/memory-db.ts\");\n\n\n\n// Global memory instance for current session\nlet currentMemory = null;\nlet currentProjectFolder = null;\nlet sessionToFolderMap = new Map();\nfunction setSessionMemory(sessionId) {\n    // Check if this session already has a project folder\n    if (sessionToFolderMap.has(sessionId)) {\n        currentProjectFolder = sessionToFolderMap.get(sessionId);\n    } else {\n        // Create new project folder for this session\n        currentProjectFolder = path__WEBPACK_IMPORTED_MODULE_1__.join(process.cwd(), \"generated\", sessionId);\n        if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(currentProjectFolder)) {\n            fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync(currentProjectFolder, {\n                recursive: true\n            });\n        }\n        sessionToFolderMap.set(sessionId, currentProjectFolder);\n    }\n    // Create memory with project folder\n    currentMemory = (0,_utils_memory_db__WEBPACK_IMPORTED_MODULE_2__.getSessionMemory)(sessionId, currentProjectFolder);\n}\nfunction getMemory() {\n    if (!currentMemory) {\n        // Fallback to default session if not set\n        const defaultFolder = path__WEBPACK_IMPORTED_MODULE_1__.join(process.cwd(), \"generated\", \"default_project\");\n        currentMemory = (0,_utils_memory_db__WEBPACK_IMPORTED_MODULE_2__.getSessionMemory)(\"default\", defaultFolder);\n    }\n    return currentMemory;\n}\nfunction getProjectFolder() {\n    if (!currentProjectFolder) {\n        // Fallback to default project folder\n        const defaultFolder = path__WEBPACK_IMPORTED_MODULE_1__.join(process.cwd(), \"generated\", \"default_project\");\n        if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(defaultFolder)) {\n            fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync(defaultFolder, {\n                recursive: true\n            });\n        }\n        currentProjectFolder = defaultFolder;\n    }\n    return currentProjectFolder;\n}\n// Helper: Validate file content\nfunction validateFileContent(filename, content) {\n    const trimmed = content.trim();\n    // Check for placeholders\n    if (content.includes(\"...\") || content.toLowerCase().includes(\"todo\") || content.includes(\"placeholder\")) {\n        return {\n            isValid: false,\n            reason: \"Contains placeholders or TODO comments\"\n        };\n    }\n    // Check for empty or very short files\n    if (trimmed.length < 10) {\n        return {\n            isValid: false,\n            reason: \"File is too short or empty\"\n        };\n    }\n    // Check for incomplete code patterns\n    if (filename.endsWith(\".ts\") || filename.endsWith(\".js\")) {\n        if (!trimmed.includes(\"export\") && !trimmed.includes(\"function\") && !trimmed.includes(\"class\") && !trimmed.includes(\"const\") && !trimmed.includes(\"let\")) {\n            return {\n                isValid: false,\n                reason: \"No valid code constructs found\"\n            };\n        }\n    }\n    return {\n        isValid: true,\n        reason: \"Valid content\"\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYWdlbnRzL3V0aWxzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUF5QjtBQUNJO0FBQzZDO0FBRTFFLDZDQUE2QztBQUM3QyxJQUFJRyxnQkFBMkM7QUFDL0MsSUFBSUMsdUJBQXNDO0FBQzFDLElBQUlDLHFCQUFxQixJQUFJQztBQUV0QixTQUFTQyxpQkFBaUJDLFNBQWlCO0lBQ2hELHFEQUFxRDtJQUNyRCxJQUFJSCxtQkFBbUJJLEdBQUcsQ0FBQ0QsWUFBWTtRQUNyQ0osdUJBQXVCQyxtQkFBbUJLLEdBQUcsQ0FBQ0Y7SUFDaEQsT0FBTztRQUNMLDZDQUE2QztRQUM3Q0osdUJBQXVCSCxzQ0FBUyxDQUFDVyxRQUFRQyxHQUFHLElBQUksYUFBYUw7UUFDN0QsSUFBSSxDQUFDUiwwQ0FBYSxDQUFDSSx1QkFBdUI7WUFDeENKLHlDQUFZLENBQUNJLHNCQUFzQjtnQkFBRVksV0FBVztZQUFLO1FBQ3ZEO1FBQ0FYLG1CQUFtQlksR0FBRyxDQUFDVCxXQUFXSjtJQUNwQztJQUVBLG9DQUFvQztJQUNwQ0QsZ0JBQWdCRCxrRUFBZ0JBLENBQUNNLFdBQVdKO0FBQzlDO0FBRU8sU0FBU2M7SUFDZCxJQUFJLENBQUNmLGVBQWU7UUFDbEIseUNBQXlDO1FBQ3pDLE1BQU1nQixnQkFBZ0JsQixzQ0FBUyxDQUFDVyxRQUFRQyxHQUFHLElBQUksYUFBYTtRQUM1RFYsZ0JBQWdCRCxrRUFBZ0JBLENBQUMsV0FBV2lCO0lBQzlDO0lBQ0EsT0FBT2hCO0FBQ1Q7QUFFTyxTQUFTaUI7SUFDZCxJQUFJLENBQUNoQixzQkFBc0I7UUFDekIscUNBQXFDO1FBQ3JDLE1BQU1lLGdCQUFnQmxCLHNDQUFTLENBQUNXLFFBQVFDLEdBQUcsSUFBSSxhQUFhO1FBQzVELElBQUksQ0FBQ2IsMENBQWEsQ0FBQ21CLGdCQUFnQjtZQUNqQ25CLHlDQUFZLENBQUNtQixlQUFlO2dCQUFFSCxXQUFXO1lBQUs7UUFDaEQ7UUFDQVosdUJBQXVCZTtJQUN6QjtJQUNBLE9BQU9mO0FBQ1Q7QUFFQSxnQ0FBZ0M7QUFDekIsU0FBU2lCLG9CQUFvQkMsUUFBZ0IsRUFBRUMsT0FBZTtJQUNuRSxNQUFNQyxVQUFVRCxRQUFRRSxJQUFJO0lBRTVCLHlCQUF5QjtJQUN6QixJQUFJRixRQUFRRyxRQUFRLENBQUMsVUFBVUgsUUFBUUksV0FBVyxHQUFHRCxRQUFRLENBQUMsV0FBV0gsUUFBUUcsUUFBUSxDQUFDLGdCQUFnQjtRQUN4RyxPQUFPO1lBQUVFLFNBQVM7WUFBT0MsUUFBUTtRQUF5QztJQUM1RTtJQUVBLHNDQUFzQztJQUN0QyxJQUFJTCxRQUFRTSxNQUFNLEdBQUcsSUFBSTtRQUN2QixPQUFPO1lBQUVGLFNBQVM7WUFBT0MsUUFBUTtRQUE2QjtJQUNoRTtJQUVBLHFDQUFxQztJQUNyQyxJQUFJUCxTQUFTUyxRQUFRLENBQUMsVUFBVVQsU0FBU1MsUUFBUSxDQUFDLFFBQVE7UUFDeEQsSUFBSSxDQUFDUCxRQUFRRSxRQUFRLENBQUMsYUFBYSxDQUFDRixRQUFRRSxRQUFRLENBQUMsZUFBZSxDQUFDRixRQUFRRSxRQUFRLENBQUMsWUFBWSxDQUFDRixRQUFRRSxRQUFRLENBQUMsWUFBWSxDQUFDRixRQUFRRSxRQUFRLENBQUMsUUFBUTtZQUN4SixPQUFPO2dCQUFFRSxTQUFTO2dCQUFPQyxRQUFRO1lBQWlDO1FBQ3BFO0lBQ0Y7SUFFQSxPQUFPO1FBQUVELFNBQVM7UUFBTUMsUUFBUTtJQUFnQjtBQUNsRCIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5yb3V0ZXItbGFuZ2dyYXBoLy4vbGliL2FnZW50cy91dGlscy50cz8zMGM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBDb252ZXJzYXRpb25NZW1vcnksIGdldFNlc3Npb25NZW1vcnkgfSBmcm9tICcuLi91dGlscy9tZW1vcnktZGInO1xuXG4vLyBHbG9iYWwgbWVtb3J5IGluc3RhbmNlIGZvciBjdXJyZW50IHNlc3Npb25cbmxldCBjdXJyZW50TWVtb3J5OiBDb252ZXJzYXRpb25NZW1vcnkgfCBudWxsID0gbnVsbDtcbmxldCBjdXJyZW50UHJvamVjdEZvbGRlcjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG5sZXQgc2Vzc2lvblRvRm9sZGVyTWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFNlc3Npb25NZW1vcnkoc2Vzc2lvbklkOiBzdHJpbmcpIHtcbiAgLy8gQ2hlY2sgaWYgdGhpcyBzZXNzaW9uIGFscmVhZHkgaGFzIGEgcHJvamVjdCBmb2xkZXJcbiAgaWYgKHNlc3Npb25Ub0ZvbGRlck1hcC5oYXMoc2Vzc2lvbklkKSkge1xuICAgIGN1cnJlbnRQcm9qZWN0Rm9sZGVyID0gc2Vzc2lvblRvRm9sZGVyTWFwLmdldChzZXNzaW9uSWQpITtcbiAgfSBlbHNlIHtcbiAgICAvLyBDcmVhdGUgbmV3IHByb2plY3QgZm9sZGVyIGZvciB0aGlzIHNlc3Npb25cbiAgICBjdXJyZW50UHJvamVjdEZvbGRlciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnZ2VuZXJhdGVkJywgc2Vzc2lvbklkKTtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoY3VycmVudFByb2plY3RGb2xkZXIpKSB7XG4gICAgICBmcy5ta2RpclN5bmMoY3VycmVudFByb2plY3RGb2xkZXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIH1cbiAgICBzZXNzaW9uVG9Gb2xkZXJNYXAuc2V0KHNlc3Npb25JZCwgY3VycmVudFByb2plY3RGb2xkZXIpO1xuICB9XG5cbiAgLy8gQ3JlYXRlIG1lbW9yeSB3aXRoIHByb2plY3QgZm9sZGVyXG4gIGN1cnJlbnRNZW1vcnkgPSBnZXRTZXNzaW9uTWVtb3J5KHNlc3Npb25JZCwgY3VycmVudFByb2plY3RGb2xkZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVtb3J5KCk6IENvbnZlcnNhdGlvbk1lbW9yeSB7XG4gIGlmICghY3VycmVudE1lbW9yeSkge1xuICAgIC8vIEZhbGxiYWNrIHRvIGRlZmF1bHQgc2Vzc2lvbiBpZiBub3Qgc2V0XG4gICAgY29uc3QgZGVmYXVsdEZvbGRlciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnZ2VuZXJhdGVkJywgJ2RlZmF1bHRfcHJvamVjdCcpO1xuICAgIGN1cnJlbnRNZW1vcnkgPSBnZXRTZXNzaW9uTWVtb3J5KCdkZWZhdWx0JywgZGVmYXVsdEZvbGRlcik7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnRNZW1vcnk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9qZWN0Rm9sZGVyKCk6IHN0cmluZyB7XG4gIGlmICghY3VycmVudFByb2plY3RGb2xkZXIpIHtcbiAgICAvLyBGYWxsYmFjayB0byBkZWZhdWx0IHByb2plY3QgZm9sZGVyXG4gICAgY29uc3QgZGVmYXVsdEZvbGRlciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnZ2VuZXJhdGVkJywgJ2RlZmF1bHRfcHJvamVjdCcpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhkZWZhdWx0Rm9sZGVyKSkge1xuICAgICAgZnMubWtkaXJTeW5jKGRlZmF1bHRGb2xkZXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIH1cbiAgICBjdXJyZW50UHJvamVjdEZvbGRlciA9IGRlZmF1bHRGb2xkZXI7XG4gIH1cbiAgcmV0dXJuIGN1cnJlbnRQcm9qZWN0Rm9sZGVyO1xufVxuXG4vLyBIZWxwZXI6IFZhbGlkYXRlIGZpbGUgY29udGVudFxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRmlsZUNvbnRlbnQoZmlsZW5hbWU6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogeyBpc1ZhbGlkOiBib29sZWFuOyByZWFzb246IHN0cmluZyB9IHtcbiAgY29uc3QgdHJpbW1lZCA9IGNvbnRlbnQudHJpbSgpO1xuXG4gIC8vIENoZWNrIGZvciBwbGFjZWhvbGRlcnNcbiAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJy4uLicpIHx8IGNvbnRlbnQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygndG9kbycpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ3BsYWNlaG9sZGVyJykpIHtcbiAgICByZXR1cm4geyBpc1ZhbGlkOiBmYWxzZSwgcmVhc29uOiAnQ29udGFpbnMgcGxhY2Vob2xkZXJzIG9yIFRPRE8gY29tbWVudHMnIH07XG4gIH1cblxuICAvLyBDaGVjayBmb3IgZW1wdHkgb3IgdmVyeSBzaG9ydCBmaWxlc1xuICBpZiAodHJpbW1lZC5sZW5ndGggPCAxMCkge1xuICAgIHJldHVybiB7IGlzVmFsaWQ6IGZhbHNlLCByZWFzb246ICdGaWxlIGlzIHRvbyBzaG9ydCBvciBlbXB0eScgfTtcbiAgfVxuXG4gIC8vIENoZWNrIGZvciBpbmNvbXBsZXRlIGNvZGUgcGF0dGVybnNcbiAgaWYgKGZpbGVuYW1lLmVuZHNXaXRoKCcudHMnKSB8fCBmaWxlbmFtZS5lbmRzV2l0aCgnLmpzJykpIHtcbiAgICBpZiAoIXRyaW1tZWQuaW5jbHVkZXMoJ2V4cG9ydCcpICYmICF0cmltbWVkLmluY2x1ZGVzKCdmdW5jdGlvbicpICYmICF0cmltbWVkLmluY2x1ZGVzKCdjbGFzcycpICYmICF0cmltbWVkLmluY2x1ZGVzKCdjb25zdCcpICYmICF0cmltbWVkLmluY2x1ZGVzKCdsZXQnKSkge1xuICAgICAgcmV0dXJuIHsgaXNWYWxpZDogZmFsc2UsIHJlYXNvbjogJ05vIHZhbGlkIGNvZGUgY29uc3RydWN0cyBmb3VuZCcgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBpc1ZhbGlkOiB0cnVlLCByZWFzb246ICdWYWxpZCBjb250ZW50JyB9O1xufSJdLCJuYW1lcyI6WyJmcyIsInBhdGgiLCJnZXRTZXNzaW9uTWVtb3J5IiwiY3VycmVudE1lbW9yeSIsImN1cnJlbnRQcm9qZWN0Rm9sZGVyIiwic2Vzc2lvblRvRm9sZGVyTWFwIiwiTWFwIiwic2V0U2Vzc2lvbk1lbW9yeSIsInNlc3Npb25JZCIsImhhcyIsImdldCIsImpvaW4iLCJwcm9jZXNzIiwiY3dkIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyIsInJlY3Vyc2l2ZSIsInNldCIsImdldE1lbW9yeSIsImRlZmF1bHRGb2xkZXIiLCJnZXRQcm9qZWN0Rm9sZGVyIiwidmFsaWRhdGVGaWxlQ29udGVudCIsImZpbGVuYW1lIiwiY29udGVudCIsInRyaW1tZWQiLCJ0cmltIiwiaW5jbHVkZXMiLCJ0b0xvd2VyQ2FzZSIsImlzVmFsaWQiLCJyZWFzb24iLCJsZW5ndGgiLCJlbmRzV2l0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/agents/utils.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/database.ts":
/*!****************************!*\
  !*** ./lib/db/database.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addConversation: () => (/* binding */ addConversation),\n/* harmony export */   addProjectFile: () => (/* binding */ addProjectFile),\n/* harmony export */   cleanupOldSessions: () => (/* binding */ cleanupOldSessions),\n/* harmony export */   createProject: () => (/* binding */ createProject),\n/* harmony export */   getConversations: () => (/* binding */ getConversations),\n/* harmony export */   getCurrentProject: () => (/* binding */ getCurrentProject),\n/* harmony export */   getFileOperations: () => (/* binding */ getFileOperations),\n/* harmony export */   getOrCreateSession: () => (/* binding */ getOrCreateSession),\n/* harmony export */   getProjectFiles: () => (/* binding */ getProjectFiles),\n/* harmony export */   getProjectsBySession: () => (/* binding */ getProjectsBySession),\n/* harmony export */   getRecentConversations: () => (/* binding */ getRecentConversations),\n/* harmony export */   getSessionStats: () => (/* binding */ getSessionStats),\n/* harmony export */   trackFileOperation: () => (/* binding */ trackFileOperation),\n/* harmony export */   updateProject: () => (/* binding */ updateProject),\n/* harmony export */   updateSessionFolder: () => (/* binding */ updateSessionFolder)\n/* harmony export */ });\n/* harmony import */ var _prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prisma */ \"(rsc)/./lib/db/prisma.ts\");\n\n/**\n * Session Management\n */ async function getOrCreateSession(sessionId, projectFolder) {\n    let session = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.findUnique({\n        where: {\n            sessionId\n        },\n        include: {\n            conversations: {\n                orderBy: {\n                    timestamp: \"asc\"\n                }\n            },\n            projects: {\n                include: {\n                    files: true\n                },\n                orderBy: {\n                    createdAt: \"desc\"\n                }\n            }\n        }\n    });\n    if (!session) {\n        session = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.create({\n            data: {\n                sessionId,\n                projectFolder\n            },\n            include: {\n                conversations: true,\n                projects: {\n                    include: {\n                        files: true\n                    }\n                }\n            }\n        });\n    }\n    return session;\n}\nasync function updateSessionFolder(sessionId, projectFolder) {\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.update({\n        where: {\n            sessionId\n        },\n        data: {\n            projectFolder\n        }\n    });\n}\n/**\n * Conversation Management\n */ async function addConversation(sessionId, role, content) {\n    const session = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.findUnique({\n        where: {\n            sessionId\n        }\n    });\n    if (!session) {\n        throw new Error(`Session not found: ${sessionId}`);\n    }\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.conversation.create({\n        data: {\n            sessionId: session.id,\n            role,\n            content\n        }\n    });\n}\nasync function getConversations(sessionId) {\n    const session = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.findUnique({\n        where: {\n            sessionId\n        }\n    });\n    if (!session) {\n        return [];\n    }\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.conversation.findMany({\n        where: {\n            sessionId: session.id\n        },\n        orderBy: {\n            timestamp: \"asc\"\n        }\n    });\n}\nasync function getRecentConversations(sessionId, limit = 10) {\n    const session = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.findUnique({\n        where: {\n            sessionId\n        }\n    });\n    if (!session) {\n        return [];\n    }\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.conversation.findMany({\n        where: {\n            sessionId: session.id\n        },\n        orderBy: {\n            timestamp: \"desc\"\n        },\n        take: limit\n    });\n}\n/**\n * Project Management\n */ async function createProject(sessionId, projectFolder, userRequest, plan) {\n    const session = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.findUnique({\n        where: {\n            sessionId\n        }\n    });\n    if (!session) {\n        throw new Error(`Session not found: ${sessionId}`);\n    }\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.project.create({\n        data: {\n            sessionId: session.id,\n            projectFolder,\n            userRequest,\n            plan\n        },\n        include: {\n            files: true\n        }\n    });\n}\nasync function updateProject(projectId, data) {\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.project.update({\n        where: {\n            id: projectId\n        },\n        data\n    });\n}\nasync function getProjectsBySession(sessionId) {\n    const session = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.findUnique({\n        where: {\n            sessionId\n        }\n    });\n    if (!session) {\n        return [];\n    }\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.project.findMany({\n        where: {\n            sessionId: session.id\n        },\n        include: {\n            files: true\n        },\n        orderBy: {\n            createdAt: \"desc\"\n        }\n    });\n}\nasync function getCurrentProject(sessionId) {\n    const projects = await getProjectsBySession(sessionId);\n    return projects[0] || null;\n}\n/**\n * File Management\n */ async function addProjectFile(projectId, filename, content, operation) {\n    // Check if file already exists\n    const existing = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.projectFile.findFirst({\n        where: {\n            projectId,\n            filename\n        }\n    });\n    if (existing) {\n        // Update existing file\n        return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.projectFile.update({\n            where: {\n                id: existing.id\n            },\n            data: {\n                content,\n                operation\n            }\n        });\n    }\n    // Create new file\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.projectFile.create({\n        data: {\n            projectId,\n            filename,\n            content,\n            operation\n        }\n    });\n}\nasync function getProjectFiles(projectId) {\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.projectFile.findMany({\n        where: {\n            projectId\n        },\n        orderBy: {\n            updatedAt: \"desc\"\n        }\n    });\n}\n/**\n * File Operations Tracking\n */ async function trackFileOperation(sessionId, operation, filePath) {\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.fileOperation.create({\n        data: {\n            sessionId,\n            operation,\n            filePath\n        }\n    });\n}\nasync function getFileOperations(sessionId, limit = 50) {\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.fileOperation.findMany({\n        where: {\n            sessionId\n        },\n        orderBy: {\n            timestamp: \"desc\"\n        },\n        take: limit\n    });\n}\n/**\n * Utility Functions\n */ async function getSessionStats(sessionId) {\n    const session = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.findUnique({\n        where: {\n            sessionId\n        },\n        include: {\n            _count: {\n                select: {\n                    conversations: true,\n                    projects: true\n                }\n            }\n        }\n    });\n    if (!session) {\n        return null;\n    }\n    const fileOperations = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.fileOperation.count({\n        where: {\n            sessionId\n        }\n    });\n    return {\n        sessionId: session.sessionId,\n        projectFolder: session.projectFolder,\n        conversationCount: session._count.conversations,\n        projectCount: session._count.projects,\n        fileOperationCount: fileOperations,\n        createdAt: session.createdAt,\n        updatedAt: session.updatedAt\n    };\n}\nasync function cleanupOldSessions(daysOld = 7) {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n    return await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.session.deleteMany({\n        where: {\n            updatedAt: {\n                lt: cutoffDate\n            }\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/database.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db/prisma.ts":
/*!**************************!*\
  !*** ./lib/db/prisma.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log: [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ]\n});\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE4QztBQUU5QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxDQUFDO0lBQy9ESSxLQUFLO1FBQUM7UUFBUztRQUFTO0tBQU87QUFDakMsR0FBRztBQUVILElBQUlDLElBQXlCLEVBQWNKLGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5yb3V0ZXItbGFuZ2dyYXBoLy4vbGliL2RiL3ByaXNtYS50cz8wOTYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcblxuY29uc3QgZ2xvYmFsRm9yUHJpc21hID0gZ2xvYmFsVGhpcyBhcyB1bmtub3duIGFzIHtcbiAgcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KHtcbiAgbG9nOiBbJ3F1ZXJ5JywgJ2Vycm9yJywgJ3dhcm4nXSxcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA9IHByaXNtYTtcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwibG9nIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/db/prisma.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/fileops.ts":
/*!******************************!*\
  !*** ./lib/utils/fileops.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DirectoryListSchema: () => (/* binding */ DirectoryListSchema),\n/* harmony export */   FileAppendSchema: () => (/* binding */ FileAppendSchema),\n/* harmony export */   FileDeleteSchema: () => (/* binding */ FileDeleteSchema),\n/* harmony export */   FileReadSchema: () => (/* binding */ FileReadSchema),\n/* harmony export */   FileSearchSchema: () => (/* binding */ FileSearchSchema),\n/* harmony export */   FileWriteSchema: () => (/* binding */ FileWriteSchema),\n/* harmony export */   appendToFile: () => (/* binding */ appendToFile),\n/* harmony export */   deleteFile: () => (/* binding */ deleteFile),\n/* harmony export */   fileExists: () => (/* binding */ fileExists),\n/* harmony export */   listDirectory: () => (/* binding */ listDirectory),\n/* harmony export */   readFile: () => (/* binding */ readFile),\n/* harmony export */   searchFiles: () => (/* binding */ searchFiles),\n/* harmony export */   writeFile: () => (/* binding */ writeFile)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v3/types.js\");\n\n\n\n// Configuration for safe file operations\nconst SAFE_DIRECTORIES = [\n    \"./generated\",\n    \"./workspace\",\n    \"./temp\"\n];\nconst ALLOWED_EXTENSIONS = [\n    \".ts\",\n    \".tsx\",\n    \".js\",\n    \".jsx\",\n    \".json\",\n    \".css\",\n    \".html\",\n    \".md\",\n    \".txt\",\n    \".yaml\",\n    \".yml\",\n    \".xml\",\n    \".sql\",\n    \".py\",\n    \".rs\",\n    \".go\",\n    \".java\",\n    \".c\",\n    \".cpp\",\n    \"Dockerfile\",\n    \".gitignore\",\n    \".env.example\"\n];\nfunction isPathSafe(filePath) {\n    const normalizedPath = path__WEBPACK_IMPORTED_MODULE_1__.resolve(filePath);\n    const cwd = process.cwd();\n    // Check if path is within allowed directories\n    const allowed = SAFE_DIRECTORIES.some((dir)=>{\n        const resolvedDir = path__WEBPACK_IMPORTED_MODULE_1__.resolve(path__WEBPACK_IMPORTED_MODULE_1__.join(cwd, dir));\n        return normalizedPath.startsWith(resolvedDir);\n    });\n    // Check file extension\n    const ext = path__WEBPACK_IMPORTED_MODULE_1__.extname(filePath);\n    const extAllowed = ALLOWED_EXTENSIONS.includes(ext) || ext === \"\" || filePath.includes(\"Dockerfile\");\n    return allowed && extAllowed && !filePath.includes(\"..\");\n}\n// File read operation\nasync function readFile(filePath) {\n    try {\n        if (!isPathSafe(filePath)) {\n            return {\n                success: false,\n                error: \"Path not allowed for security reasons\"\n            };\n        }\n        if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(filePath)) {\n            return {\n                success: false,\n                error: \"File does not exist\"\n            };\n        }\n        const content = fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(filePath, \"utf-8\");\n        return {\n            success: true,\n            content\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error reading file\"\n        };\n    }\n}\n// File write operation\nasync function writeFile(filePath, content) {\n    try {\n        if (!isPathSafe(filePath)) {\n            return {\n                success: false,\n                error: \"Path not allowed for security reasons\"\n            };\n        }\n        // Ensure directory exists\n        const dir = path__WEBPACK_IMPORTED_MODULE_1__.dirname(filePath);\n        if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(dir)) {\n            fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync(dir, {\n                recursive: true\n            });\n        }\n        fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync(filePath, content, \"utf-8\");\n        return {\n            success: true\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error writing file\"\n        };\n    }\n}\n// File modification (append)\nasync function appendToFile(filePath, content) {\n    try {\n        if (!isPathSafe(filePath)) {\n            return {\n                success: false,\n                error: \"Path not allowed for security reasons\"\n            };\n        }\n        fs__WEBPACK_IMPORTED_MODULE_0__.appendFileSync(filePath, content, \"utf-8\");\n        return {\n            success: true\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error appending to file\"\n        };\n    }\n}\n// File deletion\nasync function deleteFile(filePath) {\n    try {\n        if (!isPathSafe(filePath)) {\n            return {\n                success: false,\n                error: \"Path not allowed for security reasons\"\n            };\n        }\n        if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(filePath)) {\n            return {\n                success: false,\n                error: \"File does not exist\"\n            };\n        }\n        // Only allow deletion of generated files\n        const isInGenerated = filePath.startsWith(path__WEBPACK_IMPORTED_MODULE_1__.resolve(\"./generated\"));\n        if (!isInGenerated) {\n            return {\n                success: false,\n                error: \"Deletion only allowed for generated files\"\n            };\n        }\n        fs__WEBPACK_IMPORTED_MODULE_0__.unlinkSync(filePath);\n        return {\n            success: true\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error deleting file\"\n        };\n    }\n}\n// List directory\nasync function listDirectory(dirPath) {\n    try {\n        if (!isPathSafe(dirPath) && !SAFE_DIRECTORIES.some((dir)=>dirPath.includes(dir))) {\n            return {\n                success: false,\n                error: \"Path not allowed for security reasons\"\n            };\n        }\n        if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(dirPath)) {\n            return {\n                success: false,\n                error: \"Directory does not exist\"\n            };\n        }\n        const files = fs__WEBPACK_IMPORTED_MODULE_0__.readdirSync(dirPath);\n        return {\n            success: true,\n            files\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error listing directory\"\n        };\n    }\n}\n// Check if file exists\nasync function fileExists(filePath) {\n    try {\n        return fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(filePath);\n    } catch  {\n        return false;\n    }\n}\n// Helper function for recursive directory search\nfunction searchDirectory(currentPath, pattern, matches) {\n    try {\n        const items = fs__WEBPACK_IMPORTED_MODULE_0__.readdirSync(currentPath);\n        for (const item of items){\n            const fullPath = path__WEBPACK_IMPORTED_MODULE_1__.join(currentPath, item);\n            const stat = fs__WEBPACK_IMPORTED_MODULE_0__.statSync(fullPath);\n            if (stat.isDirectory()) {\n                // Skip node_modules and .git\n                if (item !== \"node_modules\" && item !== \".git\" && item !== \".next\") {\n                    searchDirectory(fullPath, pattern, matches);\n                }\n            } else if (stat.isFile()) {\n                // Check if file extension is allowed\n                const ext = path__WEBPACK_IMPORTED_MODULE_1__.extname(item);\n                if (ALLOWED_EXTENSIONS.includes(ext) || ext === \"\" || item.includes(\"Dockerfile\")) {\n                    try {\n                        const content = fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(fullPath, \"utf-8\");\n                        const lines = content.split(\"\\n\");\n                        lines.forEach((line, index)=>{\n                            if (new RegExp(pattern, \"i\").test(line)) {\n                                matches.push({\n                                    file: fullPath,\n                                    content: line.trim(),\n                                    line: index + 1\n                                });\n                            }\n                        });\n                    } catch (error) {\n                        continue;\n                    }\n                }\n            }\n        }\n    } catch (error) {\n        // Skip directories we can't read\n        return;\n    }\n}\n// Regex file search operation\nasync function searchFiles(dirPath, pattern) {\n    try {\n        if (!isPathSafe(dirPath) && !SAFE_DIRECTORIES.some((dir)=>dirPath.includes(dir))) {\n            return {\n                success: false,\n                error: \"Path not allowed for security reasons\"\n            };\n        }\n        // Ensure base directory exists\n        if (!fs__WEBPACK_IMPORTED_MODULE_0__.existsSync(dirPath)) {\n            return {\n                success: false,\n                error: \"Directory does not exist\"\n            };\n        }\n        const matches = [];\n        searchDirectory(dirPath, pattern, matches);\n        return {\n            success: true,\n            matches\n        };\n    } catch (error) {\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error during file search\"\n        };\n    }\n}\n// Schema definitions for tool calls\nconst FileReadSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    filePath: zod__WEBPACK_IMPORTED_MODULE_2__.string().describe(\"Path to the file to read\")\n});\nconst FileWriteSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    filePath: zod__WEBPACK_IMPORTED_MODULE_2__.string().describe(\"Path where to create/modify the file\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_2__.string().describe(\"Content to write to the file\")\n});\nconst FileAppendSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    filePath: zod__WEBPACK_IMPORTED_MODULE_2__.string().describe(\"Path to the file to append to\"),\n    content: zod__WEBPACK_IMPORTED_MODULE_2__.string().describe(\"Content to append to the file\")\n});\nconst FileDeleteSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    filePath: zod__WEBPACK_IMPORTED_MODULE_2__.string().describe(\"Path to the file to delete\")\n});\nconst DirectoryListSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    dirPath: zod__WEBPACK_IMPORTED_MODULE_2__.string().describe(\"Path to the directory to list\")\n});\nconst FileSearchSchema = zod__WEBPACK_IMPORTED_MODULE_2__.object({\n    dirPath: zod__WEBPACK_IMPORTED_MODULE_2__.string().describe(\"Directory to search in\"),\n    pattern: zod__WEBPACK_IMPORTED_MODULE_2__.string().describe(\"Regex pattern to search for (JavaScript regex syntax)\")\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/fileops.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/memory-db.ts":
/*!********************************!*\
  !*** ./lib/utils/memory-db.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversationMemory: () => (/* binding */ ConversationMemory),\n/* harmony export */   getSessionMemory: () => (/* binding */ getSessionMemory),\n/* harmony export */   setupSessionCleanup: () => (/* binding */ setupSessionCleanup)\n/* harmony export */ });\n/* harmony import */ var _db_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../db/database */ \"(rsc)/./lib/db/database.ts\");\n/* harmony import */ var _summarizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./summarizer */ \"(rsc)/./lib/utils/summarizer.ts\");\n\n\n// Configuration\nconst MAX_MESSAGES_BEFORE_SUMMARIZATION = 20;\nconst SUMMARIZATION_INTERVAL_MINUTES = 30;\n// In-memory cache for summarized history to avoid repeated DB queries\nconst summarizationCache = new Map();\nclass ConversationMemory {\n    constructor(sessionId, projectFolder){\n        this.sessionId = sessionId;\n        this.projectFolder = projectFolder;\n        this.initSession();\n    }\n    async initSession() {\n        await (0,_db_database__WEBPACK_IMPORTED_MODULE_0__.getOrCreateSession)(this.sessionId, this.projectFolder);\n    }\n    // Add a message to memory (now persisted to database)\n    async addMessage(role, content) {\n        const message = await (0,_db_database__WEBPACK_IMPORTED_MODULE_0__.addConversation)(this.sessionId, role, content);\n        // Check if we need to summarize\n        await this.checkAndSummarize();\n        return {\n            id: message.id,\n            role: message.role,\n            content: message.content,\n            timestamp: message.timestamp\n        };\n    }\n    // Add a file operation to memory (now persisted)\n    async addFileOperation(type, filename) {\n        const operation = await (0,_db_database__WEBPACK_IMPORTED_MODULE_0__.trackFileOperation)(this.sessionId, type, filename);\n        return {\n            type: operation.operation,\n            filename: operation.filePath,\n            timestamp: operation.timestamp,\n            sessionId: operation.sessionId\n        };\n    }\n    // Get conversation history from database\n    async getMessages(limit) {\n        const conversations = limit ? await (0,_db_database__WEBPACK_IMPORTED_MODULE_0__.getRecentConversations)(this.sessionId, limit) : await (0,_db_database__WEBPACK_IMPORTED_MODULE_0__.getConversations)(this.sessionId);\n        return conversations.map((c)=>({\n                id: c.id,\n                role: c.role,\n                content: c.content,\n                timestamp: c.timestamp\n            }));\n    }\n    // Get recent file operations from database\n    async getRecentFileOperations(limit = 10) {\n        const operations = await (0,_db_database__WEBPACK_IMPORTED_MODULE_0__.getFileOperations)(this.sessionId, limit);\n        return operations.map((op)=>({\n                type: op.operation,\n                filename: op.filePath,\n                timestamp: op.timestamp,\n                sessionId: op.sessionId\n            }));\n    }\n    // Get all file operations related to a specific file\n    async getSessionFiles() {\n        const operations = await (0,_db_database__WEBPACK_IMPORTED_MODULE_0__.getFileOperations)(this.sessionId, 1000);\n        const fileSet = new Set();\n        operations.forEach((op)=>{\n            if (op.operation !== \"deleted\") {\n                fileSet.add(op.filePath);\n            } else {\n                fileSet.delete(op.filePath);\n            }\n        });\n        return Array.from(fileSet);\n    }\n    // Search messages by content\n    async searchMessages(query) {\n        const messages = await this.getMessages();\n        const lowerQuery = query.toLowerCase();\n        return messages.filter((msg)=>msg.content.toLowerCase().includes(lowerQuery));\n    }\n    // Get a context summary for the agent\n    async getContextSummary() {\n        const messages = await this.getMessages();\n        if (messages.length === 0) {\n            return null;\n        }\n        // Check cache first\n        const cached = summarizationCache.get(this.sessionId);\n        if (cached && messages.length < MAX_MESSAGES_BEFORE_SUMMARIZATION) {\n            const age = Date.now() - cached.timestamp.getTime();\n            if (age < SUMMARIZATION_INTERVAL_MINUTES * 60 * 1000) {\n                return cached.summary;\n            }\n        }\n        const recentMessages = messages.slice(-10);\n        const conversationText = recentMessages.map((m)=>`${m.role}: ${m.content}`).join(\"\\n\");\n        const files = await this.getSessionFiles();\n        const filesList = files.length > 0 ? `\\nFiles in project: ${files.join(\", \")}` : \"\";\n        return `Previous conversation context:\\n${conversationText}${filesList}`;\n    }\n    // Get compressed context for token efficiency\n    async getCompressedContext(userRequest = \"\") {\n        const messages = await this.getMessages();\n        if (messages.length === 0) {\n            return null;\n        }\n        // Use cached summary if available and recent\n        const cached = summarizationCache.get(this.sessionId);\n        if (cached) {\n            const age = Date.now() - cached.timestamp.getTime();\n            if (age < SUMMARIZATION_INTERVAL_MINUTES * 60 * 1000) {\n                return cached.summary;\n            }\n        }\n        // Generate new summary\n        const messageArray = messages.map((m)=>({\n                role: m.role,\n                content: m.content\n            }));\n        const result = await (0,_summarizer__WEBPACK_IMPORTED_MODULE_1__.compressContext)({\n            userRequest: userRequest || \"Continue working on the project\",\n            conversationHistory: messageArray\n        });\n        const compressed = result.compressedContext;\n        // Cache the result\n        summarizationCache.set(this.sessionId, {\n            summary: compressed,\n            timestamp: new Date()\n        });\n        return compressed;\n    }\n    // Check if summarization is needed\n    async checkAndSummarize() {\n        const messages = await this.getMessages();\n        if (messages.length < MAX_MESSAGES_BEFORE_SUMMARIZATION) {\n            return;\n        }\n        const cached = summarizationCache.get(this.sessionId);\n        if (cached) {\n            const age = Date.now() - cached.timestamp.getTime();\n            if (age < SUMMARIZATION_INTERVAL_MINUTES * 60 * 1000) {\n                return; // Recent summary exists\n            }\n        }\n        // Generate summary\n        await this.summarizeHistory();\n    }\n    // Summarize conversation history\n    async summarizeHistory() {\n        const messages = await this.getMessages();\n        if (messages.length < 5) {\n            return null;\n        }\n        const messageArray = messages.map((m)=>({\n                role: m.role,\n                content: m.content\n            }));\n        const result = await (0,_summarizer__WEBPACK_IMPORTED_MODULE_1__.summarizeConversation)(messageArray);\n        // Cache the summary\n        summarizationCache.set(this.sessionId, {\n            summary: result.summary,\n            timestamp: new Date()\n        });\n        console.log(`📝 Summarized ${messages.length} messages for session ${this.sessionId}`);\n        return result.summary;\n    }\n    // Get token estimate for current context\n    async getTokenEstimate() {\n        const context = await this.getContextSummary();\n        if (!context) return 0;\n        // Rough estimate: ~4 characters per token\n        return Math.ceil(context.length / 4);\n    }\n    // Get session statistics\n    async getStats() {\n        return await (0,_db_database__WEBPACK_IMPORTED_MODULE_0__.getSessionStats)(this.sessionId);\n    }\n    // Clear session cache (useful for testing or memory management)\n    clearCache() {\n        summarizationCache.delete(this.sessionId);\n    }\n}\n// Global session memory instances\nconst sessionMemories = new Map();\nfunction getSessionMemory(sessionId, projectFolder = \"\") {\n    if (!sessionMemories.has(sessionId)) {\n        const memory = new ConversationMemory(sessionId, projectFolder);\n        sessionMemories.set(sessionId, memory);\n    }\n    return sessionMemories.get(sessionId);\n}\n// Clean up old sessions periodically\nfunction setupSessionCleanup(intervalHours = 24) {\n    setInterval(()=>{\n        const cutoffTime = Date.now() - intervalHours * 60 * 60 * 1000;\n        Array.from(sessionMemories.entries()).forEach(([sessionId, memory])=>{\n            memory.getStats().then((stats)=>{\n                if (stats && new Date(stats.updatedAt).getTime() < cutoffTime) {\n                    sessionMemories.delete(sessionId);\n                    console.log(`🧹 Cleaned up inactive session: ${sessionId}`);\n                }\n            });\n        });\n    }, intervalHours * 60 * 60 * 1000);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/memory-db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/prompt-optimizer.ts":
/*!***************************************!*\
  !*** ./lib/utils/prompt-optimizer.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PromptOptimizer: () => (/* binding */ PromptOptimizer),\n/* harmony export */   promptOptimizer: () => (/* binding */ promptOptimizer)\n/* harmony export */ });\n/* harmony import */ var _summarizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./summarizer */ \"(rsc)/./lib/utils/summarizer.ts\");\n/**\n * Prompt Optimizer\n * Optimizes prompts before sending to AI to reduce token usage and improve clarity\n */ \nclass PromptOptimizer {\n    constructor(maxTokens = 4000){\n        this.maxTokens = maxTokens;\n    }\n    /**\n   * Optimize a prompt by removing redundancy and compressing content\n   */ optimize(prompt, context) {\n        const originalTokens = (0,_summarizer__WEBPACK_IMPORTED_MODULE_0__.estimateTokens)(prompt);\n        let optimized = prompt;\n        // 1. Remove excessive whitespace\n        optimized = this.removeExcessiveWhitespace(optimized);\n        // 2. Deduplicate repeated instructions\n        optimized = this.deduplicateInstructions(optimized);\n        // 3. Compress file listings\n        optimized = this.compressFileLists(optimized);\n        // 4. Remove redundant phrases\n        optimized = this.removeRedundantPhrases(optimized);\n        // 5. If still too long, truncate intelligently\n        if ((0,_summarizer__WEBPACK_IMPORTED_MODULE_0__.estimateTokens)(optimized) > this.maxTokens) {\n            optimized = this.intelligentTruncate(optimized, context);\n        }\n        const optimizedTokens = (0,_summarizer__WEBPACK_IMPORTED_MODULE_0__.estimateTokens)(optimized);\n        const savings = originalTokens - optimizedTokens;\n        const savingsPercent = originalTokens > 0 ? savings / originalTokens * 100 : 0;\n        if (savings > 50) {\n            console.log(`🎯 Prompt optimized: ${originalTokens} → ${optimizedTokens} tokens (${Math.round(savingsPercent)}% reduction)`);\n        }\n        return {\n            optimizedPrompt: optimized,\n            originalTokens,\n            optimizedTokens,\n            savings,\n            savingsPercent\n        };\n    }\n    removeExcessiveWhitespace(text) {\n        return text.split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0).join(\"\\n\").replace(/\\n{3,}/g, \"\\n\\n\"); // Max 2 consecutive newlines\n    }\n    deduplicateInstructions(text) {\n        const lines = text.split(\"\\n\");\n        const seen = new Set();\n        const result = [];\n        for (const line of lines){\n            const normalized = line.toLowerCase().trim();\n            // Skip if we've seen this exact instruction\n            if (normalized.length > 20 && seen.has(normalized)) {\n                continue;\n            }\n            seen.add(normalized);\n            result.push(line);\n        }\n        return result.join(\"\\n\");\n    }\n    compressFileLists(text) {\n        // Compress long file lists\n        const fileListPattern = /(?:EXISTING FILES|Session files|Current state files):\\s*\\n((?:[-•]\\s*[^\\n]+\\n?)+)/gi;\n        return text.replace(fileListPattern, (match, fileList)=>{\n            const files = fileList.split(\"\\n\").filter((l)=>l.trim().length > 0);\n            if (files.length > 10) {\n                const first5 = files.slice(0, 5).join(\"\\n\");\n                const last3 = files.slice(-3).join(\"\\n\");\n                return `${match.split(\":\")[0]}:\\n${first5}\\n... (${files.length - 8} more files)\\n${last3}`;\n            }\n            return match;\n        });\n    }\n    removeRedundantPhrases(text) {\n        // Remove common redundant phrases\n        const redundantPhrases = [\n            /Please note that /gi,\n            /It is important to /gi,\n            /You should be aware that /gi,\n            /Keep in mind that /gi,\n            /Remember to /gi,\n            /Make sure to /gi,\n            /Don't forget to /gi,\n            /Be sure to /gi\n        ];\n        let result = text;\n        for (const phrase of redundantPhrases){\n            result = result.replace(phrase, \"\");\n        }\n        return result;\n    }\n    intelligentTruncate(text, context) {\n        // Priority sections (keep these)\n        const sections = text.split(\"\\n\\n\");\n        const priority = [];\n        const medium = [];\n        const low = [];\n        for (const section of sections){\n            const lower = section.toLowerCase();\n            if (lower.includes(\"critical\") || lower.includes(\"important\") || lower.includes(\"rules:\") || lower.includes(\"current step\")) {\n                priority.push(section);\n            } else if (lower.includes(\"existing files\") || lower.includes(\"available tools\") || lower.includes(\"context\")) {\n                medium.push(section);\n            } else {\n                low.push(section);\n            }\n        }\n        // Rebuild with priority\n        let result = priority.join(\"\\n\\n\");\n        let currentTokens = (0,_summarizer__WEBPACK_IMPORTED_MODULE_0__.estimateTokens)(result);\n        // Add medium priority sections if space allows\n        for (const section of medium){\n            const sectionTokens = (0,_summarizer__WEBPACK_IMPORTED_MODULE_0__.estimateTokens)(section);\n            if (currentTokens + sectionTokens < this.maxTokens * 0.9) {\n                result += \"\\n\\n\" + section;\n                currentTokens += sectionTokens;\n            } else {\n                // Truncate section\n                const truncated = (0,_summarizer__WEBPACK_IMPORTED_MODULE_0__.smartTruncate)(section, 200);\n                result += \"\\n\\n\" + truncated;\n                break;\n            }\n        }\n        return result;\n    }\n    /**\n   * Optimize system prompt specifically\n   */ optimizeSystemPrompt(systemPrompt, contextSummary) {\n        const { optimizedPrompt } = this.optimize(systemPrompt, contextSummary);\n        return optimizedPrompt;\n    }\n    /**\n   * Optimize file content before including in prompt\n   */ optimizeFileContent(filePath, content, maxLines = 50) {\n        const lines = content.split(\"\\n\");\n        if (lines.length <= maxLines) {\n            return content;\n        }\n        // Show first and last portions\n        const firstLines = lines.slice(0, Math.floor(maxLines / 2));\n        const lastLines = lines.slice(-Math.floor(maxLines / 2));\n        return `${firstLines.join(\"\\n\")}\\n... (${lines.length - maxLines} lines omitted) ...\\n${lastLines.join(\"\\n\")}`;\n    }\n    /**\n   * Batch optimize multiple prompts\n   */ batchOptimize(prompts) {\n        return prompts.map((p)=>this.optimize(p).optimizedPrompt);\n    }\n}\nconst promptOptimizer = new PromptOptimizer(4000);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/prompt-optimizer.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/summarizer.ts":
/*!*********************************!*\
  !*** ./lib/utils/summarizer.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compressContext: () => (/* binding */ compressContext),\n/* harmony export */   estimateTokens: () => (/* binding */ estimateTokens),\n/* harmony export */   shouldCompress: () => (/* binding */ shouldCompress),\n/* harmony export */   smartTruncate: () => (/* binding */ smartTruncate),\n/* harmony export */   summarizeConversation: () => (/* binding */ summarizeConversation),\n/* harmony export */   summarizeFileContents: () => (/* binding */ summarizeFileContents)\n/* harmony export */ });\n/* harmony import */ var _langchain_openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/openai */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/index.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n\n\n// Initialize a lightweight model for summarization\nconst apiKey = process.env.OPENROUTER_API_KEY ?? process.env.OPENAI_API_KEY;\nconst apiBase = \"https://openrouter.ai/api/v1\";\nconst summarizer = new _langchain_openai__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI({\n    apiKey,\n    configuration: {\n        baseURL: apiBase\n    },\n    model: process.env.OPENROUTER_MODEL,\n    temperature: 0.3,\n    maxTokens: 500\n});\n/**\n * Summarize conversation history to reduce token usage\n */ async function summarizeConversation(messages, maxMessages = 10) {\n    // Keep the most recent messages, summarize older ones\n    if (messages.length <= maxMessages) {\n        return {\n            summary: messages.map((m)=>`${m.role}: ${m.content}`).join(\"\\n\"),\n            tokensSaved: 0,\n            originalLength: messages.length\n        };\n    }\n    const recentMessages = messages.slice(-maxMessages);\n    const oldMessages = messages.slice(0, -maxMessages);\n    const oldMessagesText = oldMessages.map((m)=>`${m.role}: ${m.content}`).join(\"\\n\");\n    const systemPrompt = `You are a context summarizer. Condense the conversation history into a brief, relevant summary.\n\nFocus on:\n1. Key user requests and what was accomplished\n2. Important decisions made\n3. Files created/modified\n4. Current state of the project\n\nKeep it under 200 words. Be concise but preserve critical context.`;\n    try {\n        const response = await summarizer.invoke([\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.SystemMessage(systemPrompt),\n            new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(`Summarize this conversation history:\\n\\n${oldMessagesText}`)\n        ]);\n        const summary = response.content.toString();\n        // Estimate tokens saved (rough estimate: 4 chars ≈ 1 token)\n        const originalTokens = Math.ceil(oldMessagesText.length / 4);\n        const summaryTokens = Math.ceil(summary.length / 4);\n        const tokensSaved = originalTokens - summaryTokens;\n        return {\n            summary,\n            tokensSaved,\n            originalLength: messages.length\n        };\n    } catch (error) {\n        console.error(\"Summarization error:\", error);\n        // Fallback: just return recent messages\n        return {\n            summary: recentMessages.map((m)=>`${m.role}: ${m.content}`).join(\"\\n\"),\n            tokensSaved: 0,\n            originalLength: messages.length\n        };\n    }\n}\n/**\n * Summarize file contents to reduce token usage when passing as context\n */ async function summarizeFileContents(files, maxFileSize = 500) {\n    const summarizedFiles = {};\n    for (const [filename, content] of Object.entries(files)){\n        // If file is small enough, keep it as-is\n        if (content.length <= maxFileSize) {\n            summarizedFiles[filename] = content;\n            continue;\n        }\n        // For large files, provide a structure summary\n        const lines = content.split(\"\\n\");\n        const firstLines = lines.slice(0, 10).join(\"\\n\");\n        const lastLines = lines.slice(-5).join(\"\\n\");\n        const summary = `${firstLines}\\n\\n... (${lines.length - 15} lines omitted) ...\\n\\n${lastLines}`;\n        summarizedFiles[filename] = summary;\n    }\n    return summarizedFiles;\n}\n/**\n * Intelligent context compression for agent prompts\n */ async function compressContext(options) {\n    const parts = [];\n    let originalSize = 0;\n    // 1. User request (always include, high priority)\n    parts.push(`USER REQUEST: ${options.userRequest}`);\n    originalSize += options.userRequest.length;\n    // 2. Conversation history (summarize if long)\n    if (options.conversationHistory && options.conversationHistory.length > 0) {\n        const { summary, tokensSaved } = await summarizeConversation(options.conversationHistory, 5 // Keep last 5 messages\n        );\n        parts.push(`\\nCONVERSATION CONTEXT:\\n${summary}`);\n        originalSize += options.conversationHistory.reduce((sum, m)=>sum + m.content.length, 0);\n    }\n    // 3. Existing files (summarize large files)\n    if (options.existingFiles && Object.keys(options.existingFiles).length > 0) {\n        const summarizedFiles = await summarizeFileContents(options.existingFiles, 400);\n        parts.push(`\\nEXISTING FILES:`);\n        for (const [filename, content] of Object.entries(summarizedFiles)){\n            parts.push(`\\n--- ${filename} ---\\n${content}`);\n        }\n        originalSize += Object.values(options.existingFiles).reduce((sum, content)=>sum + content.length, 0);\n    }\n    // 4. Plan (always include if present)\n    if (options.plan && options.plan.length > 0) {\n        parts.push(`\\nPLAN:\\n${options.plan.map((s, i)=>`${i + 1}. ${s}`).join(\"\\n\")}`);\n        originalSize += options.plan.join(\"\").length;\n    }\n    // 5. Recent operations (keep brief)\n    if (options.recentOperations && options.recentOperations.length > 0) {\n        const recentOps = options.recentOperations.slice(-5);\n        parts.push(`\\nRECENT OPERATIONS:\\n${recentOps.join(\"\\n\")}`);\n        originalSize += options.recentOperations.join(\"\").length;\n    }\n    const compressedContext = parts.join(\"\\n\");\n    const compressedSize = compressedContext.length;\n    const compressionRatio = originalSize > 0 ? (originalSize - compressedSize) / originalSize * 100 : 0;\n    return {\n        compressedContext,\n        stats: {\n            originalSize,\n            compressedSize,\n            compressionRatio\n        }\n    };\n}\n/**\n * Smart truncation for very long content\n */ function smartTruncate(text, maxLength) {\n    if (text.length <= maxLength) {\n        return text;\n    }\n    // Try to truncate at a natural boundary (newline, period, etc.)\n    const truncated = text.substring(0, maxLength);\n    const lastNewline = truncated.lastIndexOf(\"\\n\");\n    const lastPeriod = truncated.lastIndexOf(\".\");\n    const cutPoint = Math.max(lastNewline, lastPeriod);\n    if (cutPoint > maxLength * 0.8) {\n        return text.substring(0, cutPoint + 1) + \"\\n... (truncated)\";\n    }\n    return truncated + \"\\n... (truncated)\";\n}\n/**\n * Calculate approximate token count\n */ function estimateTokens(text) {\n    // Rough estimate: ~4 characters per token\n    // More accurate for English text\n    return Math.ceil(text.length / 4);\n}\n/**\n * Check if context is getting too large and needs compression\n */ function shouldCompress(text, maxTokens = 2000) {\n    return estimateTokens(text) > maxTokens;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/summarizer.ts\n");

/***/ }),

/***/ "(rsc)/./lib/utils/tool-logger.ts":
/*!**********************************!*\
  !*** ./lib/utils/tool-logger.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toolLogger: () => (/* binding */ toolLogger)\n/* harmony export */ });\n/**\n * Tool Call Logger\n * Logs all tool invocations with timing and results for debugging and optimization\n */ class ToolCallLogger {\n    setSession(sessionId) {\n        this.sessionId = sessionId;\n        this.calls = [];\n    }\n    startCall(toolName, parameters) {\n        const callId = this.calls.length;\n        this.calls.push({\n            toolName,\n            parameters,\n            startTime: Date.now(),\n            success: false\n        });\n        console.log(`🔧 [TOOL START] ${toolName}`, this.formatParams(parameters));\n        return callId;\n    }\n    endCall(callId, result, success = true, error) {\n        const call = this.calls[callId];\n        if (!call) return;\n        call.endTime = Date.now();\n        call.duration = call.endTime - call.startTime;\n        call.success = success;\n        call.result = this.truncateResult(result);\n        call.error = error;\n        const icon = success ? \"✅\" : \"❌\";\n        console.log(`${icon} [TOOL END] ${call.toolName} (${call.duration}ms)`);\n        if (error) {\n            console.log(`   Error: ${error}`);\n        }\n    }\n    getStats() {\n        const totalCalls = this.calls.length;\n        const successfulCalls = this.calls.filter((c)=>c.success).length;\n        const failedCalls = totalCalls - successfulCalls;\n        const totalDuration = this.calls.reduce((sum, c)=>sum + (c.duration || 0), 0);\n        const averageDuration = totalCalls > 0 ? totalDuration / totalCalls : 0;\n        const toolUsage = this.calls.reduce((acc, call)=>{\n            acc[call.toolName] = (acc[call.toolName] || 0) + 1;\n            return acc;\n        }, {});\n        return {\n            totalCalls,\n            successfulCalls,\n            failedCalls,\n            totalDuration,\n            averageDuration: Math.round(averageDuration),\n            toolUsage\n        };\n    }\n    getSummary() {\n        const stats = this.getStats();\n        return `\n📊 Tool Call Statistics:\n- Total calls: ${stats.totalCalls}\n- Successful: ${stats.successfulCalls}\n- Failed: ${stats.failedCalls}\n- Total time: ${stats.totalDuration}ms\n- Average time: ${stats.averageDuration}ms\n- Most used: ${Object.entries(stats.toolUsage).sort((a, b)=>b[1] - a[1]).slice(0, 3).map(([tool, count])=>`${tool}(${count})`).join(\", \")}\n    `.trim();\n    }\n    getCalls() {\n        return this.calls;\n    }\n    clear() {\n        this.calls = [];\n    }\n    formatParams(params) {\n        if (typeof params === \"string\") return params;\n        const str = JSON.stringify(params, null, 0);\n        return str.length > 100 ? str.substring(0, 100) + \"...\" : str;\n    }\n    truncateResult(result) {\n        return result.length > 500 ? result.substring(0, 500) + \"...\" : result;\n    }\n    constructor(){\n        this.calls = [];\n        this.sessionId = \"\";\n    }\n}\nconst toolLogger = new ToolCallLogger();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvdXRpbHMvdG9vbC1sb2dnZXIudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQWFELE1BQU1BO0lBSUpDLFdBQVdDLFNBQWlCLEVBQUU7UUFDNUIsSUFBSSxDQUFDQSxTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0MsS0FBSyxHQUFHLEVBQUU7SUFDakI7SUFFQUMsVUFBVUMsUUFBZ0IsRUFBRUMsVUFBZSxFQUFVO1FBQ25ELE1BQU1DLFNBQVMsSUFBSSxDQUFDSixLQUFLLENBQUNLLE1BQU07UUFDaEMsSUFBSSxDQUFDTCxLQUFLLENBQUNNLElBQUksQ0FBQztZQUNkSjtZQUNBQztZQUNBSSxXQUFXQyxLQUFLQyxHQUFHO1lBQ25CQyxTQUFTO1FBQ1g7UUFFQUMsUUFBUUMsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLEVBQUVWLFNBQVMsQ0FBQyxFQUFFLElBQUksQ0FBQ1csWUFBWSxDQUFDVjtRQUM3RCxPQUFPQztJQUNUO0lBRUFVLFFBQVFWLE1BQWMsRUFBRVcsTUFBYyxFQUFFTCxVQUFtQixJQUFJLEVBQUVNLEtBQWMsRUFBRTtRQUMvRSxNQUFNQyxPQUFPLElBQUksQ0FBQ2pCLEtBQUssQ0FBQ0ksT0FBTztRQUMvQixJQUFJLENBQUNhLE1BQU07UUFFWEEsS0FBS0MsT0FBTyxHQUFHVixLQUFLQyxHQUFHO1FBQ3ZCUSxLQUFLRSxRQUFRLEdBQUdGLEtBQUtDLE9BQU8sR0FBR0QsS0FBS1YsU0FBUztRQUM3Q1UsS0FBS1AsT0FBTyxHQUFHQTtRQUNmTyxLQUFLRixNQUFNLEdBQUcsSUFBSSxDQUFDSyxjQUFjLENBQUNMO1FBQ2xDRSxLQUFLRCxLQUFLLEdBQUdBO1FBRWIsTUFBTUssT0FBT1gsVUFBVSxNQUFNO1FBQzdCQyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxFQUFFUyxLQUFLLFlBQVksRUFBRUosS0FBS2YsUUFBUSxDQUFDLEVBQUUsRUFBRWUsS0FBS0UsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUV0RSxJQUFJSCxPQUFPO1lBQ1RMLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRUksTUFBTSxDQUFDO1FBQ2xDO0lBQ0Y7SUFFQU0sV0FBVztRQUNULE1BQU1DLGFBQWEsSUFBSSxDQUFDdkIsS0FBSyxDQUFDSyxNQUFNO1FBQ3BDLE1BQU1tQixrQkFBa0IsSUFBSSxDQUFDeEIsS0FBSyxDQUFDeUIsTUFBTSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFaEIsT0FBTyxFQUFFTCxNQUFNO1FBQ2hFLE1BQU1zQixjQUFjSixhQUFhQztRQUNqQyxNQUFNSSxnQkFBZ0IsSUFBSSxDQUFDNUIsS0FBSyxDQUFDNkIsTUFBTSxDQUFDLENBQUNDLEtBQUtKLElBQU1JLE1BQU9KLENBQUFBLEVBQUVQLFFBQVEsSUFBSSxJQUFJO1FBQzdFLE1BQU1ZLGtCQUFrQlIsYUFBYSxJQUFJSyxnQkFBZ0JMLGFBQWE7UUFFdEUsTUFBTVMsWUFBWSxJQUFJLENBQUNoQyxLQUFLLENBQUM2QixNQUFNLENBQUMsQ0FBQ0ksS0FBS2hCO1lBQ3hDZ0IsR0FBRyxDQUFDaEIsS0FBS2YsUUFBUSxDQUFDLEdBQUcsQ0FBQytCLEdBQUcsQ0FBQ2hCLEtBQUtmLFFBQVEsQ0FBQyxJQUFJLEtBQUs7WUFDakQsT0FBTytCO1FBQ1QsR0FBRyxDQUFDO1FBRUosT0FBTztZQUNMVjtZQUNBQztZQUNBRztZQUNBQztZQUNBRyxpQkFBaUJHLEtBQUtDLEtBQUssQ0FBQ0o7WUFDNUJDO1FBQ0Y7SUFDRjtJQUVBSSxhQUFhO1FBQ1gsTUFBTUMsUUFBUSxJQUFJLENBQUNmLFFBQVE7UUFDM0IsT0FBTyxDQUFDOztlQUVHLEVBQUVlLE1BQU1kLFVBQVUsQ0FBQztjQUNwQixFQUFFYyxNQUFNYixlQUFlLENBQUM7VUFDNUIsRUFBRWEsTUFBTVYsV0FBVyxDQUFDO2NBQ2hCLEVBQUVVLE1BQU1ULGFBQWEsQ0FBQztnQkFDcEIsRUFBRVMsTUFBTU4sZUFBZSxDQUFDO2FBQzNCLEVBQUVPLE9BQU9DLE9BQU8sQ0FBQ0YsTUFBTUwsU0FBUyxFQUN0Q1EsSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1BLENBQUMsQ0FBQyxFQUFFLEdBQUdELENBQUMsQ0FBQyxFQUFFLEVBQzFCRSxLQUFLLENBQUMsR0FBRyxHQUNUQyxHQUFHLENBQUMsQ0FBQyxDQUFDQyxNQUFNQyxNQUFNLEdBQUssQ0FBQyxFQUFFRCxLQUFLLENBQUMsRUFBRUMsTUFBTSxDQUFDLENBQUMsRUFDMUNDLElBQUksQ0FBQyxNQUFNO0lBQ2QsQ0FBQyxDQUFDQyxJQUFJO0lBQ1I7SUFFQUMsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDakQsS0FBSztJQUNuQjtJQUVBa0QsUUFBUTtRQUNOLElBQUksQ0FBQ2xELEtBQUssR0FBRyxFQUFFO0lBQ2pCO0lBRVFhLGFBQWFzQyxNQUFXLEVBQVU7UUFDeEMsSUFBSSxPQUFPQSxXQUFXLFVBQVUsT0FBT0E7UUFDdkMsTUFBTUMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDSCxRQUFRLE1BQU07UUFDekMsT0FBT0MsSUFBSS9DLE1BQU0sR0FBRyxNQUFNK0MsSUFBSUcsU0FBUyxDQUFDLEdBQUcsT0FBTyxRQUFRSDtJQUM1RDtJQUVRaEMsZUFBZUwsTUFBYyxFQUFVO1FBQzdDLE9BQU9BLE9BQU9WLE1BQU0sR0FBRyxNQUFNVSxPQUFPd0MsU0FBUyxDQUFDLEdBQUcsT0FBTyxRQUFReEM7SUFDbEU7O2FBOUZRZixRQUFvQixFQUFFO2FBQ3RCRCxZQUFvQjs7QUE4RjlCO0FBRU8sTUFBTXlELGFBQWEsSUFBSTNELGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5yb3V0ZXItbGFuZ2dyYXBoLy4vbGliL3V0aWxzL3Rvb2wtbG9nZ2VyLnRzP2ZkOTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUb29sIENhbGwgTG9nZ2VyXG4gKiBMb2dzIGFsbCB0b29sIGludm9jYXRpb25zIHdpdGggdGltaW5nIGFuZCByZXN1bHRzIGZvciBkZWJ1Z2dpbmcgYW5kIG9wdGltaXphdGlvblxuICovXG5cbmludGVyZmFjZSBUb29sQ2FsbCB7XG4gIHRvb2xOYW1lOiBzdHJpbmc7XG4gIHBhcmFtZXRlcnM6IGFueTtcbiAgc3RhcnRUaW1lOiBudW1iZXI7XG4gIGVuZFRpbWU/OiBudW1iZXI7XG4gIGR1cmF0aW9uPzogbnVtYmVyO1xuICBzdWNjZXNzOiBib29sZWFuO1xuICByZXN1bHQ/OiBzdHJpbmc7XG4gIGVycm9yPzogc3RyaW5nO1xufVxuXG5jbGFzcyBUb29sQ2FsbExvZ2dlciB7XG4gIHByaXZhdGUgY2FsbHM6IFRvb2xDYWxsW10gPSBbXTtcbiAgcHJpdmF0ZSBzZXNzaW9uSWQ6IHN0cmluZyA9ICcnO1xuXG4gIHNldFNlc3Npb24oc2Vzc2lvbklkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlc3Npb25JZCA9IHNlc3Npb25JZDtcbiAgICB0aGlzLmNhbGxzID0gW107XG4gIH1cblxuICBzdGFydENhbGwodG9vbE5hbWU6IHN0cmluZywgcGFyYW1ldGVyczogYW55KTogbnVtYmVyIHtcbiAgICBjb25zdCBjYWxsSWQgPSB0aGlzLmNhbGxzLmxlbmd0aDtcbiAgICB0aGlzLmNhbGxzLnB1c2goe1xuICAgICAgdG9vbE5hbWUsXG4gICAgICBwYXJhbWV0ZXJzLFxuICAgICAgc3RhcnRUaW1lOiBEYXRlLm5vdygpLFxuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgfSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYPCflKcgW1RPT0wgU1RBUlRdICR7dG9vbE5hbWV9YCwgdGhpcy5mb3JtYXRQYXJhbXMocGFyYW1ldGVycykpO1xuICAgIHJldHVybiBjYWxsSWQ7XG4gIH1cblxuICBlbmRDYWxsKGNhbGxJZDogbnVtYmVyLCByZXN1bHQ6IHN0cmluZywgc3VjY2VzczogYm9vbGVhbiA9IHRydWUsIGVycm9yPzogc3RyaW5nKSB7XG4gICAgY29uc3QgY2FsbCA9IHRoaXMuY2FsbHNbY2FsbElkXTtcbiAgICBpZiAoIWNhbGwpIHJldHVybjtcblxuICAgIGNhbGwuZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgY2FsbC5kdXJhdGlvbiA9IGNhbGwuZW5kVGltZSAtIGNhbGwuc3RhcnRUaW1lO1xuICAgIGNhbGwuc3VjY2VzcyA9IHN1Y2Nlc3M7XG4gICAgY2FsbC5yZXN1bHQgPSB0aGlzLnRydW5jYXRlUmVzdWx0KHJlc3VsdCk7XG4gICAgY2FsbC5lcnJvciA9IGVycm9yO1xuXG4gICAgY29uc3QgaWNvbiA9IHN1Y2Nlc3MgPyAn4pyFJyA6ICfinYwnO1xuICAgIGNvbnNvbGUubG9nKGAke2ljb259IFtUT09MIEVORF0gJHtjYWxsLnRvb2xOYW1lfSAoJHtjYWxsLmR1cmF0aW9ufW1zKWApO1xuICAgIFxuICAgIGlmIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coYCAgIEVycm9yOiAke2Vycm9yfWApO1xuICAgIH1cbiAgfVxuXG4gIGdldFN0YXRzKCkge1xuICAgIGNvbnN0IHRvdGFsQ2FsbHMgPSB0aGlzLmNhbGxzLmxlbmd0aDtcbiAgICBjb25zdCBzdWNjZXNzZnVsQ2FsbHMgPSB0aGlzLmNhbGxzLmZpbHRlcihjID0+IGMuc3VjY2VzcykubGVuZ3RoO1xuICAgIGNvbnN0IGZhaWxlZENhbGxzID0gdG90YWxDYWxscyAtIHN1Y2Nlc3NmdWxDYWxscztcbiAgICBjb25zdCB0b3RhbER1cmF0aW9uID0gdGhpcy5jYWxscy5yZWR1Y2UoKHN1bSwgYykgPT4gc3VtICsgKGMuZHVyYXRpb24gfHwgMCksIDApO1xuICAgIGNvbnN0IGF2ZXJhZ2VEdXJhdGlvbiA9IHRvdGFsQ2FsbHMgPiAwID8gdG90YWxEdXJhdGlvbiAvIHRvdGFsQ2FsbHMgOiAwO1xuXG4gICAgY29uc3QgdG9vbFVzYWdlID0gdGhpcy5jYWxscy5yZWR1Y2UoKGFjYywgY2FsbCkgPT4ge1xuICAgICAgYWNjW2NhbGwudG9vbE5hbWVdID0gKGFjY1tjYWxsLnRvb2xOYW1lXSB8fCAwKSArIDE7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIG51bWJlcj4pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsQ2FsbHMsXG4gICAgICBzdWNjZXNzZnVsQ2FsbHMsXG4gICAgICBmYWlsZWRDYWxscyxcbiAgICAgIHRvdGFsRHVyYXRpb24sXG4gICAgICBhdmVyYWdlRHVyYXRpb246IE1hdGgucm91bmQoYXZlcmFnZUR1cmF0aW9uKSxcbiAgICAgIHRvb2xVc2FnZSxcbiAgICB9O1xuICB9XG5cbiAgZ2V0U3VtbWFyeSgpIHtcbiAgICBjb25zdCBzdGF0cyA9IHRoaXMuZ2V0U3RhdHMoKTtcbiAgICByZXR1cm4gYFxu8J+TiiBUb29sIENhbGwgU3RhdGlzdGljczpcbi0gVG90YWwgY2FsbHM6ICR7c3RhdHMudG90YWxDYWxsc31cbi0gU3VjY2Vzc2Z1bDogJHtzdGF0cy5zdWNjZXNzZnVsQ2FsbHN9XG4tIEZhaWxlZDogJHtzdGF0cy5mYWlsZWRDYWxsc31cbi0gVG90YWwgdGltZTogJHtzdGF0cy50b3RhbER1cmF0aW9ufW1zXG4tIEF2ZXJhZ2UgdGltZTogJHtzdGF0cy5hdmVyYWdlRHVyYXRpb259bXNcbi0gTW9zdCB1c2VkOiAke09iamVjdC5lbnRyaWVzKHN0YXRzLnRvb2xVc2FnZSlcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSlcbiAgICAgIC5zbGljZSgwLCAzKVxuICAgICAgLm1hcCgoW3Rvb2wsIGNvdW50XSkgPT4gYCR7dG9vbH0oJHtjb3VudH0pYClcbiAgICAgIC5qb2luKCcsICcpfVxuICAgIGAudHJpbSgpO1xuICB9XG5cbiAgZ2V0Q2FsbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbHM7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLmNhbGxzID0gW107XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdFBhcmFtcyhwYXJhbXM6IGFueSk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdzdHJpbmcnKSByZXR1cm4gcGFyYW1zO1xuICAgIGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KHBhcmFtcywgbnVsbCwgMCk7XG4gICAgcmV0dXJuIHN0ci5sZW5ndGggPiAxMDAgPyBzdHIuc3Vic3RyaW5nKDAsIDEwMCkgKyAnLi4uJyA6IHN0cjtcbiAgfVxuXG4gIHByaXZhdGUgdHJ1bmNhdGVSZXN1bHQocmVzdWx0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiByZXN1bHQubGVuZ3RoID4gNTAwID8gcmVzdWx0LnN1YnN0cmluZygwLCA1MDApICsgJy4uLicgOiByZXN1bHQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRvb2xMb2dnZXIgPSBuZXcgVG9vbENhbGxMb2dnZXIoKTtcbiJdLCJuYW1lcyI6WyJUb29sQ2FsbExvZ2dlciIsInNldFNlc3Npb24iLCJzZXNzaW9uSWQiLCJjYWxscyIsInN0YXJ0Q2FsbCIsInRvb2xOYW1lIiwicGFyYW1ldGVycyIsImNhbGxJZCIsImxlbmd0aCIsInB1c2giLCJzdGFydFRpbWUiLCJEYXRlIiwibm93Iiwic3VjY2VzcyIsImNvbnNvbGUiLCJsb2ciLCJmb3JtYXRQYXJhbXMiLCJlbmRDYWxsIiwicmVzdWx0IiwiZXJyb3IiLCJjYWxsIiwiZW5kVGltZSIsImR1cmF0aW9uIiwidHJ1bmNhdGVSZXN1bHQiLCJpY29uIiwiZ2V0U3RhdHMiLCJ0b3RhbENhbGxzIiwic3VjY2Vzc2Z1bENhbGxzIiwiZmlsdGVyIiwiYyIsImZhaWxlZENhbGxzIiwidG90YWxEdXJhdGlvbiIsInJlZHVjZSIsInN1bSIsImF2ZXJhZ2VEdXJhdGlvbiIsInRvb2xVc2FnZSIsImFjYyIsIk1hdGgiLCJyb3VuZCIsImdldFN1bW1hcnkiLCJzdGF0cyIsIk9iamVjdCIsImVudHJpZXMiLCJzb3J0IiwiYSIsImIiLCJzbGljZSIsIm1hcCIsInRvb2wiLCJjb3VudCIsImpvaW4iLCJ0cmltIiwiZ2V0Q2FsbHMiLCJjbGVhciIsInBhcmFtcyIsInN0ciIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdWJzdHJpbmciLCJ0b29sTG9nZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/utils/tool-logger.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@14.2.5_@playwright+test@1.56.1_react-dom@18.3.1_react@18.3.1__react@18.3.1","vendor-chunks/formdata-node@4.4.1","vendor-chunks/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_","vendor-chunks/openai@6.7.0_ws@8.18.3_zod@3.25.76","vendor-chunks/semver@7.7.3","vendor-chunks/@langchain+langgraph@1.0.1_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___r_79a741b742ae68db3a00eb54de512e24","vendor-chunks/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3","vendor-chunks/zod@3.25.76","vendor-chunks/langsmith@0.3.74_openai@6.7.0_ws@8.18.3_zod@3.25.76_","vendor-chunks/groq-sdk@0.19.0","vendor-chunks/@langchain+langgraph-checkpoint@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__","vendor-chunks/uuid@10.0.0","vendor-chunks/form-data-encoder@1.7.2","vendor-chunks/@cfworker+json-schema@4.1.1","vendor-chunks/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__","vendor-chunks/uuid@11.1.0","vendor-chunks/whatwg-url@5.0.0","vendor-chunks/agentkeepalive@4.6.0","vendor-chunks/retry@0.13.1","vendor-chunks/p-queue@6.6.2","vendor-chunks/js-tiktoken@1.0.21","vendor-chunks/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__","vendor-chunks/tr46@0.0.3","vendor-chunks/web-streams-polyfill@4.0.0-beta.3","vendor-chunks/node-fetch@2.7.0","vendor-chunks/mustache@4.2.0","vendor-chunks/@google+generative-ai@0.24.1","vendor-chunks/webidl-conversions@3.0.1","vendor-chunks/p-timeout@3.2.0","vendor-chunks/p-retry@4.6.2","vendor-chunks/p-finally@1.0.0","vendor-chunks/ms@2.1.3","vendor-chunks/humanize-ms@1.2.1","vendor-chunks/eventemitter3@4.0.7","vendor-chunks/event-target-shim@5.0.1","vendor-chunks/decamelize@1.2.0","vendor-chunks/camelcase@6.3.0","vendor-chunks/base64-js@1.5.1","vendor-chunks/ansi-styles@5.2.0","vendor-chunks/abort-controller@3.0.0"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@14.2.5_@playwright+test@1.56.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=%2FUsers%2FApple%2FDesktop%2FNextLovable%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2FApple%2FDesktop%2FNextLovable&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();