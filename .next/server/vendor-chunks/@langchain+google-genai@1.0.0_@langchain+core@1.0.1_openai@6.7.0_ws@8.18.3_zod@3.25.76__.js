"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__";
exports.ids = ["vendor-chunks/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/chat_models.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/chat_models.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGoogleGenerativeAI: () => (/* binding */ ChatGoogleGenerativeAI)\n/* harmony export */ });\n/* harmony import */ var _utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/zod_to_genai_parameters.js */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js\");\n/* harmony import */ var _utils_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/common.js */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/common.js\");\n/* harmony import */ var _output_parsers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./output_parsers.js */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/output_parsers.js\");\n/* harmony import */ var _utils_tools_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/tools.js */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/tools.js\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/.pnpm/@google+generative-ai@0.24.1/node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/language_models/chat_models.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/runnables/index.js\");\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/types/index.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/output_parsers/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n//#region src/chat_models.ts\n/**\n* Google Generative AI chat model integration.\n*\n* Setup:\n* Install `@langchain/google-genai` and set an environment variable named `GOOGLE_API_KEY`.\n*\n* ```bash\n* npm install @langchain/google-genai\n* export GOOGLE_API_KEY=\"your-api-key\"\n* ```\n*\n* ## [Constructor args](https://api.js.langchain.com/classes/langchain_google_genai.ChatGoogleGenerativeAI.html#constructor)\n*\n* ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_google_genai.GoogleGenerativeAIChatCallOptions.html)\n*\n* Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n* They can also be passed via `.withConfig`, or the second arg in `.bindTools`, like shown in the examples below:\n*\n* ```typescript\n* // When calling `.withConfig`, call options should be passed via the first argument\n* const llmWithArgsBound = llm.withConfig({\n*   stop: [\"\\n\"],\n* });\n*\n* // When calling `.bindTools`, call options should be passed via the second argument\n* const llmWithTools = llm.bindTools(\n*   [...],\n*   {\n*     stop: [\"\\n\"],\n*   }\n* );\n* ```\n*\n* ## Examples\n*\n* <details open>\n* <summary><strong>Instantiate</strong></summary>\n*\n* ```typescript\n* import { ChatGoogleGenerativeAI } from '@langchain/google-genai';\n*\n* const llm = new ChatGoogleGenerativeAI({\n*   model: \"gemini-1.5-flash\",\n*   temperature: 0,\n*   maxRetries: 2,\n*   // apiKey: \"...\",\n*   // other params...\n* });\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Invoking</strong></summary>\n*\n* ```typescript\n* const input = `Translate \"I love programming\" into French.`;\n*\n* // Models also accept a list of chat messages or a formatted prompt\n* const result = await llm.invoke(input);\n* console.log(result);\n* ```\n*\n* ```txt\n* AIMessage {\n*   \"content\": \"There are a few ways to translate \\\"I love programming\\\" into French, depending on the level of formality and nuance you want to convey:\\n\\n**Formal:**\\n\\n* **J'aime la programmation.** (This is the most literal and formal translation.)\\n\\n**Informal:**\\n\\n* **J'adore programmer.** (This is a more enthusiastic and informal translation.)\\n* **J'aime beaucoup programmer.** (This is a slightly less enthusiastic but still informal translation.)\\n\\n**More specific:**\\n\\n* **J'aime beaucoup coder.** (This specifically refers to writing code.)\\n* **J'aime beaucoup développer des logiciels.** (This specifically refers to developing software.)\\n\\nThe best translation will depend on the context and your intended audience. \\n\",\n*   \"response_metadata\": {\n*     \"finishReason\": \"STOP\",\n*     \"index\": 0,\n*     \"safetyRatings\": [\n*       {\n*         \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n*         \"probability\": \"NEGLIGIBLE\"\n*       },\n*       {\n*         \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n*         \"probability\": \"NEGLIGIBLE\"\n*       },\n*       {\n*         \"category\": \"HARM_CATEGORY_HARASSMENT\",\n*         \"probability\": \"NEGLIGIBLE\"\n*       },\n*       {\n*         \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n*         \"probability\": \"NEGLIGIBLE\"\n*       }\n*     ]\n*   },\n*   \"usage_metadata\": {\n*     \"input_tokens\": 10,\n*     \"output_tokens\": 149,\n*     \"total_tokens\": 159\n*   }\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Streaming Chunks</strong></summary>\n*\n* ```typescript\n* for await (const chunk of await llm.stream(input)) {\n*   console.log(chunk);\n* }\n* ```\n*\n* ```txt\n* AIMessageChunk {\n*   \"content\": \"There\",\n*   \"response_metadata\": {\n*     \"index\": 0\n*   }\n*   \"usage_metadata\": {\n*     \"input_tokens\": 10,\n*     \"output_tokens\": 1,\n*     \"total_tokens\": 11\n*   }\n* }\n* AIMessageChunk {\n*   \"content\": \" are a few ways to translate \\\"I love programming\\\" into French, depending on\",\n* }\n* AIMessageChunk {\n*   \"content\": \" the level of formality and nuance you want to convey:\\n\\n**Formal:**\\n\\n\",\n* }\n* AIMessageChunk {\n*   \"content\": \"* **J'aime la programmation.** (This is the most literal and formal translation.)\\n\\n**Informal:**\\n\\n* **J'adore programmer.** (This\",\n* }\n* AIMessageChunk {\n*   \"content\": \" is a more enthusiastic and informal translation.)\\n* **J'aime beaucoup programmer.** (This is a slightly less enthusiastic but still informal translation.)\\n\\n**More\",\n* }\n* AIMessageChunk {\n*   \"content\": \" specific:**\\n\\n* **J'aime beaucoup coder.** (This specifically refers to writing code.)\\n* **J'aime beaucoup développer des logiciels.** (This specifically refers to developing software.)\\n\\nThe best translation will depend on the context and\",\n* }\n* AIMessageChunk {\n*   \"content\": \" your intended audience. \\n\",\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Aggregate Streamed Chunks</strong></summary>\n*\n* ```typescript\n* import { AIMessageChunk } from '@langchain/core/messages';\n* import { concat } from '@langchain/core/utils/stream';\n*\n* const stream = await llm.stream(input);\n* let full: AIMessageChunk | undefined;\n* for await (const chunk of stream) {\n*   full = !full ? chunk : concat(full, chunk);\n* }\n* console.log(full);\n* ```\n*\n* ```txt\n* AIMessageChunk {\n*   \"content\": \"There are a few ways to translate \\\"I love programming\\\" into French, depending on the level of formality and nuance you want to convey:\\n\\n**Formal:**\\n\\n* **J'aime la programmation.** (This is the most literal and formal translation.)\\n\\n**Informal:**\\n\\n* **J'adore programmer.** (This is a more enthusiastic and informal translation.)\\n* **J'aime beaucoup programmer.** (This is a slightly less enthusiastic but still informal translation.)\\n\\n**More specific:**\\n\\n* **J'aime beaucoup coder.** (This specifically refers to writing code.)\\n* **J'aime beaucoup développer des logiciels.** (This specifically refers to developing software.)\\n\\nThe best translation will depend on the context and your intended audience. \\n\",\n*   \"usage_metadata\": {\n*     \"input_tokens\": 10,\n*     \"output_tokens\": 277,\n*     \"total_tokens\": 287\n*   }\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Bind tools</strong></summary>\n*\n* ```typescript\n* import { z } from 'zod';\n*\n* const GetWeather = {\n*   name: \"GetWeather\",\n*   description: \"Get the current weather in a given location\",\n*   schema: z.object({\n*     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n*   }),\n* }\n*\n* const GetPopulation = {\n*   name: \"GetPopulation\",\n*   description: \"Get the current population in a given location\",\n*   schema: z.object({\n*     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n*   }),\n* }\n*\n* const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n* const aiMsg = await llmWithTools.invoke(\n*   \"Which city is hotter today and which is bigger: LA or NY?\"\n* );\n* console.log(aiMsg.tool_calls);\n* ```\n*\n* ```txt\n* [\n*   {\n*     name: 'GetWeather',\n*     args: { location: 'Los Angeles, CA' },\n*     type: 'tool_call'\n*   },\n*   {\n*     name: 'GetWeather',\n*     args: { location: 'New York, NY' },\n*     type: 'tool_call'\n*   },\n*   {\n*     name: 'GetPopulation',\n*     args: { location: 'Los Angeles, CA' },\n*     type: 'tool_call'\n*   },\n*   {\n*     name: 'GetPopulation',\n*     args: { location: 'New York, NY' },\n*     type: 'tool_call'\n*   }\n* ]\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Structured Output</strong></summary>\n*\n* ```typescript\n* const Joke = z.object({\n*   setup: z.string().describe(\"The setup of the joke\"),\n*   punchline: z.string().describe(\"The punchline to the joke\"),\n*   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n* }).describe('Joke to tell user.');\n*\n* const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n* const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n* console.log(jokeResult);\n* ```\n*\n* ```txt\n* {\n*   setup: \"Why don\\\\'t cats play poker?\",\n*   punchline: \"Why don\\\\'t cats play poker? Because they always have an ace up their sleeve!\"\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Multimodal</strong></summary>\n*\n* ```typescript\n* import { HumanMessage } from '@langchain/core/messages';\n*\n* const imageUrl = \"https://example.com/image.jpg\";\n* const imageData = await fetch(imageUrl).then(res => res.arrayBuffer());\n* const base64Image = Buffer.from(imageData).toString('base64');\n*\n* const message = new HumanMessage({\n*   content: [\n*     { type: \"text\", text: \"describe the weather in this image\" },\n*     {\n*       type: \"image_url\",\n*       image_url: { url: `data:image/jpeg;base64,${base64Image}` },\n*     },\n*   ]\n* });\n*\n* const imageDescriptionAiMsg = await llm.invoke([message]);\n* console.log(imageDescriptionAiMsg.content);\n* ```\n*\n* ```txt\n* The weather in the image appears to be clear and sunny. The sky is mostly blue with a few scattered white clouds, indicating fair weather. The bright sunlight is casting shadows on the green, grassy hill, suggesting it is a pleasant day with good visibility. There are no signs of rain or stormy conditions.\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Usage Metadata</strong></summary>\n*\n* ```typescript\n* const aiMsgForMetadata = await llm.invoke(input);\n* console.log(aiMsgForMetadata.usage_metadata);\n* ```\n*\n* ```txt\n* { input_tokens: 10, output_tokens: 149, total_tokens: 159 }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Response Metadata</strong></summary>\n*\n* ```typescript\n* const aiMsgForResponseMetadata = await llm.invoke(input);\n* console.log(aiMsgForResponseMetadata.response_metadata);\n* ```\n*\n* ```txt\n* {\n*   finishReason: 'STOP',\n*   index: 0,\n*   safetyRatings: [\n*     {\n*       category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n*       probability: 'NEGLIGIBLE'\n*     },\n*     {\n*       category: 'HARM_CATEGORY_HATE_SPEECH',\n*       probability: 'NEGLIGIBLE'\n*     },\n*     { category: 'HARM_CATEGORY_HARASSMENT', probability: 'NEGLIGIBLE' },\n*     {\n*       category: 'HARM_CATEGORY_DANGEROUS_CONTENT',\n*       probability: 'NEGLIGIBLE'\n*     }\n*   ]\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Document Messages</strong></summary>\n*\n* This example will show you how to pass documents such as PDFs to Google\n* Generative AI through messages.\n*\n* ```typescript\n* const pdfPath = \"/Users/my_user/Downloads/invoice.pdf\";\n* const pdfBase64 = await fs.readFile(pdfPath, \"base64\");\n*\n* const response = await llm.invoke([\n*   [\"system\", \"Use the provided documents to answer the question\"],\n*   [\n*     \"user\",\n*     [\n*       {\n*         type: \"application/pdf\", // If the `type` field includes a single slash (`/`), it will be treated as inline data.\n*         data: pdfBase64,\n*       },\n*       {\n*         type: \"text\",\n*         text: \"Summarize the contents of this PDF\",\n*       },\n*     ],\n*   ],\n* ]);\n*\n* console.log(response.content);\n* ```\n*\n* ```txt\n* This is a billing invoice from Twitter Developers for X API Basic Access. The transaction date is January 7, 2025,\n* and the amount is $194.34, which has been paid. The subscription period is from January 7, 2025 21:02 to February 7, 2025 00:00 (UTC).\n* The tax is $0.00, with a tax rate of 0%. The total amount is $194.34. The payment was made using a Visa card ending in 7022,\n* expiring in 12/2026. The billing address is Brace Sproul, 1234 Main Street, San Francisco, CA, US 94103. The company being billed is\n* X Corp, located at 865 FM 1209 Building 2, Bastrop, TX, US 78602. Terms and conditions apply.\n* ```\n* </details>\n*\n* <br />\n*/\nvar ChatGoogleGenerativeAI = class extends _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_6__.BaseChatModel {\n\tstatic lc_name() {\n\t\treturn \"ChatGoogleGenerativeAI\";\n\t}\n\tlc_serializable = true;\n\tget lc_secrets() {\n\t\treturn { apiKey: \"GOOGLE_API_KEY\" };\n\t}\n\tlc_namespace = [\n\t\t\"langchain\",\n\t\t\"chat_models\",\n\t\t\"google_genai\"\n\t];\n\tget lc_aliases() {\n\t\treturn { apiKey: \"google_api_key\" };\n\t}\n\tmodel;\n\ttemperature;\n\tmaxOutputTokens;\n\ttopP;\n\ttopK;\n\tstopSequences = [];\n\tsafetySettings;\n\tapiKey;\n\tstreaming = false;\n\tjson;\n\tstreamUsage = true;\n\tconvertSystemMessageToHumanContent;\n\tclient;\n\tget _isMultimodalModel() {\n\t\treturn this.model.includes(\"vision\") || this.model.startsWith(\"gemini-1.5\") || this.model.startsWith(\"gemini-2\") || this.model.startsWith(\"gemma-3-\") && !this.model.startsWith(\"gemma-3-1b\");\n\t}\n\tconstructor(fields) {\n\t\tsuper(fields);\n\t\tthis.model = fields.model.replace(/^models\\//, \"\");\n\t\tthis.maxOutputTokens = fields.maxOutputTokens ?? this.maxOutputTokens;\n\t\tif (this.maxOutputTokens && this.maxOutputTokens < 0) throw new Error(\"`maxOutputTokens` must be a positive integer\");\n\t\tthis.temperature = fields.temperature ?? this.temperature;\n\t\tif (this.temperature && (this.temperature < 0 || this.temperature > 2)) throw new Error(\"`temperature` must be in the range of [0.0,2.0]\");\n\t\tthis.topP = fields.topP ?? this.topP;\n\t\tif (this.topP && this.topP < 0) throw new Error(\"`topP` must be a positive integer\");\n\t\tif (this.topP && this.topP > 1) throw new Error(\"`topP` must be below 1.\");\n\t\tthis.topK = fields.topK ?? this.topK;\n\t\tif (this.topK && this.topK < 0) throw new Error(\"`topK` must be a positive integer\");\n\t\tthis.stopSequences = fields.stopSequences ?? this.stopSequences;\n\t\tthis.apiKey = fields.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_5__.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n\t\tif (!this.apiKey) throw new Error(\"Please set an API key for Google GenerativeAI in the environment variable GOOGLE_API_KEY or in the `apiKey` field of the ChatGoogleGenerativeAI constructor\");\n\t\tthis.safetySettings = fields.safetySettings ?? this.safetySettings;\n\t\tif (this.safetySettings && this.safetySettings.length > 0) {\n\t\t\tconst safetySettingsSet = new Set(this.safetySettings.map((s) => s.category));\n\t\t\tif (safetySettingsSet.size !== this.safetySettings.length) throw new Error(\"The categories in `safetySettings` array must be unique\");\n\t\t}\n\t\tthis.streaming = fields.streaming ?? this.streaming;\n\t\tthis.json = fields.json;\n\t\tthis.client = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_4__.GoogleGenerativeAI(this.apiKey).getGenerativeModel({\n\t\t\tmodel: this.model,\n\t\t\tsafetySettings: this.safetySettings,\n\t\t\tgenerationConfig: {\n\t\t\t\tstopSequences: this.stopSequences,\n\t\t\t\tmaxOutputTokens: this.maxOutputTokens,\n\t\t\t\ttemperature: this.temperature,\n\t\t\t\ttopP: this.topP,\n\t\t\t\ttopK: this.topK,\n\t\t\t\t...this.json ? { responseMimeType: \"application/json\" } : {}\n\t\t\t}\n\t\t}, {\n\t\t\tapiVersion: fields.apiVersion,\n\t\t\tbaseUrl: fields.baseUrl\n\t\t});\n\t\tthis.streamUsage = fields.streamUsage ?? this.streamUsage;\n\t}\n\tuseCachedContent(cachedContent, modelParams, requestOptions) {\n\t\tif (!this.apiKey) return;\n\t\tthis.client = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_4__.GoogleGenerativeAI(this.apiKey).getGenerativeModelFromCachedContent(cachedContent, modelParams, requestOptions);\n\t}\n\tget useSystemInstruction() {\n\t\treturn typeof this.convertSystemMessageToHumanContent === \"boolean\" ? !this.convertSystemMessageToHumanContent : this.computeUseSystemInstruction;\n\t}\n\tget computeUseSystemInstruction() {\n\t\tif (this.model === \"gemini-1.0-pro-001\") return false;\n\t\telse if (this.model.startsWith(\"gemini-pro-vision\")) return false;\n\t\telse if (this.model.startsWith(\"gemini-1.0-pro-vision\")) return false;\n\t\telse if (this.model === \"gemini-pro\") return false;\n\t\treturn true;\n\t}\n\tgetLsParams(options) {\n\t\treturn {\n\t\t\tls_provider: \"google_genai\",\n\t\t\tls_model_name: this.model,\n\t\t\tls_model_type: \"chat\",\n\t\t\tls_temperature: this.client.generationConfig.temperature,\n\t\t\tls_max_tokens: this.client.generationConfig.maxOutputTokens,\n\t\t\tls_stop: options.stop\n\t\t};\n\t}\n\t_combineLLMOutput() {\n\t\treturn [];\n\t}\n\t_llmType() {\n\t\treturn \"googlegenerativeai\";\n\t}\n\tbindTools(tools, kwargs) {\n\t\treturn this.withConfig({\n\t\t\ttools: (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_3__.convertToolsToGenAI)(tools)?.tools,\n\t\t\t...kwargs\n\t\t});\n\t}\n\tinvocationParams(options) {\n\t\tconst toolsAndConfig = options?.tools?.length ? (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_3__.convertToolsToGenAI)(options.tools, {\n\t\t\ttoolChoice: options.tool_choice,\n\t\t\tallowedFunctionNames: options.allowedFunctionNames\n\t\t}) : void 0;\n\t\tif (options?.responseSchema) {\n\t\t\tthis.client.generationConfig.responseSchema = options.responseSchema;\n\t\t\tthis.client.generationConfig.responseMimeType = \"application/json\";\n\t\t} else {\n\t\t\tthis.client.generationConfig.responseSchema = void 0;\n\t\t\tthis.client.generationConfig.responseMimeType = this.json ? \"application/json\" : void 0;\n\t\t}\n\t\treturn {\n\t\t\t...toolsAndConfig?.tools ? { tools: toolsAndConfig.tools } : {},\n\t\t\t...toolsAndConfig?.toolConfig ? { toolConfig: toolsAndConfig.toolConfig } : {}\n\t\t};\n\t}\n\tasync _generate(messages, options, runManager) {\n\t\tconst prompt = (0,_utils_common_js__WEBPACK_IMPORTED_MODULE_1__.convertBaseMessagesToContent)(messages, this._isMultimodalModel, this.useSystemInstruction);\n\t\tlet actualPrompt = prompt;\n\t\tif (prompt[0].role === \"system\") {\n\t\t\tconst [systemInstruction] = prompt;\n\t\t\tthis.client.systemInstruction = systemInstruction;\n\t\t\tactualPrompt = prompt.slice(1);\n\t\t}\n\t\tconst parameters = this.invocationParams(options);\n\t\tif (this.streaming) {\n\t\t\tconst tokenUsage = {};\n\t\t\tconst stream = this._streamResponseChunks(messages, options, runManager);\n\t\t\tconst finalChunks = {};\n\t\t\tfor await (const chunk of stream) {\n\t\t\t\tconst index = chunk.generationInfo?.completion ?? 0;\n\t\t\t\tif (finalChunks[index] === void 0) finalChunks[index] = chunk;\n\t\t\t\telse finalChunks[index] = finalChunks[index].concat(chunk);\n\t\t\t}\n\t\t\tconst generations = Object.entries(finalChunks).sort(([aKey], [bKey]) => parseInt(aKey, 10) - parseInt(bKey, 10)).map(([_, value]) => value);\n\t\t\treturn {\n\t\t\t\tgenerations,\n\t\t\t\tllmOutput: { estimatedTokenUsage: tokenUsage }\n\t\t\t};\n\t\t}\n\t\tconst res = await this.completionWithRetry({\n\t\t\t...parameters,\n\t\t\tcontents: actualPrompt\n\t\t});\n\t\tlet usageMetadata;\n\t\tif (\"usageMetadata\" in res.response) {\n\t\t\tconst genAIUsageMetadata = res.response.usageMetadata;\n\t\t\tusageMetadata = {\n\t\t\t\tinput_tokens: genAIUsageMetadata.promptTokenCount ?? 0,\n\t\t\t\toutput_tokens: genAIUsageMetadata.candidatesTokenCount ?? 0,\n\t\t\t\ttotal_tokens: genAIUsageMetadata.totalTokenCount ?? 0\n\t\t\t};\n\t\t}\n\t\tconst generationResult = (0,_utils_common_js__WEBPACK_IMPORTED_MODULE_1__.mapGenerateContentResultToChatResult)(res.response, { usageMetadata });\n\t\tif (generationResult.generations?.length > 0) await runManager?.handleLLMNewToken(generationResult.generations[0]?.text ?? \"\");\n\t\treturn generationResult;\n\t}\n\tasync *_streamResponseChunks(messages, options, runManager) {\n\t\tconst prompt = (0,_utils_common_js__WEBPACK_IMPORTED_MODULE_1__.convertBaseMessagesToContent)(messages, this._isMultimodalModel, this.useSystemInstruction);\n\t\tlet actualPrompt = prompt;\n\t\tif (prompt[0].role === \"system\") {\n\t\t\tconst [systemInstruction] = prompt;\n\t\t\tthis.client.systemInstruction = systemInstruction;\n\t\t\tactualPrompt = prompt.slice(1);\n\t\t}\n\t\tconst parameters = this.invocationParams(options);\n\t\tconst request = {\n\t\t\t...parameters,\n\t\t\tcontents: actualPrompt\n\t\t};\n\t\tconst stream = await this.caller.callWithOptions({ signal: options?.signal }, async () => {\n\t\t\tconst { stream: stream$1 } = await this.client.generateContentStream(request);\n\t\t\treturn stream$1;\n\t\t});\n\t\tlet usageMetadata;\n\t\tlet prevPromptTokenCount = 0;\n\t\tlet prevCandidatesTokenCount = 0;\n\t\tlet prevTotalTokenCount = 0;\n\t\tlet index = 0;\n\t\tfor await (const response of stream) {\n\t\t\tif (\"usageMetadata\" in response && response.usageMetadata !== void 0 && this.streamUsage !== false && options.streamUsage !== false) {\n\t\t\t\tusageMetadata = {\n\t\t\t\t\tinput_tokens: response.usageMetadata.promptTokenCount ?? 0,\n\t\t\t\t\toutput_tokens: response.usageMetadata.candidatesTokenCount ?? 0,\n\t\t\t\t\ttotal_tokens: response.usageMetadata.totalTokenCount ?? 0\n\t\t\t\t};\n\t\t\t\tconst newPromptTokenCount = response.usageMetadata.promptTokenCount ?? 0;\n\t\t\t\tusageMetadata.input_tokens = Math.max(0, newPromptTokenCount - prevPromptTokenCount);\n\t\t\t\tprevPromptTokenCount = newPromptTokenCount;\n\t\t\t\tconst newCandidatesTokenCount = response.usageMetadata.candidatesTokenCount ?? 0;\n\t\t\t\tusageMetadata.output_tokens = Math.max(0, newCandidatesTokenCount - prevCandidatesTokenCount);\n\t\t\t\tprevCandidatesTokenCount = newCandidatesTokenCount;\n\t\t\t\tconst newTotalTokenCount = response.usageMetadata.totalTokenCount ?? 0;\n\t\t\t\tusageMetadata.total_tokens = Math.max(0, newTotalTokenCount - prevTotalTokenCount);\n\t\t\t\tprevTotalTokenCount = newTotalTokenCount;\n\t\t\t}\n\t\t\tconst chunk = (0,_utils_common_js__WEBPACK_IMPORTED_MODULE_1__.convertResponseContentToChatGenerationChunk)(response, {\n\t\t\t\tusageMetadata,\n\t\t\t\tindex\n\t\t\t});\n\t\t\tindex += 1;\n\t\t\tif (!chunk) continue;\n\t\t\tyield chunk;\n\t\t\tawait runManager?.handleLLMNewToken(chunk.text ?? \"\");\n\t\t}\n\t}\n\tasync completionWithRetry(request, options) {\n\t\treturn this.caller.callWithOptions({ signal: options?.signal }, async () => {\n\t\t\ttry {\n\t\t\t\treturn await this.client.generateContent(request);\n\t\t\t} catch (e) {\n\t\t\t\tif (e.message?.includes(\"400 Bad Request\")) e.status = 400;\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t});\n\t}\n\twithStructuredOutput(outputSchema, config) {\n\t\tconst schema = outputSchema;\n\t\tconst name = config?.name;\n\t\tconst method = config?.method;\n\t\tconst includeRaw = config?.includeRaw;\n\t\tif (method === \"jsonMode\") throw new Error(`ChatGoogleGenerativeAI only supports \"jsonSchema\" or \"functionCalling\" as a method.`);\n\t\tlet llm;\n\t\tlet outputParser;\n\t\tif (method === \"functionCalling\") {\n\t\t\tlet functionName = name ?? \"extract\";\n\t\t\tlet tools;\n\t\t\tif ((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_8__.isInteropZodSchema)(schema)) {\n\t\t\t\tconst jsonSchema = (0,_utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__.schemaToGenerativeAIParameters)(schema);\n\t\t\t\ttools = [{ functionDeclarations: [{\n\t\t\t\t\tname: functionName,\n\t\t\t\t\tdescription: jsonSchema.description ?? \"A function available to call.\",\n\t\t\t\t\tparameters: jsonSchema\n\t\t\t\t}] }];\n\t\t\t\toutputParser = new _output_parsers_js__WEBPACK_IMPORTED_MODULE_2__.GoogleGenerativeAIToolsOutputParser({\n\t\t\t\t\treturnSingle: true,\n\t\t\t\t\tkeyName: functionName,\n\t\t\t\t\tzodSchema: schema\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet geminiFunctionDefinition;\n\t\t\t\tif (typeof schema.name === \"string\" && typeof schema.parameters === \"object\" && schema.parameters != null) {\n\t\t\t\t\tgeminiFunctionDefinition = schema;\n\t\t\t\t\tgeminiFunctionDefinition.parameters = (0,_utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__.removeAdditionalProperties)(schema.parameters);\n\t\t\t\t\tfunctionName = schema.name;\n\t\t\t\t} else geminiFunctionDefinition = {\n\t\t\t\t\tname: functionName,\n\t\t\t\t\tdescription: schema.description ?? \"\",\n\t\t\t\t\tparameters: (0,_utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__.removeAdditionalProperties)(schema)\n\t\t\t\t};\n\t\t\t\ttools = [{ functionDeclarations: [geminiFunctionDefinition] }];\n\t\t\t\toutputParser = new _output_parsers_js__WEBPACK_IMPORTED_MODULE_2__.GoogleGenerativeAIToolsOutputParser({\n\t\t\t\t\treturnSingle: true,\n\t\t\t\t\tkeyName: functionName\n\t\t\t\t});\n\t\t\t}\n\t\t\tllm = this.bindTools(tools).withConfig({ allowedFunctionNames: [functionName] });\n\t\t} else {\n\t\t\tconst jsonSchema = (0,_utils_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__.schemaToGenerativeAIParameters)(schema);\n\t\t\tllm = this.withConfig({ responseSchema: jsonSchema });\n\t\t\toutputParser = new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_9__.JsonOutputParser();\n\t\t}\n\t\tif (!includeRaw) return llm.pipe(outputParser).withConfig({ runName: \"ChatGoogleGenerativeAIStructuredOutput\" });\n\t\tconst parserAssign = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_7__.RunnablePassthrough.assign({ parsed: (input, config$1) => outputParser.invoke(input.raw, config$1) });\n\t\tconst parserNone = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_7__.RunnablePassthrough.assign({ parsed: () => null });\n\t\tconst parsedWithFallback = parserAssign.withFallbacks({ fallbacks: [parserNone] });\n\t\treturn _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_7__.RunnableSequence.from([{ raw: llm }, parsedWithFallback]).withConfig({ runName: \"StructuredOutputRunnable\" });\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=chat_models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/embeddings.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/embeddings.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleGenerativeAIEmbeddings: () => (/* binding */ GoogleGenerativeAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/.pnpm/@google+generative-ai@0.24.1/node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/embeddings.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/chunk_array.js\");\n\n\n\n\n\n//#region src/embeddings.ts\n/**\n* Class that extends the Embeddings class and provides methods for\n* generating embeddings using the Google Palm API.\n* @example\n* ```typescript\n* const model = new GoogleGenerativeAIEmbeddings({\n*   apiKey: \"<YOUR API KEY>\",\n*   modelName: \"embedding-001\",\n* });\n*\n* // Embed a single query\n* const res = await model.embedQuery(\n*   \"What would be a good company name for a company that makes colorful socks?\"\n* );\n* console.log({ res });\n*\n* // Embed multiple documents\n* const documentRes = await model.embedDocuments([\"Hello world\", \"Bye bye\"]);\n* console.log({ documentRes });\n* ```\n*/\nvar GoogleGenerativeAIEmbeddings = class extends _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_2__.Embeddings {\n\tapiKey;\n\tmodelName = \"embedding-001\";\n\tmodel = \"embedding-001\";\n\ttaskType;\n\ttitle;\n\tstripNewLines = true;\n\tmaxBatchSize = 100;\n\tclient;\n\tconstructor(fields) {\n\t\tsuper(fields ?? {});\n\t\tthis.modelName = fields?.model?.replace(/^models\\//, \"\") ?? fields?.modelName?.replace(/^models\\//, \"\") ?? this.modelName;\n\t\tthis.model = this.modelName;\n\t\tthis.taskType = fields?.taskType ?? this.taskType;\n\t\tthis.title = fields?.title ?? this.title;\n\t\tif (this.title && this.taskType !== \"RETRIEVAL_DOCUMENT\") throw new Error(\"title can only be sepcified with TaskType.RETRIEVAL_DOCUMENT\");\n\t\tthis.apiKey = fields?.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"GOOGLE_API_KEY\");\n\t\tif (!this.apiKey) throw new Error(\"Please set an API key for Google GenerativeAI in the environmentb variable GOOGLE_API_KEY or in the `apiKey` field of the GoogleGenerativeAIEmbeddings constructor\");\n\t\tthis.client = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(this.apiKey).getGenerativeModel({ model: this.model }, { baseUrl: fields?.baseUrl });\n\t}\n\t_convertToContent(text) {\n\t\tconst cleanedText = this.stripNewLines ? text.replace(/\\n/g, \" \") : text;\n\t\treturn {\n\t\t\tcontent: {\n\t\t\t\trole: \"user\",\n\t\t\t\tparts: [{ text: cleanedText }]\n\t\t\t},\n\t\t\ttaskType: this.taskType,\n\t\t\ttitle: this.title\n\t\t};\n\t}\n\tasync _embedQueryContent(text) {\n\t\tconst req = this._convertToContent(text);\n\t\tconst res = await this.client.embedContent(req);\n\t\treturn res.embedding.values ?? [];\n\t}\n\tasync _embedDocumentsContent(documents) {\n\t\tconst batchEmbedChunks = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_3__.chunkArray)(documents, this.maxBatchSize);\n\t\tconst batchEmbedRequests = batchEmbedChunks.map((chunk) => ({ requests: chunk.map((doc) => this._convertToContent(doc)) }));\n\t\tconst responses = await Promise.allSettled(batchEmbedRequests.map((req) => this.client.batchEmbedContents(req)));\n\t\tconst embeddings = responses.flatMap((res, idx) => {\n\t\t\tif (res.status === \"fulfilled\") return res.value.embeddings.map((e) => e.values || []);\n\t\t\telse return Array(batchEmbedChunks[idx].length).fill([]);\n\t\t});\n\t\treturn embeddings;\n\t}\n\t/**\n\t* Method that takes a document as input and returns a promise that\n\t* resolves to an embedding for the document. It calls the _embedText\n\t* method with the document as the input.\n\t* @param document Document for which to generate an embedding.\n\t* @returns Promise that resolves to an embedding for the input document.\n\t*/\n\tembedQuery(document) {\n\t\treturn this.caller.call(this._embedQueryContent.bind(this), document);\n\t}\n\t/**\n\t* Method that takes an array of documents as input and returns a promise\n\t* that resolves to a 2D array of embeddings for each document. It calls\n\t* the _embedText method for each document in the array.\n\t* @param documents Array of documents for which to generate embeddings.\n\t* @returns Promise that resolves to a 2D array of embeddings for each input document.\n\t*/\n\tembedDocuments(documents) {\n\t\treturn this.caller.call(this._embedDocumentsContent.bind(this), documents);\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=embeddings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitnb29nbGUtZ2VuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfXy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC9lbWJlZGRpbmdzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJEO0FBQ1E7QUFDWDtBQUNPOztBQUUvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixLQUFLO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQSxpREFBaUQsa0VBQVU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsaUZBQXNCO0FBQ3hEO0FBQ0Esb0JBQW9CLHFFQUFrQixtQ0FBbUMsbUJBQW1CLElBQUksMEJBQTBCO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbUJBQW1CO0FBQ2pDLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw2RUFBVTtBQUNyQyxnRUFBZ0UsMkRBQTJEO0FBQzNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDd0M7QUFDeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK2dvb2dsZS1nZW5haUAxLjAuMF9AbGFuZ2NoYWluK2NvcmVAMS4wLjFfb3BlbmFpQDYuNy4wX3dzQDguMTguM196b2RAMy4yNS43Nl9fL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9kaXN0L2VtYmVkZGluZ3MuanM/OWE1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHb29nbGVHZW5lcmF0aXZlQUkgfSBmcm9tIFwiQGdvb2dsZS9nZW5lcmF0aXZlLWFpXCI7XG5pbXBvcnQgeyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS91dGlscy9lbnZcIjtcbmltcG9ydCB7IEVtYmVkZGluZ3MgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3NcIjtcbmltcG9ydCB7IGNodW5rQXJyYXkgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2NodW5rX2FycmF5XCI7XG5cbi8vI3JlZ2lvbiBzcmMvZW1iZWRkaW5ncy50c1xuLyoqXG4qIENsYXNzIHRoYXQgZXh0ZW5kcyB0aGUgRW1iZWRkaW5ncyBjbGFzcyBhbmQgcHJvdmlkZXMgbWV0aG9kcyBmb3JcbiogZ2VuZXJhdGluZyBlbWJlZGRpbmdzIHVzaW5nIHRoZSBHb29nbGUgUGFsbSBBUEkuXG4qIEBleGFtcGxlXG4qIGBgYHR5cGVzY3JpcHRcbiogY29uc3QgbW9kZWwgPSBuZXcgR29vZ2xlR2VuZXJhdGl2ZUFJRW1iZWRkaW5ncyh7XG4qICAgYXBpS2V5OiBcIjxZT1VSIEFQSSBLRVk+XCIsXG4qICAgbW9kZWxOYW1lOiBcImVtYmVkZGluZy0wMDFcIixcbiogfSk7XG4qXG4qIC8vIEVtYmVkIGEgc2luZ2xlIHF1ZXJ5XG4qIGNvbnN0IHJlcyA9IGF3YWl0IG1vZGVsLmVtYmVkUXVlcnkoXG4qICAgXCJXaGF0IHdvdWxkIGJlIGEgZ29vZCBjb21wYW55IG5hbWUgZm9yIGEgY29tcGFueSB0aGF0IG1ha2VzIGNvbG9yZnVsIHNvY2tzP1wiXG4qICk7XG4qIGNvbnNvbGUubG9nKHsgcmVzIH0pO1xuKlxuKiAvLyBFbWJlZCBtdWx0aXBsZSBkb2N1bWVudHNcbiogY29uc3QgZG9jdW1lbnRSZXMgPSBhd2FpdCBtb2RlbC5lbWJlZERvY3VtZW50cyhbXCJIZWxsbyB3b3JsZFwiLCBcIkJ5ZSBieWVcIl0pO1xuKiBjb25zb2xlLmxvZyh7IGRvY3VtZW50UmVzIH0pO1xuKiBgYGBcbiovXG52YXIgR29vZ2xlR2VuZXJhdGl2ZUFJRW1iZWRkaW5ncyA9IGNsYXNzIGV4dGVuZHMgRW1iZWRkaW5ncyB7XG5cdGFwaUtleTtcblx0bW9kZWxOYW1lID0gXCJlbWJlZGRpbmctMDAxXCI7XG5cdG1vZGVsID0gXCJlbWJlZGRpbmctMDAxXCI7XG5cdHRhc2tUeXBlO1xuXHR0aXRsZTtcblx0c3RyaXBOZXdMaW5lcyA9IHRydWU7XG5cdG1heEJhdGNoU2l6ZSA9IDEwMDtcblx0Y2xpZW50O1xuXHRjb25zdHJ1Y3RvcihmaWVsZHMpIHtcblx0XHRzdXBlcihmaWVsZHMgPz8ge30pO1xuXHRcdHRoaXMubW9kZWxOYW1lID0gZmllbGRzPy5tb2RlbD8ucmVwbGFjZSgvXm1vZGVsc1xcLy8sIFwiXCIpID8/IGZpZWxkcz8ubW9kZWxOYW1lPy5yZXBsYWNlKC9ebW9kZWxzXFwvLywgXCJcIikgPz8gdGhpcy5tb2RlbE5hbWU7XG5cdFx0dGhpcy5tb2RlbCA9IHRoaXMubW9kZWxOYW1lO1xuXHRcdHRoaXMudGFza1R5cGUgPSBmaWVsZHM/LnRhc2tUeXBlID8/IHRoaXMudGFza1R5cGU7XG5cdFx0dGhpcy50aXRsZSA9IGZpZWxkcz8udGl0bGUgPz8gdGhpcy50aXRsZTtcblx0XHRpZiAodGhpcy50aXRsZSAmJiB0aGlzLnRhc2tUeXBlICE9PSBcIlJFVFJJRVZBTF9ET0NVTUVOVFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJ0aXRsZSBjYW4gb25seSBiZSBzZXBjaWZpZWQgd2l0aCBUYXNrVHlwZS5SRVRSSUVWQUxfRE9DVU1FTlRcIik7XG5cdFx0dGhpcy5hcGlLZXkgPSBmaWVsZHM/LmFwaUtleSA/PyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiR09PR0xFX0FQSV9LRVlcIik7XG5cdFx0aWYgKCF0aGlzLmFwaUtleSkgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHNldCBhbiBBUEkga2V5IGZvciBHb29nbGUgR2VuZXJhdGl2ZUFJIGluIHRoZSBlbnZpcm9ubWVudGIgdmFyaWFibGUgR09PR0xFX0FQSV9LRVkgb3IgaW4gdGhlIGBhcGlLZXlgIGZpZWxkIG9mIHRoZSBHb29nbGVHZW5lcmF0aXZlQUlFbWJlZGRpbmdzIGNvbnN0cnVjdG9yXCIpO1xuXHRcdHRoaXMuY2xpZW50ID0gbmV3IEdvb2dsZUdlbmVyYXRpdmVBSSh0aGlzLmFwaUtleSkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IHRoaXMubW9kZWwgfSwgeyBiYXNlVXJsOiBmaWVsZHM/LmJhc2VVcmwgfSk7XG5cdH1cblx0X2NvbnZlcnRUb0NvbnRlbnQodGV4dCkge1xuXHRcdGNvbnN0IGNsZWFuZWRUZXh0ID0gdGhpcy5zdHJpcE5ld0xpbmVzID8gdGV4dC5yZXBsYWNlKC9cXG4vZywgXCIgXCIpIDogdGV4dDtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29udGVudDoge1xuXHRcdFx0XHRyb2xlOiBcInVzZXJcIixcblx0XHRcdFx0cGFydHM6IFt7IHRleHQ6IGNsZWFuZWRUZXh0IH1dXG5cdFx0XHR9LFxuXHRcdFx0dGFza1R5cGU6IHRoaXMudGFza1R5cGUsXG5cdFx0XHR0aXRsZTogdGhpcy50aXRsZVxuXHRcdH07XG5cdH1cblx0YXN5bmMgX2VtYmVkUXVlcnlDb250ZW50KHRleHQpIHtcblx0XHRjb25zdCByZXEgPSB0aGlzLl9jb252ZXJ0VG9Db250ZW50KHRleHQpO1xuXHRcdGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LmVtYmVkQ29udGVudChyZXEpO1xuXHRcdHJldHVybiByZXMuZW1iZWRkaW5nLnZhbHVlcyA/PyBbXTtcblx0fVxuXHRhc3luYyBfZW1iZWREb2N1bWVudHNDb250ZW50KGRvY3VtZW50cykge1xuXHRcdGNvbnN0IGJhdGNoRW1iZWRDaHVua3MgPSBjaHVua0FycmF5KGRvY3VtZW50cywgdGhpcy5tYXhCYXRjaFNpemUpO1xuXHRcdGNvbnN0IGJhdGNoRW1iZWRSZXF1ZXN0cyA9IGJhdGNoRW1iZWRDaHVua3MubWFwKChjaHVuaykgPT4gKHsgcmVxdWVzdHM6IGNodW5rLm1hcCgoZG9jKSA9PiB0aGlzLl9jb252ZXJ0VG9Db250ZW50KGRvYykpIH0pKTtcblx0XHRjb25zdCByZXNwb25zZXMgPSBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoYmF0Y2hFbWJlZFJlcXVlc3RzLm1hcCgocmVxKSA9PiB0aGlzLmNsaWVudC5iYXRjaEVtYmVkQ29udGVudHMocmVxKSkpO1xuXHRcdGNvbnN0IGVtYmVkZGluZ3MgPSByZXNwb25zZXMuZmxhdE1hcCgocmVzLCBpZHgpID0+IHtcblx0XHRcdGlmIChyZXMuc3RhdHVzID09PSBcImZ1bGZpbGxlZFwiKSByZXR1cm4gcmVzLnZhbHVlLmVtYmVkZGluZ3MubWFwKChlKSA9PiBlLnZhbHVlcyB8fCBbXSk7XG5cdFx0XHRlbHNlIHJldHVybiBBcnJheShiYXRjaEVtYmVkQ2h1bmtzW2lkeF0ubGVuZ3RoKS5maWxsKFtdKTtcblx0XHR9KTtcblx0XHRyZXR1cm4gZW1iZWRkaW5ncztcblx0fVxuXHQvKipcblx0KiBNZXRob2QgdGhhdCB0YWtlcyBhIGRvY3VtZW50IGFzIGlucHV0IGFuZCByZXR1cm5zIGEgcHJvbWlzZSB0aGF0XG5cdCogcmVzb2x2ZXMgdG8gYW4gZW1iZWRkaW5nIGZvciB0aGUgZG9jdW1lbnQuIEl0IGNhbGxzIHRoZSBfZW1iZWRUZXh0XG5cdCogbWV0aG9kIHdpdGggdGhlIGRvY3VtZW50IGFzIHRoZSBpbnB1dC5cblx0KiBAcGFyYW0gZG9jdW1lbnQgRG9jdW1lbnQgZm9yIHdoaWNoIHRvIGdlbmVyYXRlIGFuIGVtYmVkZGluZy5cblx0KiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gZW1iZWRkaW5nIGZvciB0aGUgaW5wdXQgZG9jdW1lbnQuXG5cdCovXG5cdGVtYmVkUXVlcnkoZG9jdW1lbnQpIHtcblx0XHRyZXR1cm4gdGhpcy5jYWxsZXIuY2FsbCh0aGlzLl9lbWJlZFF1ZXJ5Q29udGVudC5iaW5kKHRoaXMpLCBkb2N1bWVudCk7XG5cdH1cblx0LyoqXG5cdCogTWV0aG9kIHRoYXQgdGFrZXMgYW4gYXJyYXkgb2YgZG9jdW1lbnRzIGFzIGlucHV0IGFuZCByZXR1cm5zIGEgcHJvbWlzZVxuXHQqIHRoYXQgcmVzb2x2ZXMgdG8gYSAyRCBhcnJheSBvZiBlbWJlZGRpbmdzIGZvciBlYWNoIGRvY3VtZW50LiBJdCBjYWxsc1xuXHQqIHRoZSBfZW1iZWRUZXh0IG1ldGhvZCBmb3IgZWFjaCBkb2N1bWVudCBpbiB0aGUgYXJyYXkuXG5cdCogQHBhcmFtIGRvY3VtZW50cyBBcnJheSBvZiBkb2N1bWVudHMgZm9yIHdoaWNoIHRvIGdlbmVyYXRlIGVtYmVkZGluZ3MuXG5cdCogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgMkQgYXJyYXkgb2YgZW1iZWRkaW5ncyBmb3IgZWFjaCBpbnB1dCBkb2N1bWVudC5cblx0Ki9cblx0ZW1iZWREb2N1bWVudHMoZG9jdW1lbnRzKSB7XG5cdFx0cmV0dXJuIHRoaXMuY2FsbGVyLmNhbGwodGhpcy5fZW1iZWREb2N1bWVudHNDb250ZW50LmJpbmQodGhpcyksIGRvY3VtZW50cyk7XG5cdH1cbn07XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJRW1iZWRkaW5ncyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1iZWRkaW5ncy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/index.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/index.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGoogleGenerativeAI: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_0__.ChatGoogleGenerativeAI),\n/* harmony export */   GoogleGenerativeAIEmbeddings: () => (/* reexport safe */ _embeddings_js__WEBPACK_IMPORTED_MODULE_1__.GoogleGenerativeAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat_models.js */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/chat_models.js\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embeddings.js */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/embeddings.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitnb29nbGUtZ2VuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfXy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBEO0FBQ0siLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK2dvb2dsZS1nZW5haUAxLjAuMF9AbGFuZ2NoYWluK2NvcmVAMS4wLjFfb3BlbmFpQDYuNy4wX3dzQDguMTguM196b2RAMy4yNS43Nl9fL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dvb2dsZS1nZW5haS9kaXN0L2luZGV4LmpzPzI2NTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhdEdvb2dsZUdlbmVyYXRpdmVBSSB9IGZyb20gXCIuL2NoYXRfbW9kZWxzLmpzXCI7XG5pbXBvcnQgeyBHb29nbGVHZW5lcmF0aXZlQUlFbWJlZGRpbmdzIH0gZnJvbSBcIi4vZW1iZWRkaW5ncy5qc1wiO1xuXG5leHBvcnQgeyBDaGF0R29vZ2xlR2VuZXJhdGl2ZUFJLCBHb29nbGVHZW5lcmF0aXZlQUlFbWJlZGRpbmdzIH07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/output_parsers.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/output_parsers.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleGenerativeAIToolsOutputParser: () => (/* binding */ GoogleGenerativeAIToolsOutputParser)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/types/index.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/output_parsers/index.js\");\n\n\n\n//#region src/output_parsers.ts\nvar GoogleGenerativeAIToolsOutputParser = class extends _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.BaseLLMOutputParser {\n\tstatic lc_name() {\n\t\treturn \"GoogleGenerativeAIToolsOutputParser\";\n\t}\n\tlc_namespace = [\n\t\t\"langchain\",\n\t\t\"google_genai\",\n\t\t\"output_parsers\"\n\t];\n\treturnId = false;\n\t/** The type of tool calls to return. */\n\tkeyName;\n\t/** Whether to return only the first tool call. */\n\treturnSingle = false;\n\tzodSchema;\n\tconstructor(params) {\n\t\tsuper(params);\n\t\tthis.keyName = params.keyName;\n\t\tthis.returnSingle = params.returnSingle ?? this.returnSingle;\n\t\tthis.zodSchema = params.zodSchema;\n\t}\n\tasync _validateResult(result) {\n\t\tif (this.zodSchema === void 0) return result;\n\t\tconst zodParsedResult = await (0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__.interopSafeParseAsync)(this.zodSchema, result);\n\t\tif (zodParsedResult.success) return zodParsedResult.data;\n\t\telse throw new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_1__.OutputParserException(`Failed to parse. Text: \"${JSON.stringify(result, null, 2)}\". Error: ${JSON.stringify(zodParsedResult.error.issues)}`, JSON.stringify(result, null, 2));\n\t}\n\tasync parseResult(generations) {\n\t\tconst tools = generations.flatMap((generation) => {\n\t\t\tconst { message } = generation;\n\t\t\tif (!(\"tool_calls\" in message) || !Array.isArray(message.tool_calls)) return [];\n\t\t\treturn message.tool_calls;\n\t\t});\n\t\tif (tools[0] === void 0) throw new Error(\"No parseable tool calls provided to GoogleGenerativeAIToolsOutputParser.\");\n\t\tconst [tool] = tools;\n\t\tconst validatedResult = await this._validateResult(tool.args);\n\t\treturn validatedResult;\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=output_parsers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitnb29nbGUtZ2VuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfXy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC9vdXRwdXRfcGFyc2Vycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0U7QUFDd0I7O0FBRTVGO0FBQ0Esd0RBQXdELCtFQUFtQjtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxrRkFBcUI7QUFDckQ7QUFDQSxpQkFBaUIsaUZBQXFCLDRCQUE0QixnQ0FBZ0MsWUFBWSw2Q0FBNkM7QUFDM0o7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQytDO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnJvdXRlci1sYW5nZ3JhcGgvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitnb29nbGUtZ2VuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfXy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC9vdXRwdXRfcGFyc2Vycy5qcz9mYTg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludGVyb3BTYWZlUGFyc2VBc3luYyB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdXRpbHMvdHlwZXNcIjtcbmltcG9ydCB7IEJhc2VMTE1PdXRwdXRQYXJzZXIsIE91dHB1dFBhcnNlckV4Y2VwdGlvbiB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnNcIjtcblxuLy8jcmVnaW9uIHNyYy9vdXRwdXRfcGFyc2Vycy50c1xudmFyIEdvb2dsZUdlbmVyYXRpdmVBSVRvb2xzT3V0cHV0UGFyc2VyID0gY2xhc3MgZXh0ZW5kcyBCYXNlTExNT3V0cHV0UGFyc2VyIHtcblx0c3RhdGljIGxjX25hbWUoKSB7XG5cdFx0cmV0dXJuIFwiR29vZ2xlR2VuZXJhdGl2ZUFJVG9vbHNPdXRwdXRQYXJzZXJcIjtcblx0fVxuXHRsY19uYW1lc3BhY2UgPSBbXG5cdFx0XCJsYW5nY2hhaW5cIixcblx0XHRcImdvb2dsZV9nZW5haVwiLFxuXHRcdFwib3V0cHV0X3BhcnNlcnNcIlxuXHRdO1xuXHRyZXR1cm5JZCA9IGZhbHNlO1xuXHQvKiogVGhlIHR5cGUgb2YgdG9vbCBjYWxscyB0byByZXR1cm4uICovXG5cdGtleU5hbWU7XG5cdC8qKiBXaGV0aGVyIHRvIHJldHVybiBvbmx5IHRoZSBmaXJzdCB0b29sIGNhbGwuICovXG5cdHJldHVyblNpbmdsZSA9IGZhbHNlO1xuXHR6b2RTY2hlbWE7XG5cdGNvbnN0cnVjdG9yKHBhcmFtcykge1xuXHRcdHN1cGVyKHBhcmFtcyk7XG5cdFx0dGhpcy5rZXlOYW1lID0gcGFyYW1zLmtleU5hbWU7XG5cdFx0dGhpcy5yZXR1cm5TaW5nbGUgPSBwYXJhbXMucmV0dXJuU2luZ2xlID8/IHRoaXMucmV0dXJuU2luZ2xlO1xuXHRcdHRoaXMuem9kU2NoZW1hID0gcGFyYW1zLnpvZFNjaGVtYTtcblx0fVxuXHRhc3luYyBfdmFsaWRhdGVSZXN1bHQocmVzdWx0KSB7XG5cdFx0aWYgKHRoaXMuem9kU2NoZW1hID09PSB2b2lkIDApIHJldHVybiByZXN1bHQ7XG5cdFx0Y29uc3Qgem9kUGFyc2VkUmVzdWx0ID0gYXdhaXQgaW50ZXJvcFNhZmVQYXJzZUFzeW5jKHRoaXMuem9kU2NoZW1hLCByZXN1bHQpO1xuXHRcdGlmICh6b2RQYXJzZWRSZXN1bHQuc3VjY2VzcykgcmV0dXJuIHpvZFBhcnNlZFJlc3VsdC5kYXRhO1xuXHRcdGVsc2UgdGhyb3cgbmV3IE91dHB1dFBhcnNlckV4Y2VwdGlvbihgRmFpbGVkIHRvIHBhcnNlLiBUZXh0OiBcIiR7SlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKX1cIi4gRXJyb3I6ICR7SlNPTi5zdHJpbmdpZnkoem9kUGFyc2VkUmVzdWx0LmVycm9yLmlzc3Vlcyl9YCwgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKSk7XG5cdH1cblx0YXN5bmMgcGFyc2VSZXN1bHQoZ2VuZXJhdGlvbnMpIHtcblx0XHRjb25zdCB0b29scyA9IGdlbmVyYXRpb25zLmZsYXRNYXAoKGdlbmVyYXRpb24pID0+IHtcblx0XHRcdGNvbnN0IHsgbWVzc2FnZSB9ID0gZ2VuZXJhdGlvbjtcblx0XHRcdGlmICghKFwidG9vbF9jYWxsc1wiIGluIG1lc3NhZ2UpIHx8ICFBcnJheS5pc0FycmF5KG1lc3NhZ2UudG9vbF9jYWxscykpIHJldHVybiBbXTtcblx0XHRcdHJldHVybiBtZXNzYWdlLnRvb2xfY2FsbHM7XG5cdFx0fSk7XG5cdFx0aWYgKHRvb2xzWzBdID09PSB2b2lkIDApIHRocm93IG5ldyBFcnJvcihcIk5vIHBhcnNlYWJsZSB0b29sIGNhbGxzIHByb3ZpZGVkIHRvIEdvb2dsZUdlbmVyYXRpdmVBSVRvb2xzT3V0cHV0UGFyc2VyLlwiKTtcblx0XHRjb25zdCBbdG9vbF0gPSB0b29scztcblx0XHRjb25zdCB2YWxpZGF0ZWRSZXN1bHQgPSBhd2FpdCB0aGlzLl92YWxpZGF0ZVJlc3VsdCh0b29sLmFyZ3MpO1xuXHRcdHJldHVybiB2YWxpZGF0ZWRSZXN1bHQ7XG5cdH1cbn07XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJVG9vbHNPdXRwdXRQYXJzZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dHB1dF9wYXJzZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/output_parsers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/common.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/common.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertBaseMessagesToContent: () => (/* binding */ convertBaseMessagesToContent),\n/* harmony export */   convertResponseContentToChatGenerationChunk: () => (/* binding */ convertResponseContentToChatGenerationChunk),\n/* harmony export */   convertToGenerativeAITools: () => (/* binding */ convertToGenerativeAITools),\n/* harmony export */   mapGenerateContentResultToChatResult: () => (/* binding */ mapGenerateContentResultToChatResult)\n/* harmony export */ });\n/* harmony import */ var _zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./zod_to_genai_parameters.js */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/function_calling.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm/v4.js\");\n\n\n\n\n\n\n\n//#region src/utils/common.ts\nfunction getMessageAuthor(message) {\n\tconst type = message._getType();\n\tif (_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.ChatMessage.isInstance(message)) return message.role;\n\tif (type === \"tool\") return type;\n\treturn message.name ?? type;\n}\n/**\n* Maps a message type to a Google Generative AI chat author.\n* @param message The message to map.\n* @param model The model to use for mapping.\n* @returns The message type mapped to a Google Generative AI chat author.\n*/\nfunction convertAuthorToRole(author) {\n\tswitch (author) {\n\t\tcase \"supervisor\":\n\t\tcase \"ai\":\n\t\tcase \"model\": return \"model\";\n\t\tcase \"system\": return \"system\";\n\t\tcase \"human\": return \"user\";\n\t\tcase \"tool\":\n\t\tcase \"function\": return \"function\";\n\t\tdefault: throw new Error(`Unknown / unsupported author: ${author}`);\n\t}\n}\nfunction messageContentMedia(content) {\n\tif (\"mimeType\" in content && \"data\" in content) return { inlineData: {\n\t\tmimeType: content.mimeType,\n\t\tdata: content.data\n\t} };\n\tif (\"mimeType\" in content && \"fileUri\" in content) return { fileData: {\n\t\tmimeType: content.mimeType,\n\t\tfileUri: content.fileUri\n\t} };\n\tthrow new Error(\"Invalid media content\");\n}\nfunction inferToolNameFromPreviousMessages(message, previousMessages) {\n\treturn previousMessages.map((msg) => {\n\t\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.isAIMessage)(msg)) return msg.tool_calls ?? [];\n\t\treturn [];\n\t}).flat().find((toolCall) => {\n\t\treturn toolCall.id === message.tool_call_id;\n\t})?.name;\n}\nfunction _getStandardContentBlockConverter(isMultimodalModel) {\n\tconst standardContentBlockConverter = {\n\t\tproviderName: \"Google Gemini\",\n\t\tfromStandardTextBlock(block) {\n\t\t\treturn { text: block.text };\n\t\t},\n\t\tfromStandardImageBlock(block) {\n\t\t\tif (!isMultimodalModel) throw new Error(\"This model does not support images\");\n\t\t\tif (block.source_type === \"url\") {\n\t\t\t\tconst data = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.parseBase64DataUrl)({ dataUrl: block.url });\n\t\t\t\tif (data) return { inlineData: {\n\t\t\t\t\tmimeType: data.mime_type,\n\t\t\t\t\tdata: data.data\n\t\t\t\t} };\n\t\t\t\telse return { fileData: {\n\t\t\t\t\tmimeType: block.mime_type ?? \"\",\n\t\t\t\t\tfileUri: block.url\n\t\t\t\t} };\n\t\t\t}\n\t\t\tif (block.source_type === \"base64\") return { inlineData: {\n\t\t\t\tmimeType: block.mime_type ?? \"\",\n\t\t\t\tdata: block.data\n\t\t\t} };\n\t\t\tthrow new Error(`Unsupported source type: ${block.source_type}`);\n\t\t},\n\t\tfromStandardAudioBlock(block) {\n\t\t\tif (!isMultimodalModel) throw new Error(\"This model does not support audio\");\n\t\t\tif (block.source_type === \"url\") {\n\t\t\t\tconst data = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.parseBase64DataUrl)({ dataUrl: block.url });\n\t\t\t\tif (data) return { inlineData: {\n\t\t\t\t\tmimeType: data.mime_type,\n\t\t\t\t\tdata: data.data\n\t\t\t\t} };\n\t\t\t\telse return { fileData: {\n\t\t\t\t\tmimeType: block.mime_type ?? \"\",\n\t\t\t\t\tfileUri: block.url\n\t\t\t\t} };\n\t\t\t}\n\t\t\tif (block.source_type === \"base64\") return { inlineData: {\n\t\t\t\tmimeType: block.mime_type ?? \"\",\n\t\t\t\tdata: block.data\n\t\t\t} };\n\t\t\tthrow new Error(`Unsupported source type: ${block.source_type}`);\n\t\t},\n\t\tfromStandardFileBlock(block) {\n\t\t\tif (!isMultimodalModel) throw new Error(\"This model does not support files\");\n\t\t\tif (block.source_type === \"text\") return { text: block.text };\n\t\t\tif (block.source_type === \"url\") {\n\t\t\t\tconst data = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.parseBase64DataUrl)({ dataUrl: block.url });\n\t\t\t\tif (data) return { inlineData: {\n\t\t\t\t\tmimeType: data.mime_type,\n\t\t\t\t\tdata: data.data\n\t\t\t\t} };\n\t\t\t\telse return { fileData: {\n\t\t\t\t\tmimeType: block.mime_type ?? \"\",\n\t\t\t\t\tfileUri: block.url\n\t\t\t\t} };\n\t\t\t}\n\t\t\tif (block.source_type === \"base64\") return { inlineData: {\n\t\t\t\tmimeType: block.mime_type ?? \"\",\n\t\t\t\tdata: block.data\n\t\t\t} };\n\t\t\tthrow new Error(`Unsupported source type: ${block.source_type}`);\n\t\t}\n\t};\n\treturn standardContentBlockConverter;\n}\nfunction _convertLangChainContentToPart(content, isMultimodalModel) {\n\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.isDataContentBlock)(content)) return (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.convertToProviderContentBlock)(content, _getStandardContentBlockConverter(isMultimodalModel));\n\tif (content.type === \"text\") return { text: content.text };\n\telse if (content.type === \"executableCode\") return { executableCode: content.executableCode };\n\telse if (content.type === \"codeExecutionResult\") return { codeExecutionResult: content.codeExecutionResult };\n\telse if (content.type === \"image_url\") {\n\t\tif (!isMultimodalModel) throw new Error(`This model does not support images`);\n\t\tlet source;\n\t\tif (typeof content.image_url === \"string\") source = content.image_url;\n\t\telse if (typeof content.image_url === \"object\" && \"url\" in content.image_url) source = content.image_url.url;\n\t\telse throw new Error(\"Please provide image as base64 encoded data URL\");\n\t\tconst [dm, data] = source.split(\",\");\n\t\tif (!dm.startsWith(\"data:\")) throw new Error(\"Please provide image as base64 encoded data URL\");\n\t\tconst [mimeType, encoding] = dm.replace(/^data:/, \"\").split(\";\");\n\t\tif (encoding !== \"base64\") throw new Error(\"Please provide image as base64 encoded data URL\");\n\t\treturn { inlineData: {\n\t\t\tdata,\n\t\t\tmimeType\n\t\t} };\n\t} else if (content.type === \"media\") return messageContentMedia(content);\n\telse if (content.type === \"tool_use\") return { functionCall: {\n\t\tname: content.name,\n\t\targs: content.input\n\t} };\n\telse if (content.type?.includes(\"/\") && content.type.split(\"/\").length === 2 && \"data\" in content && typeof content.data === \"string\") return { inlineData: {\n\t\tmimeType: content.type,\n\t\tdata: content.data\n\t} };\n\telse if (\"functionCall\" in content) return void 0;\n\telse if (\"type\" in content) throw new Error(`Unknown content type ${content.type}`);\n\telse throw new Error(`Unknown content ${JSON.stringify(content)}`);\n}\nfunction convertMessageContentToParts(message, isMultimodalModel, previousMessages) {\n\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message)) {\n\t\tconst messageName = message.name ?? inferToolNameFromPreviousMessages(message, previousMessages);\n\t\tif (messageName === void 0) throw new Error(`Google requires a tool name for each tool call response, and we could not infer a called tool name for ToolMessage \"${message.id}\" from your passed messages. Please populate a \"name\" field on that ToolMessage explicitly.`);\n\t\tconst result = Array.isArray(message.content) ? message.content.map((c) => _convertLangChainContentToPart(c, isMultimodalModel)).filter((p) => p !== void 0) : message.content;\n\t\tif (message.status === \"error\") return [{ functionResponse: {\n\t\t\tname: messageName,\n\t\t\tresponse: { error: { details: result } }\n\t\t} }];\n\t\treturn [{ functionResponse: {\n\t\t\tname: messageName,\n\t\t\tresponse: { result }\n\t\t} }];\n\t}\n\tlet functionCalls = [];\n\tconst messageParts = [];\n\tif (typeof message.content === \"string\" && message.content) messageParts.push({ text: message.content });\n\tif (Array.isArray(message.content)) messageParts.push(...message.content.map((c) => _convertLangChainContentToPart(c, isMultimodalModel)).filter((p) => p !== void 0));\n\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.isAIMessage)(message) && message.tool_calls?.length) functionCalls = message.tool_calls.map((tc) => {\n\t\treturn { functionCall: {\n\t\t\tname: tc.name,\n\t\t\targs: tc.args\n\t\t} };\n\t});\n\treturn [...messageParts, ...functionCalls];\n}\nfunction convertBaseMessagesToContent(messages, isMultimodalModel, convertSystemMessageToHumanContent = false) {\n\treturn messages.reduce((acc, message, index) => {\n\t\tif (!(0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.isBaseMessage)(message)) throw new Error(\"Unsupported message input\");\n\t\tconst author = getMessageAuthor(message);\n\t\tif (author === \"system\" && index !== 0) throw new Error(\"System message should be the first one\");\n\t\tconst role = convertAuthorToRole(author);\n\t\tconst prevContent = acc.content[acc.content.length];\n\t\tif (!acc.mergeWithPreviousContent && prevContent && prevContent.role === role) throw new Error(\"Google Generative AI requires alternate messages between authors\");\n\t\tconst parts = convertMessageContentToParts(message, isMultimodalModel, messages.slice(0, index));\n\t\tif (acc.mergeWithPreviousContent) {\n\t\t\tconst prevContent$1 = acc.content[acc.content.length - 1];\n\t\t\tif (!prevContent$1) throw new Error(\"There was a problem parsing your system message. Please try a prompt without one.\");\n\t\t\tprevContent$1.parts.push(...parts);\n\t\t\treturn {\n\t\t\t\tmergeWithPreviousContent: false,\n\t\t\t\tcontent: acc.content\n\t\t\t};\n\t\t}\n\t\tlet actualRole = role;\n\t\tif (actualRole === \"function\" || actualRole === \"system\" && !convertSystemMessageToHumanContent) actualRole = \"user\";\n\t\tconst content = {\n\t\t\trole: actualRole,\n\t\t\tparts\n\t\t};\n\t\treturn {\n\t\t\tmergeWithPreviousContent: author === \"system\" && !convertSystemMessageToHumanContent,\n\t\t\tcontent: [...acc.content, content]\n\t\t};\n\t}, {\n\t\tcontent: [],\n\t\tmergeWithPreviousContent: false\n\t}).content;\n}\nfunction mapGenerateContentResultToChatResult(response, extra) {\n\tif (!response.candidates || response.candidates.length === 0 || !response.candidates[0]) return {\n\t\tgenerations: [],\n\t\tllmOutput: { filters: response.promptFeedback }\n\t};\n\tconst functionCalls = response.functionCalls();\n\tconst [candidate] = response.candidates;\n\tconst { content: candidateContent,...generationInfo } = candidate;\n\tlet content;\n\tif (Array.isArray(candidateContent?.parts) && candidateContent.parts.length === 1 && candidateContent.parts[0].text) content = candidateContent.parts[0].text;\n\telse if (Array.isArray(candidateContent?.parts) && candidateContent.parts.length > 0) content = candidateContent.parts.map((p) => {\n\t\tif (\"text\" in p) return {\n\t\t\ttype: \"text\",\n\t\t\ttext: p.text\n\t\t};\n\t\telse if (\"inlineData\" in p) return {\n\t\t\ttype: \"inlineData\",\n\t\t\tinlineData: p.inlineData\n\t\t};\n\t\telse if (\"functionCall\" in p) return {\n\t\t\ttype: \"functionCall\",\n\t\t\tfunctionCall: p.functionCall\n\t\t};\n\t\telse if (\"functionResponse\" in p) return {\n\t\t\ttype: \"functionResponse\",\n\t\t\tfunctionResponse: p.functionResponse\n\t\t};\n\t\telse if (\"fileData\" in p) return {\n\t\t\ttype: \"fileData\",\n\t\t\tfileData: p.fileData\n\t\t};\n\t\telse if (\"executableCode\" in p) return {\n\t\t\ttype: \"executableCode\",\n\t\t\texecutableCode: p.executableCode\n\t\t};\n\t\telse if (\"codeExecutionResult\" in p) return {\n\t\t\ttype: \"codeExecutionResult\",\n\t\t\tcodeExecutionResult: p.codeExecutionResult\n\t\t};\n\t\treturn p;\n\t});\n\telse content = [];\n\tlet text = \"\";\n\tif (typeof content === \"string\") text = content;\n\telse if (Array.isArray(content) && content.length > 0) {\n\t\tconst block = content.find((b) => \"text\" in b);\n\t\ttext = block?.text ?? text;\n\t}\n\tconst generation = {\n\t\ttext,\n\t\tmessage: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.AIMessage({\n\t\t\tcontent: content ?? \"\",\n\t\t\ttool_calls: functionCalls?.map((fc) => {\n\t\t\t\treturn {\n\t\t\t\t\t...fc,\n\t\t\t\t\ttype: \"tool_call\",\n\t\t\t\t\tid: \"id\" in fc && typeof fc.id === \"string\" ? fc.id : (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])()\n\t\t\t\t};\n\t\t\t}),\n\t\t\tadditional_kwargs: { ...generationInfo },\n\t\t\tusage_metadata: extra?.usageMetadata\n\t\t}),\n\t\tgenerationInfo\n\t};\n\treturn {\n\t\tgenerations: [generation],\n\t\tllmOutput: { tokenUsage: {\n\t\t\tpromptTokens: extra?.usageMetadata?.input_tokens,\n\t\t\tcompletionTokens: extra?.usageMetadata?.output_tokens,\n\t\t\ttotalTokens: extra?.usageMetadata?.total_tokens\n\t\t} }\n\t};\n}\nfunction convertResponseContentToChatGenerationChunk(response, extra) {\n\tif (!response.candidates || response.candidates.length === 0) return null;\n\tconst functionCalls = response.functionCalls();\n\tconst [candidate] = response.candidates;\n\tconst { content: candidateContent,...generationInfo } = candidate;\n\tlet content;\n\tif (Array.isArray(candidateContent?.parts) && candidateContent.parts.every((p) => \"text\" in p)) content = candidateContent.parts.map((p) => p.text).join(\"\");\n\telse if (Array.isArray(candidateContent?.parts)) content = candidateContent.parts.map((p) => {\n\t\tif (\"text\" in p) return {\n\t\t\ttype: \"text\",\n\t\t\ttext: p.text\n\t\t};\n\t\telse if (\"inlineData\" in p) return {\n\t\t\ttype: \"inlineData\",\n\t\t\tinlineData: p.inlineData\n\t\t};\n\t\telse if (\"functionCall\" in p) return {\n\t\t\ttype: \"functionCall\",\n\t\t\tfunctionCall: p.functionCall\n\t\t};\n\t\telse if (\"functionResponse\" in p) return {\n\t\t\ttype: \"functionResponse\",\n\t\t\tfunctionResponse: p.functionResponse\n\t\t};\n\t\telse if (\"fileData\" in p) return {\n\t\t\ttype: \"fileData\",\n\t\t\tfileData: p.fileData\n\t\t};\n\t\telse if (\"executableCode\" in p) return {\n\t\t\ttype: \"executableCode\",\n\t\t\texecutableCode: p.executableCode\n\t\t};\n\t\telse if (\"codeExecutionResult\" in p) return {\n\t\t\ttype: \"codeExecutionResult\",\n\t\t\tcodeExecutionResult: p.codeExecutionResult\n\t\t};\n\t\treturn p;\n\t});\n\telse content = [];\n\tlet text = \"\";\n\tif (content && typeof content === \"string\") text = content;\n\telse if (Array.isArray(content)) {\n\t\tconst block = content.find((b) => \"text\" in b);\n\t\ttext = block?.text ?? \"\";\n\t}\n\tconst toolCallChunks = [];\n\tif (functionCalls) toolCallChunks.push(...functionCalls.map((fc) => ({\n\t\t...fc,\n\t\targs: JSON.stringify(fc.args),\n\t\tindex: extra.index,\n\t\ttype: \"tool_call_chunk\",\n\t\tid: \"id\" in fc && typeof fc.id === \"string\" ? fc.id : (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])()\n\t})));\n\treturn new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_2__.ChatGenerationChunk({\n\t\ttext,\n\t\tmessage: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.AIMessageChunk({\n\t\t\tcontent: content || \"\",\n\t\t\tname: !candidateContent ? void 0 : candidateContent.role,\n\t\t\ttool_call_chunks: toolCallChunks,\n\t\t\tadditional_kwargs: {},\n\t\t\tresponse_metadata: { model_provider: \"google-genai\" },\n\t\t\tusage_metadata: extra.usageMetadata\n\t\t}),\n\t\tgenerationInfo\n\t});\n}\nfunction convertToGenerativeAITools(tools) {\n\tif (tools.every((tool) => \"functionDeclarations\" in tool && Array.isArray(tool.functionDeclarations))) return tools;\n\treturn [{ functionDeclarations: tools.map((tool) => {\n\t\tif ((0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_3__.isLangChainTool)(tool)) {\n\t\t\tconst jsonSchema = (0,_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__.schemaToGenerativeAIParameters)(tool.schema);\n\t\t\tif (jsonSchema.type === \"object\" && \"properties\" in jsonSchema && Object.keys(jsonSchema.properties).length === 0) return {\n\t\t\t\tname: tool.name,\n\t\t\t\tdescription: tool.description\n\t\t\t};\n\t\t\treturn {\n\t\t\t\tname: tool.name,\n\t\t\t\tdescription: tool.description,\n\t\t\t\tparameters: jsonSchema\n\t\t\t};\n\t\t}\n\t\tif ((0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_4__.isOpenAITool)(tool)) return {\n\t\t\tname: tool.function.name,\n\t\t\tdescription: tool.function.description ?? `A function available to call.`,\n\t\t\tparameters: (0,_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__.jsonSchemaToGeminiParameters)(tool.function.parameters)\n\t\t};\n\t\treturn tool;\n\t}) }];\n}\n\n//#endregion\n\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/tools.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/tools.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToolsToGenAI: () => (/* binding */ convertToolsToGenAI)\n/* harmony export */ });\n/* harmony import */ var _zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./zod_to_genai_parameters.js */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/common.js\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/.pnpm/@google+generative-ai@0.24.1/node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/function_calling.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/language_models/base.js\");\n\n\n\n\n\n\n//#region src/utils/tools.ts\nfunction convertToolsToGenAI(tools, extra) {\n\tconst genAITools = processTools(tools);\n\tconst toolConfig = createToolConfig(genAITools, extra);\n\treturn {\n\t\ttools: genAITools,\n\t\ttoolConfig\n\t};\n}\nfunction processTools(tools) {\n\tlet functionDeclarationTools = [];\n\tconst genAITools = [];\n\ttools.forEach((tool) => {\n\t\tif ((0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_3__.isLangChainTool)(tool)) {\n\t\t\tconst [convertedTool] = (0,_common_js__WEBPACK_IMPORTED_MODULE_1__.convertToGenerativeAITools)([tool]);\n\t\t\tif (convertedTool.functionDeclarations) functionDeclarationTools.push(...convertedTool.functionDeclarations);\n\t\t} else if ((0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_4__.isOpenAITool)(tool)) {\n\t\t\tconst { functionDeclarations } = convertOpenAIToolToGenAI(tool);\n\t\t\tif (functionDeclarations) functionDeclarationTools.push(...functionDeclarations);\n\t\t\telse throw new Error(\"Failed to convert OpenAI structured tool to GenerativeAI tool\");\n\t\t} else genAITools.push(tool);\n\t});\n\tconst genAIFunctionDeclaration = genAITools.find((t) => \"functionDeclarations\" in t);\n\tif (genAIFunctionDeclaration) return genAITools.map((tool) => {\n\t\tif (functionDeclarationTools?.length > 0 && \"functionDeclarations\" in tool) {\n\t\t\tconst newTool = { functionDeclarations: [...tool.functionDeclarations || [], ...functionDeclarationTools] };\n\t\t\tfunctionDeclarationTools = [];\n\t\t\treturn newTool;\n\t\t}\n\t\treturn tool;\n\t});\n\treturn [...genAITools, ...functionDeclarationTools.length > 0 ? [{ functionDeclarations: functionDeclarationTools }] : []];\n}\nfunction convertOpenAIToolToGenAI(tool) {\n\treturn { functionDeclarations: [{\n\t\tname: tool.function.name,\n\t\tdescription: tool.function.description,\n\t\tparameters: (0,_zod_to_genai_parameters_js__WEBPACK_IMPORTED_MODULE_0__.removeAdditionalProperties)(tool.function.parameters)\n\t}] };\n}\nfunction createToolConfig(genAITools, extra) {\n\tif (!genAITools.length || !extra) return void 0;\n\tconst { toolChoice, allowedFunctionNames } = extra;\n\tconst modeMap = {\n\t\tany: _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__.FunctionCallingMode.ANY,\n\t\tauto: _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__.FunctionCallingMode.AUTO,\n\t\tnone: _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__.FunctionCallingMode.NONE\n\t};\n\tif (toolChoice && [\n\t\t\"any\",\n\t\t\"auto\",\n\t\t\"none\"\n\t].includes(toolChoice)) return { functionCallingConfig: {\n\t\tmode: modeMap[toolChoice] ?? \"MODE_UNSPECIFIED\",\n\t\tallowedFunctionNames\n\t} };\n\tif (typeof toolChoice === \"string\" || allowedFunctionNames) return { functionCallingConfig: {\n\t\tmode: _google_generative_ai__WEBPACK_IMPORTED_MODULE_2__.FunctionCallingMode.ANY,\n\t\tallowedFunctionNames: [...allowedFunctionNames ?? [], ...toolChoice && typeof toolChoice === \"string\" ? [toolChoice] : []]\n\t} };\n\treturn void 0;\n}\n\n//#endregion\n\n//# sourceMappingURL=tools.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitnb29nbGUtZ2VuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfXy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC91dGlscy90b29scy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMEU7QUFDakI7QUFDRztBQUNhO0FBQ0w7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx1RkFBZTtBQUNyQiwyQkFBMkIsc0VBQTBCO0FBQ3JEO0FBQ0EsSUFBSSxTQUFTLGtGQUFZO0FBQ3pCLFdBQVcsdUJBQXVCO0FBQ2xDO0FBQ0E7QUFDQSxJQUFJO0FBQ0osRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixvRUFBb0UsZ0RBQWdEO0FBQ3BIO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLGNBQWMsdUZBQTBCO0FBQ3hDLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxTQUFTLG1DQUFtQztBQUM1QztBQUNBLE9BQU8sc0VBQW1CO0FBQzFCLFFBQVEsc0VBQW1CO0FBQzNCLFFBQVEsc0VBQW1CO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFO0FBQ3RFLFFBQVEsc0VBQW1CO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQytCO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnJvdXRlci1sYW5nZ3JhcGgvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitnb29nbGUtZ2VuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfXy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC91dGlscy90b29scy5qcz84YjYxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbW92ZUFkZGl0aW9uYWxQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vem9kX3RvX2dlbmFpX3BhcmFtZXRlcnMuanNcIjtcbmltcG9ydCB7IGNvbnZlcnRUb0dlbmVyYXRpdmVBSVRvb2xzIH0gZnJvbSBcIi4vY29tbW9uLmpzXCI7XG5pbXBvcnQgeyBGdW5jdGlvbkNhbGxpbmdNb2RlIH0gZnJvbSBcIkBnb29nbGUvZ2VuZXJhdGl2ZS1haVwiO1xuaW1wb3J0IHsgaXNMYW5nQ2hhaW5Ub29sIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS91dGlscy9mdW5jdGlvbl9jYWxsaW5nXCI7XG5pbXBvcnQgeyBpc09wZW5BSVRvb2wgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9iYXNlXCI7XG5cbi8vI3JlZ2lvbiBzcmMvdXRpbHMvdG9vbHMudHNcbmZ1bmN0aW9uIGNvbnZlcnRUb29sc1RvR2VuQUkodG9vbHMsIGV4dHJhKSB7XG5cdGNvbnN0IGdlbkFJVG9vbHMgPSBwcm9jZXNzVG9vbHModG9vbHMpO1xuXHRjb25zdCB0b29sQ29uZmlnID0gY3JlYXRlVG9vbENvbmZpZyhnZW5BSVRvb2xzLCBleHRyYSk7XG5cdHJldHVybiB7XG5cdFx0dG9vbHM6IGdlbkFJVG9vbHMsXG5cdFx0dG9vbENvbmZpZ1xuXHR9O1xufVxuZnVuY3Rpb24gcHJvY2Vzc1Rvb2xzKHRvb2xzKSB7XG5cdGxldCBmdW5jdGlvbkRlY2xhcmF0aW9uVG9vbHMgPSBbXTtcblx0Y29uc3QgZ2VuQUlUb29scyA9IFtdO1xuXHR0b29scy5mb3JFYWNoKCh0b29sKSA9PiB7XG5cdFx0aWYgKGlzTGFuZ0NoYWluVG9vbCh0b29sKSkge1xuXHRcdFx0Y29uc3QgW2NvbnZlcnRlZFRvb2xdID0gY29udmVydFRvR2VuZXJhdGl2ZUFJVG9vbHMoW3Rvb2xdKTtcblx0XHRcdGlmIChjb252ZXJ0ZWRUb29sLmZ1bmN0aW9uRGVjbGFyYXRpb25zKSBmdW5jdGlvbkRlY2xhcmF0aW9uVG9vbHMucHVzaCguLi5jb252ZXJ0ZWRUb29sLmZ1bmN0aW9uRGVjbGFyYXRpb25zKTtcblx0XHR9IGVsc2UgaWYgKGlzT3BlbkFJVG9vbCh0b29sKSkge1xuXHRcdFx0Y29uc3QgeyBmdW5jdGlvbkRlY2xhcmF0aW9ucyB9ID0gY29udmVydE9wZW5BSVRvb2xUb0dlbkFJKHRvb2wpO1xuXHRcdFx0aWYgKGZ1bmN0aW9uRGVjbGFyYXRpb25zKSBmdW5jdGlvbkRlY2xhcmF0aW9uVG9vbHMucHVzaCguLi5mdW5jdGlvbkRlY2xhcmF0aW9ucyk7XG5cdFx0XHRlbHNlIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjb252ZXJ0IE9wZW5BSSBzdHJ1Y3R1cmVkIHRvb2wgdG8gR2VuZXJhdGl2ZUFJIHRvb2xcIik7XG5cdFx0fSBlbHNlIGdlbkFJVG9vbHMucHVzaCh0b29sKTtcblx0fSk7XG5cdGNvbnN0IGdlbkFJRnVuY3Rpb25EZWNsYXJhdGlvbiA9IGdlbkFJVG9vbHMuZmluZCgodCkgPT4gXCJmdW5jdGlvbkRlY2xhcmF0aW9uc1wiIGluIHQpO1xuXHRpZiAoZ2VuQUlGdW5jdGlvbkRlY2xhcmF0aW9uKSByZXR1cm4gZ2VuQUlUb29scy5tYXAoKHRvb2wpID0+IHtcblx0XHRpZiAoZnVuY3Rpb25EZWNsYXJhdGlvblRvb2xzPy5sZW5ndGggPiAwICYmIFwiZnVuY3Rpb25EZWNsYXJhdGlvbnNcIiBpbiB0b29sKSB7XG5cdFx0XHRjb25zdCBuZXdUb29sID0geyBmdW5jdGlvbkRlY2xhcmF0aW9uczogWy4uLnRvb2wuZnVuY3Rpb25EZWNsYXJhdGlvbnMgfHwgW10sIC4uLmZ1bmN0aW9uRGVjbGFyYXRpb25Ub29sc10gfTtcblx0XHRcdGZ1bmN0aW9uRGVjbGFyYXRpb25Ub29scyA9IFtdO1xuXHRcdFx0cmV0dXJuIG5ld1Rvb2w7XG5cdFx0fVxuXHRcdHJldHVybiB0b29sO1xuXHR9KTtcblx0cmV0dXJuIFsuLi5nZW5BSVRvb2xzLCAuLi5mdW5jdGlvbkRlY2xhcmF0aW9uVG9vbHMubGVuZ3RoID4gMCA/IFt7IGZ1bmN0aW9uRGVjbGFyYXRpb25zOiBmdW5jdGlvbkRlY2xhcmF0aW9uVG9vbHMgfV0gOiBbXV07XG59XG5mdW5jdGlvbiBjb252ZXJ0T3BlbkFJVG9vbFRvR2VuQUkodG9vbCkge1xuXHRyZXR1cm4geyBmdW5jdGlvbkRlY2xhcmF0aW9uczogW3tcblx0XHRuYW1lOiB0b29sLmZ1bmN0aW9uLm5hbWUsXG5cdFx0ZGVzY3JpcHRpb246IHRvb2wuZnVuY3Rpb24uZGVzY3JpcHRpb24sXG5cdFx0cGFyYW1ldGVyczogcmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXModG9vbC5mdW5jdGlvbi5wYXJhbWV0ZXJzKVxuXHR9XSB9O1xufVxuZnVuY3Rpb24gY3JlYXRlVG9vbENvbmZpZyhnZW5BSVRvb2xzLCBleHRyYSkge1xuXHRpZiAoIWdlbkFJVG9vbHMubGVuZ3RoIHx8ICFleHRyYSkgcmV0dXJuIHZvaWQgMDtcblx0Y29uc3QgeyB0b29sQ2hvaWNlLCBhbGxvd2VkRnVuY3Rpb25OYW1lcyB9ID0gZXh0cmE7XG5cdGNvbnN0IG1vZGVNYXAgPSB7XG5cdFx0YW55OiBGdW5jdGlvbkNhbGxpbmdNb2RlLkFOWSxcblx0XHRhdXRvOiBGdW5jdGlvbkNhbGxpbmdNb2RlLkFVVE8sXG5cdFx0bm9uZTogRnVuY3Rpb25DYWxsaW5nTW9kZS5OT05FXG5cdH07XG5cdGlmICh0b29sQ2hvaWNlICYmIFtcblx0XHRcImFueVwiLFxuXHRcdFwiYXV0b1wiLFxuXHRcdFwibm9uZVwiXG5cdF0uaW5jbHVkZXModG9vbENob2ljZSkpIHJldHVybiB7IGZ1bmN0aW9uQ2FsbGluZ0NvbmZpZzoge1xuXHRcdG1vZGU6IG1vZGVNYXBbdG9vbENob2ljZV0gPz8gXCJNT0RFX1VOU1BFQ0lGSUVEXCIsXG5cdFx0YWxsb3dlZEZ1bmN0aW9uTmFtZXNcblx0fSB9O1xuXHRpZiAodHlwZW9mIHRvb2xDaG9pY2UgPT09IFwic3RyaW5nXCIgfHwgYWxsb3dlZEZ1bmN0aW9uTmFtZXMpIHJldHVybiB7IGZ1bmN0aW9uQ2FsbGluZ0NvbmZpZzoge1xuXHRcdG1vZGU6IEZ1bmN0aW9uQ2FsbGluZ01vZGUuQU5ZLFxuXHRcdGFsbG93ZWRGdW5jdGlvbk5hbWVzOiBbLi4uYWxsb3dlZEZ1bmN0aW9uTmFtZXMgPz8gW10sIC4uLnRvb2xDaG9pY2UgJiYgdHlwZW9mIHRvb2xDaG9pY2UgPT09IFwic3RyaW5nXCIgPyBbdG9vbENob2ljZV0gOiBbXV1cblx0fSB9O1xuXHRyZXR1cm4gdm9pZCAwO1xufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGNvbnZlcnRUb29sc1RvR2VuQUkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvb2xzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/tools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js":
/*!************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js ***!
  \************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsonSchemaToGeminiParameters: () => (/* binding */ jsonSchemaToGeminiParameters),\n/* harmony export */   removeAdditionalProperties: () => (/* binding */ removeAdditionalProperties),\n/* harmony export */   schemaToGenerativeAIParameters: () => (/* binding */ schemaToGenerativeAIParameters)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/types/index.js\");\n/* harmony import */ var _langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/json_schema */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/json_schema.js\");\n\n\n\n//#region src/utils/zod_to_genai_parameters.ts\nfunction removeAdditionalProperties(obj) {\n\tif (typeof obj === \"object\" && obj !== null) {\n\t\tconst newObj = { ...obj };\n\t\tif (\"additionalProperties\" in newObj) delete newObj.additionalProperties;\n\t\tif (\"$schema\" in newObj) delete newObj.$schema;\n\t\tif (\"strict\" in newObj) delete newObj.strict;\n\t\tfor (const key in newObj) if (key in newObj) {\n\t\t\tif (Array.isArray(newObj[key])) newObj[key] = newObj[key].map(removeAdditionalProperties);\n\t\t\telse if (typeof newObj[key] === \"object\" && newObj[key] !== null) newObj[key] = removeAdditionalProperties(newObj[key]);\n\t\t}\n\t\treturn newObj;\n\t}\n\treturn obj;\n}\nfunction schemaToGenerativeAIParameters(schema) {\n\tconst jsonSchema = removeAdditionalProperties((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__.isInteropZodSchema)(schema) ? (0,_langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_1__.toJsonSchema)(schema) : schema);\n\tconst { $schema,...rest } = jsonSchema;\n\treturn rest;\n}\nfunction jsonSchemaToGeminiParameters(schema) {\n\tconst jsonSchema = removeAdditionalProperties(schema);\n\tconst { $schema,...rest } = jsonSchema;\n\treturn rest;\n}\n\n//#endregion\n\n//# sourceMappingURL=zod_to_genai_parameters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitnb29nbGUtZ2VuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfXy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9nb29nbGUtZ2VuYWkvZGlzdC91dGlscy96b2RfdG9fZ2VuYWlfcGFyYW1ldGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFpRTtBQUNBOztBQUVqRTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLCtFQUFrQixXQUFXLCtFQUFZO0FBQ3hGLFNBQVMsa0JBQWtCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrQkFBa0I7QUFDM0I7QUFDQTs7QUFFQTtBQUNvRztBQUNwRyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5yb3V0ZXItbGFuZ2dyYXBoLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsYW5nY2hhaW4rZ29vZ2xlLWdlbmFpQDEuMC4wX0BsYW5nY2hhaW4rY29yZUAxLjAuMV9vcGVuYWlANi43LjBfd3NAOC4xOC4zX3pvZEAzLjI1Ljc2X18vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ29vZ2xlLWdlbmFpL2Rpc3QvdXRpbHMvem9kX3RvX2dlbmFpX3BhcmFtZXRlcnMuanM/YThiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0ludGVyb3Bab2RTY2hlbWEgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL3R5cGVzXCI7XG5pbXBvcnQgeyB0b0pzb25TY2hlbWEgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2pzb25fc2NoZW1hXCI7XG5cbi8vI3JlZ2lvbiBzcmMvdXRpbHMvem9kX3RvX2dlbmFpX3BhcmFtZXRlcnMudHNcbmZ1bmN0aW9uIHJlbW92ZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKG9iaikge1xuXHRpZiAodHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiBvYmogIT09IG51bGwpIHtcblx0XHRjb25zdCBuZXdPYmogPSB7IC4uLm9iaiB9O1xuXHRcdGlmIChcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCIgaW4gbmV3T2JqKSBkZWxldGUgbmV3T2JqLmFkZGl0aW9uYWxQcm9wZXJ0aWVzO1xuXHRcdGlmIChcIiRzY2hlbWFcIiBpbiBuZXdPYmopIGRlbGV0ZSBuZXdPYmouJHNjaGVtYTtcblx0XHRpZiAoXCJzdHJpY3RcIiBpbiBuZXdPYmopIGRlbGV0ZSBuZXdPYmouc3RyaWN0O1xuXHRcdGZvciAoY29uc3Qga2V5IGluIG5ld09iaikgaWYgKGtleSBpbiBuZXdPYmopIHtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KG5ld09ialtrZXldKSkgbmV3T2JqW2tleV0gPSBuZXdPYmpba2V5XS5tYXAocmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXMpO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIG5ld09ialtrZXldID09PSBcIm9iamVjdFwiICYmIG5ld09ialtrZXldICE9PSBudWxsKSBuZXdPYmpba2V5XSA9IHJlbW92ZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKG5ld09ialtrZXldKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ld09iajtcblx0fVxuXHRyZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gc2NoZW1hVG9HZW5lcmF0aXZlQUlQYXJhbWV0ZXJzKHNjaGVtYSkge1xuXHRjb25zdCBqc29uU2NoZW1hID0gcmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXMoaXNJbnRlcm9wWm9kU2NoZW1hKHNjaGVtYSkgPyB0b0pzb25TY2hlbWEoc2NoZW1hKSA6IHNjaGVtYSk7XG5cdGNvbnN0IHsgJHNjaGVtYSwuLi5yZXN0IH0gPSBqc29uU2NoZW1hO1xuXHRyZXR1cm4gcmVzdDtcbn1cbmZ1bmN0aW9uIGpzb25TY2hlbWFUb0dlbWluaVBhcmFtZXRlcnMoc2NoZW1hKSB7XG5cdGNvbnN0IGpzb25TY2hlbWEgPSByZW1vdmVBZGRpdGlvbmFsUHJvcGVydGllcyhzY2hlbWEpO1xuXHRjb25zdCB7ICRzY2hlbWEsLi4ucmVzdCB9ID0ganNvblNjaGVtYTtcblx0cmV0dXJuIHJlc3Q7XG59XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsganNvblNjaGVtYVRvR2VtaW5pUGFyYW1ldGVycywgcmVtb3ZlQWRkaXRpb25hbFByb3BlcnRpZXMsIHNjaGVtYVRvR2VuZXJhdGl2ZUFJUGFyYW1ldGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9em9kX3RvX2dlbmFpX3BhcmFtZXRlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+google-genai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/google-genai/dist/utils/zod_to_genai_parameters.js\n");

/***/ })

};
;