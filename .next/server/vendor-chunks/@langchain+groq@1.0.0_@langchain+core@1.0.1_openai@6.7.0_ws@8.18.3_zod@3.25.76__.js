"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__";
exports.ids = ["vendor-chunks/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/groq/dist/chat_models.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/groq/dist/chat_models.js ***!
  \**************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGroq: () => (/* binding */ ChatGroq),\n/* harmony export */   messageToGroqRole: () => (/* binding */ messageToGroqRole)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/json_schema */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/json_schema.js\");\n/* harmony import */ var _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/language_models/chat_models.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/types/index.js\");\n/* harmony import */ var groq_sdk__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! groq-sdk */ \"(rsc)/./node_modules/.pnpm/groq-sdk@0.19.0/node_modules/groq-sdk/index.mjs\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/runnables/index.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/output_parsers/index.js\");\n/* harmony import */ var _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @langchain/core/output_parsers/openai_tools */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/output_parsers/openai_tools/index.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/function_calling.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n//#region src/chat_models.ts\n/**\n* Const list of fields that we'll pick from the `ChatCompletionCreateParams` interface\n* to use as the options allowed to be passed to invocation methods.\n*\n* @internal\n*/\nconst CREATE_PARAMS_BASE_CALL_KEYS = [\n\t\"frequency_penalty\",\n\t\"function_call\",\n\t\"functions\",\n\t\"logit_bias\",\n\t\"logprobs\",\n\t\"max_completion_tokens\",\n\t\"max_tokens\",\n\t\"n\",\n\t\"parallel_tool_calls\",\n\t\"presence_penalty\",\n\t\"reasoning_format\",\n\t\"response_format\",\n\t\"seed\",\n\t\"service_tier\",\n\t\"stop\",\n\t\"temperature\",\n\t\"tool_choice\",\n\t\"top_logprobs\",\n\t\"top_p\"\n];\nconst ADDED_CALL_KEYS = [\n\t\"headers\",\n\t\"promptIndex\",\n\t\"stream_options\",\n\t\"tools\"\n];\nconst ALL_CALL_KEYS = [...CREATE_PARAMS_BASE_CALL_KEYS, ...ADDED_CALL_KEYS];\n/**\n* Extract the custom role from a message.\n* @param message - The message to extract the custom role from.\n* @returns The custom role of the message.\n*/\nfunction extractGenericMessageCustomRole(message) {\n\tif (message.role !== \"system\" && message.role !== \"assistant\" && message.role !== \"user\" && message.role !== \"function\") throw new Error(`Unsupported message role: ${message.role}. Expected \"system\", \"assistant\", \"user\", or \"function\"`);\n\treturn message.role;\n}\n/**\n* Extract the role from a message.\n* @param message - The message to extract the role from.\n* @returns The role of the message.\n*/\nfunction messageToGroqRole(message) {\n\tswitch (message.type) {\n\t\tcase \"system\": return \"system\";\n\t\tcase \"ai\": return \"assistant\";\n\t\tcase \"human\": return \"user\";\n\t\tcase \"function\": return \"function\";\n\t\tcase \"tool\": return \"tool\";\n\t\tcase \"generic\":\n\t\t\tif (!_langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.ChatMessage.isInstance(message)) throw new Error(\"Invalid generic chat message\");\n\t\t\treturn extractGenericMessageCustomRole(message);\n\t\tdefault: throw new Error(`Unknown message type: ${message.type}`);\n\t}\n}\nfunction convertMessagesToGroqParams(messages) {\n\treturn messages.map((message) => {\n\t\tconst completionParam = {\n\t\t\trole: messageToGroqRole(message),\n\t\t\tcontent: message.content,\n\t\t\tname: message.name,\n\t\t\tfunction_call: message.additional_kwargs.function_call,\n\t\t\ttool_calls: message.additional_kwargs.tool_calls,\n\t\t\ttool_call_id: message.tool_call_id\n\t\t};\n\t\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.isAIMessage)(message) && !!message.tool_calls?.length) completionParam.tool_calls = message.tool_calls.map(_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__.convertLangChainToolCallToOpenAI);\n\t\telse {\n\t\t\tif (message.additional_kwargs.tool_calls != null) completionParam.tool_calls = message.additional_kwargs.tool_calls;\n\t\t\tif (message.tool_call_id != null) completionParam.tool_call_id = message.tool_call_id;\n\t\t}\n\t\treturn completionParam;\n\t});\n}\nfunction groqResponseToChatMessage(message, usageMetadata, responseMetadata) {\n\tconst rawToolCalls = message.tool_calls;\n\tswitch (message.role) {\n\t\tcase \"assistant\": {\n\t\t\tconst toolCalls = [];\n\t\t\tconst invalidToolCalls = [];\n\t\t\tfor (const rawToolCall of rawToolCalls ?? []) try {\n\t\t\t\ttoolCalls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__.parseToolCall)(rawToolCall, { returnId: true }));\n\t\t\t} catch (e) {\n\t\t\t\tinvalidToolCalls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__.makeInvalidToolCall)(rawToolCall, e.message));\n\t\t\t}\n\t\t\treturn new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.AIMessage({\n\t\t\t\tcontent: message.content || \"\",\n\t\t\t\tadditional_kwargs: { tool_calls: rawToolCalls },\n\t\t\t\ttool_calls: toolCalls,\n\t\t\t\tinvalid_tool_calls: invalidToolCalls,\n\t\t\t\tusage_metadata: usageMetadata,\n\t\t\t\tresponse_metadata: responseMetadata\n\t\t\t});\n\t\t}\n\t\tdefault: return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.ChatMessage(message.content || \"\", message.role ?? \"unknown\");\n\t}\n}\nfunction _convertDeltaToMessageChunk(delta, defaultRole, rawResponse, lastMessageId) {\n\tconst role = delta.role ?? defaultRole;\n\tconst content = delta.content ?? \"\";\n\tlet additional_kwargs;\n\tif (delta.function_call) additional_kwargs = { function_call: delta.function_call };\n\telse if (delta.tool_calls) additional_kwargs = { tool_calls: delta.tool_calls };\n\telse additional_kwargs = {};\n\tif (delta.audio) additional_kwargs.audio = {\n\t\t...delta.audio,\n\t\tindex: rawResponse.choices[0].index\n\t};\n\tlet usage;\n\tlet groqMessageId = lastMessageId;\n\tlet timing;\n\tconst xGroq = rawResponse.x_groq;\n\tif (xGroq?.usage) {\n\t\tusage = {\n\t\t\tinput_tokens: xGroq.usage.prompt_tokens,\n\t\t\toutput_tokens: xGroq.usage.completion_tokens,\n\t\t\ttotal_tokens: xGroq.usage.total_tokens\n\t\t};\n\t\ttiming = {\n\t\t\tcompletion_time: xGroq.usage.completion_time,\n\t\t\tprompt_time: xGroq.usage.prompt_time,\n\t\t\tqueue_time: xGroq.usage.queue_time,\n\t\t\ttotal_time: xGroq.usage.total_time\n\t\t};\n\t}\n\tif (xGroq?.id) groqMessageId = xGroq.id;\n\tconst response_metadata = {\n\t\tusage,\n\t\ttiming\n\t};\n\tif (role === \"user\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.HumanMessageChunk({\n\t\tcontent,\n\t\tresponse_metadata\n\t});\n\telse if (role === \"assistant\") {\n\t\tconst toolCallChunks = [];\n\t\tif (Array.isArray(delta.tool_calls)) for (const rawToolCall of delta.tool_calls) toolCallChunks.push({\n\t\t\tname: rawToolCall.function?.name,\n\t\t\targs: rawToolCall.function?.arguments,\n\t\t\tid: rawToolCall.id,\n\t\t\tindex: rawToolCall.index,\n\t\t\ttype: \"tool_call_chunk\"\n\t\t});\n\t\treturn new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.AIMessageChunk({\n\t\t\tcontent,\n\t\t\ttool_call_chunks: toolCallChunks,\n\t\t\tadditional_kwargs,\n\t\t\tid: groqMessageId,\n\t\t\tresponse_metadata\n\t\t});\n\t} else if (role === \"system\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.SystemMessageChunk({\n\t\tcontent,\n\t\tresponse_metadata\n\t});\n\telse if (role === \"developer\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.SystemMessageChunk({\n\t\tcontent,\n\t\tresponse_metadata,\n\t\tadditional_kwargs: { __openai_role__: \"developer\" }\n\t});\n\telse if (role === \"function\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.FunctionMessageChunk({\n\t\tcontent,\n\t\tadditional_kwargs,\n\t\tname: delta.name,\n\t\tresponse_metadata\n\t});\n\telse if (role === \"tool\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.ToolMessageChunk({\n\t\tcontent,\n\t\tadditional_kwargs,\n\t\ttool_call_id: delta.tool_call_id,\n\t\tresponse_metadata\n\t});\n\telse return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.ChatMessageChunk({\n\t\tcontent,\n\t\trole,\n\t\tresponse_metadata\n\t});\n}\n/**\n* Groq chat model integration.\n*\n* The Groq API is compatible to the OpenAI API with some limitations. View the\n* full API ref at:\n* @link {https://docs.api.groq.com/md/openai.oas.html}\n*\n* Setup:\n* Install `@langchain/groq` and set an environment variable named `GROQ_API_KEY`.\n*\n* ```bash\n* npm install @langchain/groq\n* export GROQ_API_KEY=\"your-api-key\"\n* ```\n*\n* ## [Constructor args](https://api.js.langchain.com/classes/langchain_groq.ChatGroq.html#constructor)\n*\n* ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_groq.ChatGroqCallOptions.html)\n*\n* Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n* They can also be passed via `.withConfig`, or the second arg in `.bindTools`, like shown in the examples below:\n*\n* ```typescript\n* // When calling `.withConfig`, call options should be passed via the first argument\n* const llmWithArgsBound = llm.withConfig({\n*   stop: [\"\\n\"],\n* });\n*\n* // When calling `.bindTools`, call options should be passed via the second argument\n* const llmWithTools = llm.bindTools(\n*   [...],\n*   {\n*     tool_choice: \"auto\",\n*   }\n* );\n* ```\n*\n* ## Examples\n*\n* <details open>\n* <summary><strong>Instantiate</strong></summary>\n*\n* ```typescript\n* import { ChatGroq } from '@langchain/groq';\n*\n* const llm = new ChatGroq({\n*   model: \"llama-3.3-70b-versatile\",\n*   temperature: 0,\n*   // other params...\n* });\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Invoking</strong></summary>\n*\n* ```typescript\n* const input = `Translate \"I love programming\" into French.`;\n*\n* // Models also accept a list of chat messages or a formatted prompt\n* const result = await llm.invoke(input);\n* console.log(result);\n* ```\n*\n* ```txt\n* AIMessage {\n*   \"content\": \"The French translation of \\\"I love programming\\\" is \\\"J'aime programmer\\\". In this sentence, \\\"J'aime\\\" is the first person singular conjugation of the French verb \\\"aimer\\\" which means \\\"to love\\\", and \\\"programmer\\\" is the French infinitive for \\\"to program\\\". I hope this helps! Let me know if you have any other questions.\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"tokenUsage\": {\n*       \"completionTokens\": 82,\n*       \"promptTokens\": 20,\n*       \"totalTokens\": 102\n*     },\n*     \"finish_reason\": \"stop\"\n*   },\n*   \"tool_calls\": [],\n*   \"invalid_tool_calls\": []\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Streaming Chunks</strong></summary>\n*\n* ```typescript\n* for await (const chunk of await llm.stream(input)) {\n*   console.log(chunk);\n* }\n* ```\n*\n* ```txt\n* AIMessageChunk {\n*   \"content\": \"\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": null\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* AIMessageChunk {\n*   \"content\": \"The\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": null\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* AIMessageChunk {\n*   \"content\": \" French\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": null\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* AIMessageChunk {\n*   \"content\": \" translation\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": null\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* AIMessageChunk {\n*   \"content\": \" of\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": null\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* AIMessageChunk {\n*   \"content\": \" \\\"\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": null\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* AIMessageChunk {\n*   \"content\": \"I\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": null\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* AIMessageChunk {\n*   \"content\": \" love\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": null\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* ...\n* AIMessageChunk {\n*   \"content\": \".\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": null\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* AIMessageChunk {\n*   \"content\": \"\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": \"stop\"\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Aggregate Streamed Chunks</strong></summary>\n*\n* ```typescript\n* import { AIMessageChunk } from '@langchain/core/messages';\n* import { concat } from '@langchain/core/utils/stream';\n*\n* const stream = await llm.stream(input);\n* let full: AIMessageChunk | undefined;\n* for await (const chunk of stream) {\n*   full = !full ? chunk : concat(full, chunk);\n* }\n* console.log(full);\n* ```\n*\n* ```txt\n* AIMessageChunk {\n*   \"content\": \"The French translation of \\\"I love programming\\\" is \\\"J'aime programmer\\\". In this sentence, \\\"J'aime\\\" is the first person singular conjugation of the French verb \\\"aimer\\\" which means \\\"to love\\\", and \\\"programmer\\\" is the French infinitive for \\\"to program\\\". I hope this helps! Let me know if you have any other questions.\",\n*   \"additional_kwargs\": {},\n*   \"response_metadata\": {\n*     \"finishReason\": \"stop\"\n*   },\n*   \"tool_calls\": [],\n*   \"tool_call_chunks\": [],\n*   \"invalid_tool_calls\": []\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Bind tools</strong></summary>\n*\n* ```typescript\n* import { z } from 'zod';\n*\n* const llmForToolCalling = new ChatGroq({\n*   model: \"llama3-groq-70b-8192-tool-use-preview\",\n*   temperature: 0,\n*   // other params...\n* });\n*\n* const GetWeather = {\n*   name: \"GetWeather\",\n*   description: \"Get the current weather in a given location\",\n*   schema: z.object({\n*     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n*   }),\n* }\n*\n* const GetPopulation = {\n*   name: \"GetPopulation\",\n*   description: \"Get the current population in a given location\",\n*   schema: z.object({\n*     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n*   }),\n* }\n*\n* const llmWithTools = llmForToolCalling.bindTools([GetWeather, GetPopulation]);\n* const aiMsg = await llmWithTools.invoke(\n*   \"Which city is hotter today and which is bigger: LA or NY?\"\n* );\n* console.log(aiMsg.tool_calls);\n* ```\n*\n* ```txt\n* [\n*   {\n*     name: 'GetWeather',\n*     args: { location: 'Los Angeles, CA' },\n*     type: 'tool_call',\n*     id: 'call_cd34'\n*   },\n*   {\n*     name: 'GetWeather',\n*     args: { location: 'New York, NY' },\n*     type: 'tool_call',\n*     id: 'call_68rf'\n*   },\n*   {\n*     name: 'GetPopulation',\n*     args: { location: 'Los Angeles, CA' },\n*     type: 'tool_call',\n*     id: 'call_f81z'\n*   },\n*   {\n*     name: 'GetPopulation',\n*     args: { location: 'New York, NY' },\n*     type: 'tool_call',\n*     id: 'call_8byt'\n*   }\n* ]\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Structured Output</strong></summary>\n*\n* ```typescript\n* import { z } from 'zod';\n*\n* const Joke = z.object({\n*   setup: z.string().describe(\"The setup of the joke\"),\n*   punchline: z.string().describe(\"The punchline to the joke\"),\n*   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n* }).describe('Joke to tell user.');\n*\n* const structuredLlm = llmForToolCalling.withStructuredOutput(Joke, { name: \"Joke\" });\n* const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n* console.log(jokeResult);\n* ```\n*\n* ```txt\n* {\n*   setup: \"Why don't cats play poker in the wild?\",\n*   punchline: 'Because there are too many cheetahs.'\n* }\n* ```\n* </details>\n*\n* <br />\n*/\nvar ChatGroq = class extends _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_1__.BaseChatModel {\n\tlc_namespace = [\n\t\t\"langchain\",\n\t\t\"chat_models\",\n\t\t\"groq\"\n\t];\n\tclient;\n\tmodel;\n\ttemperature = .7;\n\tstop;\n\tstopSequences;\n\tmaxTokens;\n\tstreaming = false;\n\tapiKey;\n\tstreamUsage = true;\n\ttopP;\n\tfrequencyPenalty;\n\tpresencePenalty;\n\tlogprobs;\n\tn;\n\tlogitBias;\n\tuser;\n\treasoningFormat;\n\tserviceTier;\n\ttopLogprobs;\n\tlc_serializable = true;\n\tget lc_serialized_keys() {\n\t\treturn [\n\t\t\t\"client\",\n\t\t\t\"model\",\n\t\t\t\"temperature\",\n\t\t\t\"stop\",\n\t\t\t\"stopSequences\",\n\t\t\t\"maxTokens\",\n\t\t\t\"streaming\",\n\t\t\t\"apiKey\",\n\t\t\t\"streamUsage\",\n\t\t\t\"topP\",\n\t\t\t\"frequencyPenalty\",\n\t\t\t\"presencePenalty\",\n\t\t\t\"logprobs\",\n\t\t\t\"n\",\n\t\t\t\"logitBias\",\n\t\t\t\"user\",\n\t\t\t\"reasoningFormat\",\n\t\t\t\"serviceTier\",\n\t\t\t\"topLogprobs\"\n\t\t];\n\t}\n\tstatic lc_name() {\n\t\treturn \"ChatGroq\";\n\t}\n\t_llmType() {\n\t\treturn \"groq\";\n\t}\n\tget lc_secrets() {\n\t\treturn { apiKey: \"GROQ_API_KEY\" };\n\t}\n\tget callKeys() {\n\t\treturn [...super.callKeys, ...ALL_CALL_KEYS];\n\t}\n\tconstructor(fields) {\n\t\tsuper(fields);\n\t\tconst apiKey = fields.apiKey || (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"GROQ_API_KEY\");\n\t\tif (!apiKey) throw new Error(`Groq API key not found. Please set the GROQ_API_KEY environment variable or provide the key into \"apiKey\"`);\n\t\tconst defaultHeaders = {\n\t\t\t\"User-Agent\": \"langchainjs\",\n\t\t\t...fields.defaultHeaders ?? {}\n\t\t};\n\t\tthis.client = new groq_sdk__WEBPACK_IMPORTED_MODULE_10__[\"default\"]({\n\t\t\tapiKey,\n\t\t\tdangerouslyAllowBrowser: true,\n\t\t\tbaseURL: fields.baseUrl,\n\t\t\ttimeout: fields.timeout,\n\t\t\thttpAgent: fields.httpAgent,\n\t\t\tfetch: fields.fetch,\n\t\t\tmaxRetries: 0,\n\t\t\tdefaultHeaders,\n\t\t\tdefaultQuery: fields.defaultQuery\n\t\t});\n\t\tthis.apiKey = apiKey;\n\t\tthis.temperature = fields.temperature ?? this.temperature;\n\t\tthis.model = fields.model;\n\t\tthis.streaming = fields.streaming ?? this.streaming;\n\t\tthis.stop = fields.stopSequences ?? (typeof fields.stop === \"string\" ? [fields.stop] : fields.stop) ?? [];\n\t\tthis.stopSequences = this.stop;\n\t\tthis.maxTokens = fields.maxTokens;\n\t\tthis.topP = fields.topP;\n\t\tthis.frequencyPenalty = fields.frequencyPenalty;\n\t\tthis.presencePenalty = fields.presencePenalty;\n\t\tthis.logprobs = fields.logprobs;\n\t\tthis.n = fields.n;\n\t\tthis.logitBias = fields.logitBias;\n\t\tthis.user = fields.user;\n\t}\n\tgetLsParams(options) {\n\t\tconst params = this.invocationParams(options);\n\t\treturn {\n\t\t\tls_provider: \"groq\",\n\t\t\tls_model_name: this.model,\n\t\t\tls_model_type: \"chat\",\n\t\t\tls_temperature: params.temperature ?? this.temperature,\n\t\t\tls_max_tokens: params.max_tokens ?? this.maxTokens,\n\t\t\tls_stop: options.stop\n\t\t};\n\t}\n\tasync completionWithRetry(request, options) {\n\t\treturn this.caller.call(async () => this.client.chat.completions.create(request, options));\n\t}\n\tinvocationParams(options, extra) {\n\t\tconst params = super.invocationParams(options);\n\t\tlet streamOptionsConfig = {};\n\t\tif (options?.stream_options !== void 0) streamOptionsConfig = { stream_options: options.stream_options };\n\t\telse if (this.streamUsage && this.streaming || extra?.streaming) streamOptionsConfig = { stream_options: { include_usage: true } };\n\t\tconst toReturn = {\n\t\t\tmodel: this.model,\n\t\t\tfrequency_penalty: this.frequencyPenalty,\n\t\t\tfunction_call: options?.function_call,\n\t\t\tfunctions: options?.functions,\n\t\t\tlogit_bias: this.logitBias,\n\t\t\tlogprobs: this.logprobs,\n\t\t\tn: this.n,\n\t\t\tparallel_tool_calls: options?.parallel_tool_calls,\n\t\t\tpresence_penalty: this.presencePenalty,\n\t\t\treasoning_format: this.reasoningFormat,\n\t\t\tresponse_format: options?.response_format,\n\t\t\tseed: options?.seed,\n\t\t\tservice_tier: this.serviceTier,\n\t\t\tstop: options?.stop ?? this.stopSequences,\n\t\t\ttemperature: options?.temperature ?? this.temperature,\n\t\t\ttool_choice: _formatToGroqToolChoice(options?.tool_choice),\n\t\t\ttools: options?.tools?.length ? options.tools.map((tool) => (0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_9__.convertToOpenAITool)(tool)) : void 0,\n\t\t\ttop_logprobs: this.topLogprobs,\n\t\t\ttop_p: this.topP,\n\t\t\tuser: this.user,\n\t\t\tstream: this.streaming,\n\t\t\t...params,\n\t\t\t...streamOptionsConfig\n\t\t};\n\t\ttoReturn.max_completion_tokens = options?.max_completion_tokens ?? options?.max_tokens ?? this.maxTokens;\n\t\tif (toReturn.max_completion_tokens === -1) delete toReturn.max_completion_tokens;\n\t\treturn toReturn;\n\t}\n\tbindTools(tools, kwargs) {\n\t\treturn this.withConfig({\n\t\t\ttools: tools.map((tool) => (0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_9__.convertToOpenAITool)(tool)),\n\t\t\t...kwargs\n\t\t});\n\t}\n\tasync *_streamResponseChunks(messages, options, runManager) {\n\t\tconst params = this.invocationParams(options, { streaming: true });\n\t\tconst messagesMapped = convertMessagesToGroqParams(messages);\n\t\tconst response = await this.completionWithRetry({\n\t\t\t...params,\n\t\t\tmessages: messagesMapped,\n\t\t\tstream: true\n\t\t}, {\n\t\t\tsignal: options?.signal,\n\t\t\theaders: options?.headers\n\t\t});\n\t\tlet role;\n\t\tlet lastMessageId;\n\t\tlet responseMetadata;\n\t\tfor await (const data of response) {\n\t\t\tresponseMetadata = data;\n\t\t\tconst choice = data?.choices[0];\n\t\t\tif (!choice) continue;\n\t\t\tif (choice.delta?.role) role = choice.delta.role;\n\t\t\tconst chunk = _convertDeltaToMessageChunk(choice.delta, role, data, lastMessageId);\n\t\t\tconst newTokenIndices = {\n\t\t\t\tprompt: options.promptIndex ?? 0,\n\t\t\t\tcompletion: choice.index ?? 0\n\t\t\t};\n\t\t\tif (typeof chunk.content !== \"string\") {\n\t\t\t\tconsole.log(\"[WARNING]: Received non-string content from OpenAI. This is currently not supported.\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst generationInfo = { ...newTokenIndices };\n\t\t\tif (choice.finish_reason != null) {\n\t\t\t\tgenerationInfo.finish_reason = choice.finish_reason;\n\t\t\t\tgenerationInfo.system_fingerprint = data.system_fingerprint;\n\t\t\t\tgenerationInfo.model_name = data.model;\n\t\t\t}\n\t\t\tconst generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_3__.ChatGenerationChunk({\n\t\t\t\tmessage: chunk,\n\t\t\t\ttext: chunk.content,\n\t\t\t\tgenerationInfo\n\t\t\t});\n\t\t\tyield generationChunk;\n\t\t\tawait runManager?.handleLLMNewToken(generationChunk.text ?? \"\", newTokenIndices, void 0, void 0, void 0, { chunk: generationChunk });\n\t\t}\n\t\tif (responseMetadata) {\n\t\t\tif (\"choices\" in responseMetadata) delete responseMetadata.choices;\n\t\t\tyield new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_3__.ChatGenerationChunk({\n\t\t\t\tmessage: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_2__.AIMessageChunk({\n\t\t\t\t\tcontent: \"\",\n\t\t\t\t\tresponse_metadata: responseMetadata\n\t\t\t\t}),\n\t\t\t\ttext: \"\"\n\t\t\t});\n\t\t}\n\t\tif (options.signal?.aborted) throw new Error(\"AbortError\");\n\t}\n\tasync _generate(messages, options, runManager) {\n\t\tif (this.streaming) {\n\t\t\tconst tokenUsage = {};\n\t\t\tconst stream = this._streamResponseChunks(messages, options, runManager);\n\t\t\tconst finalChunks = {};\n\t\t\tfor await (const chunk of stream) {\n\t\t\t\tconst index = chunk.generationInfo?.completion ?? 0;\n\t\t\t\tif (finalChunks[index] === void 0) finalChunks[index] = chunk;\n\t\t\t\telse finalChunks[index] = finalChunks[index].concat(chunk);\n\t\t\t}\n\t\t\tconst generations = Object.entries(finalChunks).sort(([aKey], [bKey]) => parseInt(aKey, 10) - parseInt(bKey, 10)).map(([_, value]) => value);\n\t\t\treturn {\n\t\t\t\tgenerations,\n\t\t\t\tllmOutput: { estimatedTokenUsage: tokenUsage }\n\t\t\t};\n\t\t} else return this._generateNonStreaming(messages, options, runManager);\n\t}\n\tasync _generateNonStreaming(messages, options, _runManager) {\n\t\tconst tokenUsage = {};\n\t\tconst params = this.invocationParams(options);\n\t\tconst messagesMapped = convertMessagesToGroqParams(messages);\n\t\tconst data = await this.completionWithRetry({\n\t\t\t...params,\n\t\t\tstream: false,\n\t\t\tmessages: messagesMapped\n\t\t}, {\n\t\t\tsignal: options?.signal,\n\t\t\theaders: options?.headers\n\t\t});\n\t\tif (\"usage\" in data && data.usage) {\n\t\t\tconst { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens } = data.usage;\n\t\t\tif (completionTokens) tokenUsage.completionTokens = (tokenUsage.completionTokens ?? 0) + completionTokens;\n\t\t\tif (promptTokens) tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n\t\t\tif (totalTokens) tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n\t\t}\n\t\tconst generations = [];\n\t\tif (\"choices\" in data && data.choices) for (const part of data.choices) {\n\t\t\tconst text = part.message?.content ?? \"\";\n\t\t\tlet usageMetadata;\n\t\t\tif (tokenUsage.totalTokens !== void 0) usageMetadata = {\n\t\t\t\tinput_tokens: tokenUsage.promptTokens ?? 0,\n\t\t\t\toutput_tokens: tokenUsage.completionTokens ?? 0,\n\t\t\t\ttotal_tokens: tokenUsage.totalTokens\n\t\t\t};\n\t\t\tconst { choices: _choices,...metadata } = data;\n\t\t\tconst generation = {\n\t\t\t\ttext,\n\t\t\t\tmessage: groqResponseToChatMessage(part.message ?? { role: \"assistant\" }, usageMetadata, metadata)\n\t\t\t};\n\t\t\tgeneration.generationInfo = {\n\t\t\t\t...part.finish_reason ? { finish_reason: part.finish_reason } : {},\n\t\t\t\t...part.logprobs ? { logprobs: part.logprobs } : {}\n\t\t\t};\n\t\t\tgenerations.push(generation);\n\t\t}\n\t\treturn {\n\t\t\tgenerations,\n\t\t\tllmOutput: { tokenUsage }\n\t\t};\n\t}\n\twithStructuredOutput(outputSchema, config) {\n\t\tconst schema = outputSchema;\n\t\tconst name = config?.name;\n\t\tconst method = config?.method;\n\t\tconst includeRaw = config?.includeRaw;\n\t\tlet functionName = name ?? \"extract\";\n\t\tlet outputParser;\n\t\tlet llm;\n\t\tif (method === \"jsonMode\") {\n\t\t\tlet outputSchema$1;\n\t\t\tif ((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_5__.isInteropZodSchema)(schema)) {\n\t\t\t\toutputParser = _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_7__.StructuredOutputParser.fromZodSchema(schema);\n\t\t\t\toutputSchema$1 = (0,_langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_0__.toJsonSchema)(schema);\n\t\t\t} else outputParser = new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_7__.JsonOutputParser();\n\t\t\tllm = this.withConfig({\n\t\t\t\tresponse_format: { type: \"json_object\" },\n\t\t\t\tls_structured_output_format: {\n\t\t\t\t\tkwargs: { method: \"jsonMode\" },\n\t\t\t\t\tschema: outputSchema$1\n\t\t\t\t}\n\t\t\t});\n\t\t} else if ((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_5__.isInteropZodSchema)(schema)) {\n\t\t\tconst asJsonSchema = (0,_langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_0__.toJsonSchema)(schema);\n\t\t\tllm = this.bindTools([{\n\t\t\t\ttype: \"function\",\n\t\t\t\tfunction: {\n\t\t\t\t\tname: functionName,\n\t\t\t\t\tdescription: asJsonSchema.description,\n\t\t\t\t\tparameters: asJsonSchema\n\t\t\t\t}\n\t\t\t}]).withConfig({\n\t\t\t\ttool_choice: {\n\t\t\t\t\ttype: \"function\",\n\t\t\t\t\tfunction: { name: functionName }\n\t\t\t\t},\n\t\t\t\tls_structured_output_format: {\n\t\t\t\t\tkwargs: { method: \"functionCalling\" },\n\t\t\t\t\tschema: asJsonSchema\n\t\t\t\t}\n\t\t\t});\n\t\t\toutputParser = new _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__.JsonOutputKeyToolsParser({\n\t\t\t\treturnSingle: true,\n\t\t\t\tkeyName: functionName,\n\t\t\t\tzodSchema: schema\n\t\t\t});\n\t\t} else {\n\t\t\tlet openAIFunctionDefinition;\n\t\t\tif (typeof schema.name === \"string\" && typeof schema.parameters === \"object\" && schema.parameters != null) {\n\t\t\t\topenAIFunctionDefinition = schema;\n\t\t\t\tfunctionName = schema.name;\n\t\t\t} else {\n\t\t\t\tfunctionName = schema.title ?? functionName;\n\t\t\t\topenAIFunctionDefinition = {\n\t\t\t\t\tname: functionName,\n\t\t\t\t\tdescription: schema.description ?? \"\",\n\t\t\t\t\tparameters: schema\n\t\t\t\t};\n\t\t\t}\n\t\t\tllm = this.bindTools([{\n\t\t\t\ttype: \"function\",\n\t\t\t\tfunction: openAIFunctionDefinition\n\t\t\t}]).withConfig({\n\t\t\t\ttool_choice: {\n\t\t\t\t\ttype: \"function\",\n\t\t\t\t\tfunction: { name: functionName }\n\t\t\t\t},\n\t\t\t\tls_structured_output_format: {\n\t\t\t\t\tkwargs: { method: \"functionCalling\" },\n\t\t\t\t\tschema\n\t\t\t\t}\n\t\t\t});\n\t\t\toutputParser = new _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__.JsonOutputKeyToolsParser({\n\t\t\t\treturnSingle: true,\n\t\t\t\tkeyName: functionName\n\t\t\t});\n\t\t}\n\t\tif (!includeRaw) return llm.pipe(outputParser).withConfig({ runName: \"ChatGroqStructuredOutput\" });\n\t\tconst parserAssign = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_6__.RunnablePassthrough.assign({ parsed: (input, config$1) => outputParser.invoke(input.raw, config$1) });\n\t\tconst parserNone = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_6__.RunnablePassthrough.assign({ parsed: () => null });\n\t\tconst parsedWithFallback = parserAssign.withFallbacks({ fallbacks: [parserNone] });\n\t\treturn _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_6__.RunnableSequence.from([{ raw: llm }, parsedWithFallback]).withConfig({ runName: \"ChatGroqStructuredOutput\" });\n\t}\n};\nfunction _formatToGroqToolChoice(toolChoice) {\n\tif (!toolChoice) return void 0;\n\telse if (toolChoice === \"any\" || toolChoice === \"required\") return \"required\";\n\telse if (toolChoice === \"auto\") return \"auto\";\n\telse if (toolChoice === \"none\") return \"none\";\n\telse if (typeof toolChoice === \"string\") return {\n\t\ttype: \"function\",\n\t\tfunction: { name: toolChoice }\n\t};\n\telse return toolChoice;\n}\n\n//#endregion\n\n//# sourceMappingURL=chat_models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/groq/dist/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/groq/dist/index.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/groq/dist/index.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGroq: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_0__.ChatGroq),\n/* harmony export */   messageToGroqRole: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_0__.messageToGroqRole)\n/* harmony export */ });\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat_models.js */ \"(rsc)/./node_modules/.pnpm/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/groq/dist/chat_models.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitncm9xQDEuMC4wX0BsYW5nY2hhaW4rY29yZUAxLjAuMV9vcGVuYWlANi43LjBfd3NAOC4xOC4zX3pvZEAzLjI1Ljc2X18vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vZ3JvcS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErRCIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5yb3V0ZXItbGFuZ2dyYXBoLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsYW5nY2hhaW4rZ3JvcUAxLjAuMF9AbGFuZ2NoYWluK2NvcmVAMS4wLjFfb3BlbmFpQDYuNy4wX3dzQDguMTguM196b2RAMy4yNS43Nl9fL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2dyb3EvZGlzdC9pbmRleC5qcz80NmEwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYXRHcm9xLCBtZXNzYWdlVG9Hcm9xUm9sZSB9IGZyb20gXCIuL2NoYXRfbW9kZWxzLmpzXCI7XG5cbmV4cG9ydCB7IENoYXRHcm9xLCBtZXNzYWdlVG9Hcm9xUm9sZSB9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+groq@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76__/node_modules/@langchain/groq/dist/index.js\n");

/***/ })

};
;