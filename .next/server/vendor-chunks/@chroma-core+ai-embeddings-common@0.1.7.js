"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@chroma-core+ai-embeddings-common@0.1.7";
exports.ids = ["vendor-chunks/@chroma-core+ai-embeddings-common@0.1.7"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@chroma-core+ai-embeddings-common@0.1.7/node_modules/@chroma-core/ai-embeddings-common/dist/index.mjs":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@chroma-core+ai-embeddings-common@0.1.7/node_modules/@chroma-core/ai-embeddings-common/dist/index.mjs ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAvailableSchemas: () => (/* binding */ getAvailableSchemas),\n/* harmony export */   getSchemaInfo: () => (/* binding */ getSchemaInfo),\n/* harmony export */   getSchemaVersion: () => (/* binding */ getSchemaVersion),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   loadSchema: () => (/* binding */ loadSchema),\n/* harmony export */   snakeCase: () => (/* binding */ snakeCase),\n/* harmony export */   validateConfigSchema: () => (/* binding */ validateConfigSchema)\n/* harmony export */ });\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ajv */ \"(rsc)/./node_modules/.pnpm/ajv@8.17.1/node_modules/ajv/dist/ajv.js\");\n// ../../../../../schemas/embedding_functions/amazon_bedrock.json\nvar amazon_bedrock_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Amazon Bedrock Embedding Function Schema\",\n  description: \"Schema for the Amazon Bedrock embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    session_args: {\n      type: \"object\",\n      description: \"The arguments to pass to the boto3 session\"\n    },\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for embeddings\"\n    },\n    kwargs: {\n      type: \"object\",\n      description: \"Additional arguments to pass to the Amazon Bedrock client\"\n    }\n  },\n  required: [\n    \"session_args\",\n    \"model_name\",\n    \"kwargs\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/base_schema.json\nvar base_schema_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Embedding Function Base Schema\",\n  description: \"Base schema for all embedding functions in Chroma\",\n  type: \"object\",\n  properties: {\n    version: {\n      type: \"string\",\n      description: \"Schema version for the embedding function\"\n    },\n    name: {\n      type: \"string\",\n      description: \"Name of the embedding function\"\n    },\n    config: {\n      type: \"object\",\n      description: \"Configuration parameters for the embedding function\"\n    }\n  },\n  required: [\n    \"version\",\n    \"name\",\n    \"config\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/chroma_langchain.json\nvar chroma_langchain_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Langchain Embedding Function Schema\",\n  description: \"Schema for the langchain embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    embedding_function: {\n      type: \"string\",\n      description: \"Parameter embedding_function for the langchain embedding function\"\n    }\n  },\n  required: [\n    \"embedding_function\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/cohere.json\nvar cohere_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Cohere Embedding Function Schema\",\n  description: \"Schema for the Cohere embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for text embeddings\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Environment variable name that contains your API key for the Cohere API\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/default.json\nvar default_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Default Embedding Function Schema\",\n  description: \"Schema for the default embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {},\n  required: [],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/google_generative_ai.json\nvar google_generative_ai_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Google Generative AI Embedding Function Schema\",\n  description: \"Schema for the Google Generative AI embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for text embeddings\"\n    },\n    task_type: {\n      type: \"string\",\n      description: \"The task type for the embeddings (e.g., RETRIEVAL_DOCUMENT)\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Environment variable name that contains your API key for the Google Generative AI API\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\",\n    \"task_type\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/google_palm.json\nvar google_palm_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Google PaLM Embedding Function Schema\",\n  description: \"Schema for the Google PaLM embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for text embeddings\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Environment variable name that contains your API key for the Google PaLM API\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/google_vertex.json\nvar google_vertex_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Google Vertex Embedding Function Schema\",\n  description: \"Schema for the Google Vertex embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for text embeddings\"\n    },\n    project_id: {\n      type: \"string\",\n      description: \"The Google Cloud project ID\"\n    },\n    region: {\n      type: \"string\",\n      description: \"The Google Cloud region\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Environment variable name that contains your API key for the Google Vertex API\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\",\n    \"project_id\",\n    \"region\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/huggingface.json\nvar huggingface_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"HuggingFace Embedding Function Schema\",\n  description: \"Schema for the HuggingFace embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for text embeddings\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Environment variable name that contains your API key for the HuggingFace API\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/huggingface_server.json\nvar huggingface_server_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"HuggingFace Embedding Server Schema\",\n  description: \"Schema for the HuggingFace embedding server configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    url: {\n      type: \"string\",\n      description: \"The URL of the HuggingFace Embedding Server\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"The environment variable name that contains your API key for the HuggingFace API\"\n    }\n  },\n  required: [\n    \"url\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/instructor.json\nvar instructor_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Instructor Embedding Function Schema\",\n  description: \"Schema for the instructor embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"Parameter model_name for the instructor embedding function\"\n    },\n    device: {\n      type: \"string\",\n      description: \"Parameter device for the instructor embedding function\"\n    },\n    instruction: {\n      type: \"string\",\n      description: \"Parameter instruction for the instructor embedding function\"\n    }\n  },\n  required: [\n    \"model_name\",\n    \"device\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/jina.json\nvar jina_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Jina Embedding Function Schema\",\n  description: \"Schema for the jina embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"Parameter model_name for the jina embedding function\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Parameter api_key_env_var for the jina embedding function\"\n    },\n    task: {\n      type: \"string\",\n      description: \"Parameter task for the jina embedding function\"\n    },\n    late_chunking: {\n      type: \"boolean\",\n      description: \"Parameter late_chunking for the jina embedding function\"\n    },\n    truncate: {\n      type: \"boolean\",\n      description: \"Parameter truncate for the jina embedding function\"\n    },\n    dimensions: {\n      type: \"integer\",\n      description: \"Parameter dimensions for the jina embedding function\"\n    },\n    embedding_type: {\n      type: \"string\",\n      description: \"Parameter embedding_type for the jina embedding function\"\n    },\n    normalized: {\n      type: \"boolean\",\n      description: \"Parameter normalized for the jina embedding function\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/ollama.json\nvar ollama_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Ollama Embedding Function Schema\",\n  description: \"Schema for the Ollama embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    url: {\n      type: \"string\",\n      description: \"The URL of the Ollama server\"\n    },\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for embeddings\"\n    },\n    timeout: {\n      type: \"integer\",\n      description: \"Timeout in seconds for the API request\"\n    }\n  },\n  required: [\n    \"url\",\n    \"model_name\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/onnx_mini_lm_l6_v2.json\nvar onnx_mini_lm_l6_v2_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Onnx_mini_lm_l6_v2 Embedding Function Schema\",\n  description: \"Schema for the onnx_mini_lm_l6_v2 embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    preferred_providers: {\n      type: \"array\",\n      items: {\n        type: \"string\"\n      },\n      description: \"Parameter preferred_providers for the onnx_mini_lm_l6_v2 embedding function\"\n    }\n  },\n  required: [],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/open_clip.json\nvar open_clip_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Open_clip Embedding Function Schema\",\n  description: \"Schema for the open_clip embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"Parameter model_name for the open_clip embedding function\"\n    },\n    checkpoint: {\n      type: \"string\",\n      description: \"Parameter checkpoint for the open_clip embedding function\"\n    },\n    device: {\n      type: \"string\",\n      description: \"Parameter device for the open_clip embedding function\"\n    }\n  },\n  required: [\n    \"model_name\",\n    \"checkpoint\",\n    \"device\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/openai.json\nvar openai_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"OpenAI Embedding Function Schema\",\n  description: \"Schema for the OpenAI embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for text embeddings\"\n    },\n    organization_id: {\n      type: [\n        \"string\",\n        \"null\"\n      ],\n      description: \"The OpenAI organization ID if applicable\"\n    },\n    api_base: {\n      type: [\n        \"string\",\n        \"null\"\n      ],\n      description: \"The base path for the API\"\n    },\n    api_type: {\n      type: [\n        \"string\",\n        \"null\"\n      ],\n      description: \"The type of the API deployment\"\n    },\n    api_version: {\n      type: [\n        \"string\",\n        \"null\"\n      ],\n      description: \"The api version for the API\"\n    },\n    deployment_id: {\n      type: [\n        \"string\",\n        \"null\"\n      ],\n      description: \"Deployment ID for Azure OpenAI\"\n    },\n    default_headers: {\n      type: [\n        \"object\",\n        \"null\"\n      ],\n      description: \"A mapping of default headers to be sent with each API request\"\n    },\n    dimensions: {\n      type: [\n        \"integer\",\n        \"null\"\n      ],\n      description: \"The number of dimensions for the embeddings\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Environment variable name that contains your API key for the OpenAI API\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/roboflow.json\nvar roboflow_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Roboflow Embedding Function Schema\",\n  description: \"Schema for the roboflow embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    api_url: {\n      type: \"string\",\n      description: \"Parameter api_url for the roboflow embedding function\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Parameter api_key_env_var for the roboflow embedding function\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"api_url\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/sentence_transformer.json\nvar sentence_transformer_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"SentenceTransformer Embedding Function Schema\",\n  description: \"Schema for the SentenceTransformer embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"Identifier of the SentenceTransformer model\"\n    },\n    device: {\n      type: \"string\",\n      description: \"Device used for computation\"\n    },\n    normalize_embeddings: {\n      type: \"boolean\",\n      description: \"Whether to normalize returned vectors\"\n    },\n    kwargs: {\n      type: \"object\",\n      description: \"Additional arguments to pass to the SentenceTransformer model\",\n      additionalProperties: {\n        type: [\n          \"string\",\n          \"integer\",\n          \"number\",\n          \"boolean\",\n          \"array\",\n          \"object\"\n        ]\n      }\n    }\n  },\n  required: [\n    \"model_name\",\n    \"device\",\n    \"normalize_embeddings\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/text2vec.json\nvar text2vec_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Text2vec Embedding Function Schema\",\n  description: \"Schema for the text2vec embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"Parameter model_name for the text2vec embedding function\"\n    }\n  },\n  required: [\n    \"model_name\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/transformers.json\nvar transformers_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Transformers Embedding Function Schema\",\n  description: \"Schema for the Transformers embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model: {\n      type: \"string\",\n      description: \"Identifier of the SentenceTransformer model\"\n    },\n    revision: {\n      type: \"string\",\n      description: \"Specific model version to use (can be a branch, tag name, or commit id)\"\n    },\n    quantized: {\n      type: \"boolean\",\n      description: \"Whether to load the 8-bit quantized version of the model\"\n    }\n  },\n  required: [\n    \"model\",\n    \"revision\",\n    \"quantized\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/voyageai.json\nvar voyageai_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Voyageai Embedding Function Schema\",\n  description: \"Schema for the voyageai embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"Parameter model_name for the voyageai embedding function\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Parameter api_key_env_var for the voyageai embedding function\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/cloudflare_workers_ai.json\nvar cloudflare_workers_ai_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Cloudflare Workers AI Embedding Function Schema\",\n  description: \"Schema for the Cloudflare Workers AI embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for text embeddings\"\n    },\n    account_id: {\n      type: \"string\",\n      description: \"The account ID for the Cloudflare Workers AI API\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"The environment variable name that contains your API key for the Cloudflare Workers AI API\"\n    },\n    gateway_id: {\n      type: \"string\",\n      description: \"The ID of the Cloudflare AI Gateway to use for a more customized solution\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\",\n    \"account_id\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/together_ai.json\nvar together_ai_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Together AI Embedding Function Schema\",\n  description: \"Schema for the Together AI embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model_name: {\n      type: \"string\",\n      description: \"The name of the model to use for text embeddings\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"The environment variable name that contains your API key for the Together AI API\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model_name\"\n  ],\n  additionalProperties: false\n};\n\n// ../../../../../schemas/embedding_functions/mistral.json\nvar mistral_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  title: \"Mistral Embedding Function Schema\",\n  description: \"Schema for the Mistral embedding function configuration\",\n  version: \"1.0.0\",\n  type: \"object\",\n  properties: {\n    model: {\n      type: \"string\",\n      description: \"Parameter model for the Mistral embedding function\"\n    },\n    api_key_env_var: {\n      type: \"string\",\n      description: \"Parameter api_key_env_var for the Mistral embedding function\"\n    }\n  },\n  required: [\n    \"api_key_env_var\",\n    \"model\"\n  ],\n  additionalProperties: false\n};\n\n// src/schema-utils.ts\n\nvar ajv = new ajv__WEBPACK_IMPORTED_MODULE_0__({\n  strict: false,\n  // Allow unknown keywords\n  allErrors: true\n});\nvar schemaMap = {\n  \"amazon-bedrock\": amazon_bedrock_default,\n  \"base-schema\": base_schema_default,\n  \"chroma-langchain\": chroma_langchain_default,\n  cohere: cohere_default,\n  default: default_default,\n  \"google-generative-ai\": google_generative_ai_default,\n  \"google-palm\": google_palm_default,\n  \"google-vertex\": google_vertex_default,\n  huggingface: huggingface_default,\n  \"huggingface-server\": huggingface_server_default,\n  instructor: instructor_default,\n  jina: jina_default,\n  ollama: ollama_default,\n  \"onnx-mini-lm-l6-v2\": onnx_mini_lm_l6_v2_default,\n  \"open-clip\": open_clip_default,\n  openai: openai_default,\n  roboflow: roboflow_default,\n  \"sentence-transformer\": sentence_transformer_default,\n  text2vec: text2vec_default,\n  transformers: transformers_default,\n  voyageai: voyageai_default,\n  \"cloudflare-worker-ai\": cloudflare_workers_ai_default,\n  \"together-ai\": together_ai_default,\n  mistral: mistral_default\n};\nfunction loadSchema(schemaName) {\n  if (!schemaMap[schemaName]) {\n    throw new Error(`Schema '${schemaName}' not found`);\n  }\n  return schemaMap[schemaName];\n}\nfunction validateConfigSchema(config, schemaName) {\n  const schema = loadSchema(schemaName);\n  const validate = ajv.compile(schema);\n  const valid = validate(config);\n  if (!valid) {\n    const errors = validate.errors || [];\n    const errorPaths = errors.map((e) => `${e.instancePath || \"/\"}: ${e.message}`).join(\", \");\n    throw new Error(\n      `Config validation failed for schema '${schemaName}': ${errorPaths}`\n    );\n  }\n}\nfunction getSchemaVersion(schemaName) {\n  const schema = loadSchema(schemaName);\n  return schema.version || \"1.0.0\";\n}\nfunction getAvailableSchemas() {\n  return Object.keys(schemaMap).filter(\n    (name) => name !== \"base_schema\"\n  );\n}\nfunction getSchemaInfo() {\n  const schemaInfo = {};\n  for (const schemaName of getAvailableSchemas()) {\n    try {\n      const schema = schemaMap[schemaName];\n      schemaInfo[schemaName] = {\n        version: schema.version || \"1.0.0\",\n        title: schema.title || \"\",\n        description: schema.description || \"\"\n      };\n    } catch (error) {\n      console.error(`Failed to load schema '${schemaName}':`, error);\n    }\n  }\n  return schemaInfo;\n}\n\n// src/index.ts\nvar camelToSnake = (str) => {\n  return str.replace(/([A-Z])/g, \"_$1\").toLowerCase();\n};\nvar snakeCase = (input) => {\n  if (Array.isArray(input)) {\n    return input.map(snakeCase);\n  }\n  if (input !== null && typeof input === \"object\") {\n    return Object.fromEntries(\n      Object.entries(input).map(([key, value]) => [\n        camelToSnake(key),\n        snakeCase(value)\n      ])\n    );\n  }\n  return input;\n};\nvar isBrowser = () => {\n  return typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@chroma-core+ai-embeddings-common@0.1.7/node_modules/@chroma-core/ai-embeddings-common/dist/index.mjs\n");

/***/ })

};
;