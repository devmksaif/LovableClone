"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3";
exports.ids = ["vendor-chunks/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/common.js":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/common.js ***!
  \*****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AZURE_ALIASES: () => (/* binding */ AZURE_ALIASES),\n/* harmony export */   AZURE_SECRETS: () => (/* binding */ AZURE_SECRETS),\n/* harmony export */   AZURE_SERIALIZABLE_KEYS: () => (/* binding */ AZURE_SERIALIZABLE_KEYS),\n/* harmony export */   _constructAzureFields: () => (/* binding */ _constructAzureFields),\n/* harmony export */   _getAzureClientOptions: () => (/* binding */ _getAzureClientOptions),\n/* harmony export */   _serializeAzureChat: () => (/* binding */ _serializeAzureChat)\n/* harmony export */ });\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/azure.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n\n\n\n\n//#region src/azure/chat_models/common.ts\nconst AZURE_ALIASES = {\n\topenAIApiKey: \"openai_api_key\",\n\topenAIApiVersion: \"openai_api_version\",\n\topenAIBasePath: \"openai_api_base\",\n\tdeploymentName: \"deployment_name\",\n\tazureOpenAIEndpoint: \"azure_endpoint\",\n\tazureOpenAIApiVersion: \"openai_api_version\",\n\tazureOpenAIBasePath: \"openai_api_base\",\n\tazureOpenAIApiDeploymentName: \"deployment_name\"\n};\nconst AZURE_SECRETS = { azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\" };\nconst AZURE_SERIALIZABLE_KEYS = [\n\t\"azureOpenAIApiKey\",\n\t\"azureOpenAIApiVersion\",\n\t\"azureOpenAIBasePath\",\n\t\"azureOpenAIEndpoint\",\n\t\"azureOpenAIApiInstanceName\",\n\t\"azureOpenAIApiDeploymentName\",\n\t\"deploymentName\",\n\t\"openAIApiKey\",\n\t\"openAIApiVersion\"\n];\nfunction _constructAzureFields(fields) {\n\tthis.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? fields?.openAIApiKey ?? fields?.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n\tthis.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n\tthis.azureOpenAIApiDeploymentName = fields?.azureOpenAIApiDeploymentName ?? fields?.deploymentName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\");\n\tthis.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? fields?.openAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n\tthis.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n\tthis.azureOpenAIEndpoint = fields?.azureOpenAIEndpoint ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_ENDPOINT\");\n\tthis.azureADTokenProvider = fields?.azureADTokenProvider;\n\tif (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) throw new Error(\"Azure OpenAI API key or Token Provider not found\");\n}\nfunction _getAzureClientOptions(options) {\n\tif (!this.client) {\n\t\tconst openAIEndpointConfig = {\n\t\t\tazureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n\t\t\tazureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n\t\t\tazureOpenAIApiKey: this.azureOpenAIApiKey,\n\t\t\tazureOpenAIBasePath: this.azureOpenAIBasePath,\n\t\t\tazureADTokenProvider: this.azureADTokenProvider,\n\t\t\tbaseURL: this.clientConfig.baseURL,\n\t\t\tazureOpenAIEndpoint: this.azureOpenAIEndpoint\n\t\t};\n\t\tconst endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_0__.getEndpoint)(openAIEndpointConfig);\n\t\tconst params = {\n\t\t\t...this.clientConfig,\n\t\t\tbaseURL: endpoint,\n\t\t\ttimeout: this.timeout,\n\t\t\tmaxRetries: 0\n\t\t};\n\t\tif (!this.azureADTokenProvider) params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n\t\tif (!params.baseURL) delete params.baseURL;\n\t\tlet env = (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnv)();\n\t\tif (env === \"node\" || env === \"deno\") env = `(${env}/${process.version}; ${process.platform}; ${process.arch})`;\n\t\tconst defaultHeaders = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_0__.normalizeHeaders)(params.defaultHeaders);\n\t\tparams.defaultHeaders = {\n\t\t\t...params.defaultHeaders,\n\t\t\t\"User-Agent\": defaultHeaders[\"User-Agent\"] ? `langchainjs-azure-openai/2.0.0 (${env})${defaultHeaders[\"User-Agent\"]}` : `langchainjs-azure-openai/2.0.0 (${env})`\n\t\t};\n\t\tthis.client = new openai__WEBPACK_IMPORTED_MODULE_1__.AzureOpenAI({\n\t\t\tapiVersion: this.azureOpenAIApiVersion,\n\t\t\tazureADTokenProvider: this.azureADTokenProvider,\n\t\t\tdeployment: this.azureOpenAIApiDeploymentName,\n\t\t\t...params\n\t\t});\n\t}\n\tconst requestOptions = {\n\t\t...this.clientConfig,\n\t\t...options\n\t};\n\tif (this.azureOpenAIApiKey) {\n\t\trequestOptions.headers = {\n\t\t\t\"api-key\": this.azureOpenAIApiKey,\n\t\t\t...requestOptions.headers\n\t\t};\n\t\trequestOptions.query = {\n\t\t\t\"api-version\": this.azureOpenAIApiVersion,\n\t\t\t...requestOptions.query\n\t\t};\n\t}\n\treturn requestOptions;\n}\nfunction _serializeAzureChat(input) {\n\tconst json = input;\n\tfunction isRecord(obj) {\n\t\treturn typeof obj === \"object\" && obj != null;\n\t}\n\tif (isRecord(json) && isRecord(json.kwargs)) {\n\t\tdelete json.kwargs.azure_openai_base_path;\n\t\tdelete json.kwargs.azure_openai_api_deployment_name;\n\t\tdelete json.kwargs.azure_openai_api_key;\n\t\tdelete json.kwargs.azure_openai_api_version;\n\t\tdelete json.kwargs.azure_open_ai_base_path;\n\t\tif (!json.kwargs.azure_endpoint && this.azureOpenAIEndpoint) json.kwargs.azure_endpoint = this.azureOpenAIEndpoint;\n\t\tif (!json.kwargs.azure_endpoint && this.azureOpenAIBasePath) {\n\t\t\tconst parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n\t\t\tif (parts.length === 2 && parts[0].startsWith(\"http\")) {\n\t\t\t\tconst [endpoint] = parts;\n\t\t\t\tjson.kwargs.azure_endpoint = endpoint;\n\t\t\t}\n\t\t}\n\t\tif (!json.kwargs.azure_endpoint && this.azureOpenAIApiInstanceName) json.kwargs.azure_endpoint = `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/`;\n\t\tif (!json.kwargs.deployment_name && this.azureOpenAIApiDeploymentName) json.kwargs.deployment_name = this.azureOpenAIApiDeploymentName;\n\t\tif (!json.kwargs.deployment_name && this.azureOpenAIBasePath) {\n\t\t\tconst parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n\t\t\tif (parts.length === 2) {\n\t\t\t\tconst [, deployment] = parts;\n\t\t\t\tjson.kwargs.deployment_name = deployment;\n\t\t\t}\n\t\t}\n\t\tif (json.kwargs.azure_endpoint && json.kwargs.deployment_name && json.kwargs.openai_api_base) delete json.kwargs.openai_api_base;\n\t\tif (json.kwargs.azure_openai_api_instance_name && json.kwargs.azure_endpoint) delete json.kwargs.azure_openai_api_instance_name;\n\t}\n\treturn json;\n}\n\n//#endregion\n\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/completions.js":
/*!**********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/completions.js ***!
  \**********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAICompletions: () => (/* binding */ AzureChatOpenAICompletions)\n/* harmony export */ });\n/* harmony import */ var _chat_models_completions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chat_models/completions.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/completions.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/common.js\");\n\n\n\n//#region src/azure/chat_models/completions.ts\nvar AzureChatOpenAICompletions = class extends _chat_models_completions_js__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAICompletions {\n\tazureOpenAIApiVersion;\n\tazureOpenAIApiKey;\n\tazureADTokenProvider;\n\tazureOpenAIApiInstanceName;\n\tazureOpenAIApiDeploymentName;\n\tazureOpenAIBasePath;\n\tazureOpenAIEndpoint;\n\t_llmType() {\n\t\treturn \"azure_openai\";\n\t}\n\tget lc_aliases() {\n\t\treturn {\n\t\t\t...super.lc_aliases,\n\t\t\t..._common_js__WEBPACK_IMPORTED_MODULE_1__.AZURE_ALIASES\n\t\t};\n\t}\n\tget lc_secrets() {\n\t\treturn {\n\t\t\t...super.lc_secrets,\n\t\t\t..._common_js__WEBPACK_IMPORTED_MODULE_1__.AZURE_SECRETS\n\t\t};\n\t}\n\tget lc_serializable_keys() {\n\t\treturn [...super.lc_serializable_keys, ..._common_js__WEBPACK_IMPORTED_MODULE_1__.AZURE_SERIALIZABLE_KEYS];\n\t}\n\tgetLsParams(options) {\n\t\tconst params = super.getLsParams(options);\n\t\tparams.ls_provider = \"azure\";\n\t\treturn params;\n\t}\n\tconstructor(fields) {\n\t\tsuper(fields);\n\t\t_common_js__WEBPACK_IMPORTED_MODULE_1__._constructAzureFields.call(this, fields);\n\t}\n\t_getClientOptions(options) {\n\t\treturn _common_js__WEBPACK_IMPORTED_MODULE_1__._getAzureClientOptions.call(this, options);\n\t}\n\ttoJSON() {\n\t\treturn _common_js__WEBPACK_IMPORTED_MODULE_1__._serializeAzureChat.call(this, super.toJSON());\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=completions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvYXp1cmUvY2hhdF9tb2RlbHMvY29tcGxldGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXlFO0FBQytFOztBQUV4SjtBQUNBLCtDQUErQyw4RUFBcUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHFEQUFhO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHFEQUFhO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QywrREFBdUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsNkRBQXFCO0FBQ3ZCO0FBQ0E7QUFDQSxTQUFTLDhEQUFzQjtBQUMvQjtBQUNBO0FBQ0EsU0FBUywyREFBbUI7QUFDNUI7QUFDQTs7QUFFQTtBQUNzQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5yb3V0ZXItbGFuZ2dyYXBoLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsYW5nY2hhaW4rb3BlbmFpQDEuMC4wX0BsYW5nY2hhaW4rY29yZUAxLjAuMV9vcGVuYWlANi43LjBfd3NAOC4xOC4zX3pvZEAzLjI1Ljc2X19fd3NAOC4xOC4zL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L2F6dXJlL2NoYXRfbW9kZWxzL2NvbXBsZXRpb25zLmpzP2ZmNDEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhdE9wZW5BSUNvbXBsZXRpb25zIH0gZnJvbSBcIi4uLy4uL2NoYXRfbW9kZWxzL2NvbXBsZXRpb25zLmpzXCI7XG5pbXBvcnQgeyBBWlVSRV9BTElBU0VTLCBBWlVSRV9TRUNSRVRTLCBBWlVSRV9TRVJJQUxJWkFCTEVfS0VZUywgX2NvbnN0cnVjdEF6dXJlRmllbGRzLCBfZ2V0QXp1cmVDbGllbnRPcHRpb25zLCBfc2VyaWFsaXplQXp1cmVDaGF0IH0gZnJvbSBcIi4vY29tbW9uLmpzXCI7XG5cbi8vI3JlZ2lvbiBzcmMvYXp1cmUvY2hhdF9tb2RlbHMvY29tcGxldGlvbnMudHNcbnZhciBBenVyZUNoYXRPcGVuQUlDb21wbGV0aW9ucyA9IGNsYXNzIGV4dGVuZHMgQ2hhdE9wZW5BSUNvbXBsZXRpb25zIHtcblx0YXp1cmVPcGVuQUlBcGlWZXJzaW9uO1xuXHRhenVyZU9wZW5BSUFwaUtleTtcblx0YXp1cmVBRFRva2VuUHJvdmlkZXI7XG5cdGF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lO1xuXHRhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lO1xuXHRhenVyZU9wZW5BSUJhc2VQYXRoO1xuXHRhenVyZU9wZW5BSUVuZHBvaW50O1xuXHRfbGxtVHlwZSgpIHtcblx0XHRyZXR1cm4gXCJhenVyZV9vcGVuYWlcIjtcblx0fVxuXHRnZXQgbGNfYWxpYXNlcygpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Li4uc3VwZXIubGNfYWxpYXNlcyxcblx0XHRcdC4uLkFaVVJFX0FMSUFTRVNcblx0XHR9O1xuXHR9XG5cdGdldCBsY19zZWNyZXRzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHQuLi5zdXBlci5sY19zZWNyZXRzLFxuXHRcdFx0Li4uQVpVUkVfU0VDUkVUU1xuXHRcdH07XG5cdH1cblx0Z2V0IGxjX3NlcmlhbGl6YWJsZV9rZXlzKCkge1xuXHRcdHJldHVybiBbLi4uc3VwZXIubGNfc2VyaWFsaXphYmxlX2tleXMsIC4uLkFaVVJFX1NFUklBTElaQUJMRV9LRVlTXTtcblx0fVxuXHRnZXRMc1BhcmFtcyhvcHRpb25zKSB7XG5cdFx0Y29uc3QgcGFyYW1zID0gc3VwZXIuZ2V0THNQYXJhbXMob3B0aW9ucyk7XG5cdFx0cGFyYW1zLmxzX3Byb3ZpZGVyID0gXCJhenVyZVwiO1xuXHRcdHJldHVybiBwYXJhbXM7XG5cdH1cblx0Y29uc3RydWN0b3IoZmllbGRzKSB7XG5cdFx0c3VwZXIoZmllbGRzKTtcblx0XHRfY29uc3RydWN0QXp1cmVGaWVsZHMuY2FsbCh0aGlzLCBmaWVsZHMpO1xuXHR9XG5cdF9nZXRDbGllbnRPcHRpb25zKG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gX2dldEF6dXJlQ2xpZW50T3B0aW9ucy5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXHR9XG5cdHRvSlNPTigpIHtcblx0XHRyZXR1cm4gX3NlcmlhbGl6ZUF6dXJlQ2hhdC5jYWxsKHRoaXMsIHN1cGVyLnRvSlNPTigpKTtcblx0fVxufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBBenVyZUNoYXRPcGVuQUlDb21wbGV0aW9ucyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGxldGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/completions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/index.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/index.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* binding */ AzureChatOpenAI)\n/* harmony export */ });\n/* harmony import */ var _chat_models_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chat_models/index.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/index.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/common.js\");\n/* harmony import */ var _completions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./completions.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/completions.js\");\n/* harmony import */ var _responses_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./responses.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/responses.js\");\n\n\n\n\n\n//#region src/azure/chat_models/index.ts\n/**\n* Azure OpenAI chat model integration.\n*\n* Setup:\n* Install `@langchain/openai` and set the following environment variables:\n*\n* ```bash\n* npm install @langchain/openai\n* export AZURE_OPENAI_API_KEY=\"your-api-key\"\n* export AZURE_OPENAI_API_DEPLOYMENT_NAME=\"your-deployment-name\"\n* export AZURE_OPENAI_API_VERSION=\"your-version\"\n* export AZURE_OPENAI_BASE_PATH=\"your-base-path\"\n* ```\n*\n* ## [Constructor args](https://api.js.langchain.com/classes/langchain_openai.AzureChatOpenAI.html#constructor)\n*\n* ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_openai.ChatOpenAICallOptions.html)\n*\n* Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n* They can also be passed via `.withConfig`, or the second arg in `.bindTools`, like shown in the examples below:\n*\n* ```typescript\n* // When calling `.withConfig`, call options should be passed via the first argument\n* const llmWithArgsBound = llm.withConfig({\n*   stop: [\"\\n\"],\n*   tools: [...],\n* });\n*\n* // When calling `.bindTools`, call options should be passed via the second argument\n* const llmWithTools = llm.bindTools(\n*   [...],\n*   {\n*     tool_choice: \"auto\",\n*   }\n* );\n* ```\n*\n* ## Examples\n*\n* <details open>\n* <summary><strong>Instantiate</strong></summary>\n*\n* ```typescript\n* import { AzureChatOpenAI } from '@langchain/openai';\n*\n* const llm = new AzureChatOpenAI({\n*   azureOpenAIApiKey: process.env.AZURE_OPENAI_API_KEY, // In Node.js defaults to process.env.AZURE_OPENAI_API_KEY\n*   azureOpenAIApiInstanceName: process.env.AZURE_OPENAI_API_INSTANCE_NAME, // In Node.js defaults to process.env.AZURE_OPENAI_API_INSTANCE_NAME\n*   azureOpenAIApiDeploymentName: process.env.AZURE_OPENAI_API_DEPLOYMENT_NAME, // In Node.js defaults to process.env.AZURE_OPENAI_API_DEPLOYMENT_NAME\n*   azureOpenAIApiVersion: process.env.AZURE_OPENAI_API_VERSION, // In Node.js defaults to process.env.AZURE_OPENAI_API_VERSION\n*   temperature: 0,\n*   maxTokens: undefined,\n*   timeout: undefined,\n*   maxRetries: 2,\n*   // apiKey: \"...\",\n*   // baseUrl: \"...\",\n*   // other params...\n* });\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Invoking</strong></summary>\n*\n* ```typescript\n* const input = `Translate \"I love programming\" into French.`;\n*\n* // Models also accept a list of chat messages or a formatted prompt\n* const result = await llm.invoke(input);\n* console.log(result);\n* ```\n*\n* ```txt\n* AIMessage {\n*   \"id\": \"chatcmpl-9u4Mpu44CbPjwYFkTbeoZgvzB00Tz\",\n*   \"content\": \"J'adore la programmation.\",\n*   \"response_metadata\": {\n*     \"tokenUsage\": {\n*       \"completionTokens\": 5,\n*       \"promptTokens\": 28,\n*       \"totalTokens\": 33\n*     },\n*     \"finish_reason\": \"stop\",\n*     \"system_fingerprint\": \"fp_3aa7262c27\"\n*   },\n*   \"usage_metadata\": {\n*     \"input_tokens\": 28,\n*     \"output_tokens\": 5,\n*     \"total_tokens\": 33\n*   }\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Streaming Chunks</strong></summary>\n*\n* ```typescript\n* for await (const chunk of await llm.stream(input)) {\n*   console.log(chunk);\n* }\n* ```\n*\n* ```txt\n* AIMessageChunk {\n*   \"id\": \"chatcmpl-9u4NWB7yUeHCKdLr6jP3HpaOYHTqs\",\n*   \"content\": \"\"\n* }\n* AIMessageChunk {\n*   \"content\": \"J\"\n* }\n* AIMessageChunk {\n*   \"content\": \"'adore\"\n* }\n* AIMessageChunk {\n*   \"content\": \" la\"\n* }\n* AIMessageChunk {\n*   \"content\": \" programmation\",,\n* }\n* AIMessageChunk {\n*   \"content\": \".\",,\n* }\n* AIMessageChunk {\n*   \"content\": \"\",\n*   \"response_metadata\": {\n*     \"finish_reason\": \"stop\",\n*     \"system_fingerprint\": \"fp_c9aa9c0491\"\n*   },\n* }\n* AIMessageChunk {\n*   \"content\": \"\",\n*   \"usage_metadata\": {\n*     \"input_tokens\": 28,\n*     \"output_tokens\": 5,\n*     \"total_tokens\": 33\n*   }\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Aggregate Streamed Chunks</strong></summary>\n*\n* ```typescript\n* import { AIMessageChunk } from '@langchain/core/messages';\n* import { concat } from '@langchain/core/utils/stream';\n*\n* const stream = await llm.stream(input);\n* let full: AIMessageChunk | undefined;\n* for await (const chunk of stream) {\n*   full = !full ? chunk : concat(full, chunk);\n* }\n* console.log(full);\n* ```\n*\n* ```txt\n* AIMessageChunk {\n*   \"id\": \"chatcmpl-9u4PnX6Fy7OmK46DASy0bH6cxn5Xu\",\n*   \"content\": \"J'adore la programmation.\",\n*   \"response_metadata\": {\n*     \"prompt\": 0,\n*     \"completion\": 0,\n*     \"finish_reason\": \"stop\",\n*   },\n*   \"usage_metadata\": {\n*     \"input_tokens\": 28,\n*     \"output_tokens\": 5,\n*     \"total_tokens\": 33\n*   }\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Bind tools</strong></summary>\n*\n* ```typescript\n* import { z } from 'zod';\n*\n* const GetWeather = {\n*   name: \"GetWeather\",\n*   description: \"Get the current weather in a given location\",\n*   schema: z.object({\n*     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n*   }),\n* }\n*\n* const GetPopulation = {\n*   name: \"GetPopulation\",\n*   description: \"Get the current population in a given location\",\n*   schema: z.object({\n*     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n*   }),\n* }\n*\n* const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n* const aiMsg = await llmWithTools.invoke(\n*   \"Which city is hotter today and which is bigger: LA or NY?\"\n* );\n* console.log(aiMsg.tool_calls);\n* ```\n*\n* ```txt\n* [\n*   {\n*     name: 'GetWeather',\n*     args: { location: 'Los Angeles, CA' },\n*     type: 'tool_call',\n*     id: 'call_uPU4FiFzoKAtMxfmPnfQL6UK'\n*   },\n*   {\n*     name: 'GetWeather',\n*     args: { location: 'New York, NY' },\n*     type: 'tool_call',\n*     id: 'call_UNkEwuQsHrGYqgDQuH9nPAtX'\n*   },\n*   {\n*     name: 'GetPopulation',\n*     args: { location: 'Los Angeles, CA' },\n*     type: 'tool_call',\n*     id: 'call_kL3OXxaq9OjIKqRTpvjaCH14'\n*   },\n*   {\n*     name: 'GetPopulation',\n*     args: { location: 'New York, NY' },\n*     type: 'tool_call',\n*     id: 'call_s9KQB1UWj45LLGaEnjz0179q'\n*   }\n* ]\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Structured Output</strong></summary>\n*\n* ```typescript\n* import { z } from 'zod';\n*\n* const Joke = z.object({\n*   setup: z.string().describe(\"The setup of the joke\"),\n*   punchline: z.string().describe(\"The punchline to the joke\"),\n*   rating: z.number().nullable().describe(\"How funny the joke is, from 1 to 10\")\n* }).describe('Joke to tell user.');\n*\n* const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n* const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n* console.log(jokeResult);\n* ```\n*\n* ```txt\n* {\n*   setup: 'Why was the cat sitting on the computer?',\n*   punchline: 'Because it wanted to keep an eye on the mouse!',\n*   rating: 7\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>JSON Object Response Format</strong></summary>\n*\n* ```typescript\n* const jsonLlm = llm.withConfig({ response_format: { type: \"json_object\" } });\n* const jsonLlmAiMsg = await jsonLlm.invoke(\n*   \"Return a JSON object with key 'randomInts' and a value of 10 random ints in [0-99]\"\n* );\n* console.log(jsonLlmAiMsg.content);\n* ```\n*\n* ```txt\n* {\n*   \"randomInts\": [23, 87, 45, 12, 78, 34, 56, 90, 11, 67]\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Multimodal</strong></summary>\n*\n* ```typescript\n* import { HumanMessage } from '@langchain/core/messages';\n*\n* const imageUrl = \"https://example.com/image.jpg\";\n* const imageData = await fetch(imageUrl).then(res => res.arrayBuffer());\n* const base64Image = Buffer.from(imageData).toString('base64');\n*\n* const message = new HumanMessage({\n*   content: [\n*     { type: \"text\", text: \"describe the weather in this image\" },\n*     {\n*       type: \"image_url\",\n*       image_url: { url: `data:image/jpeg;base64,${base64Image}` },\n*     },\n*   ]\n* });\n*\n* const imageDescriptionAiMsg = await llm.invoke([message]);\n* console.log(imageDescriptionAiMsg.content);\n* ```\n*\n* ```txt\n* The weather in the image appears to be clear and sunny. The sky is mostly blue with a few scattered white clouds, indicating fair weather. The bright sunlight is casting shadows on the green, grassy hill, suggesting it is a pleasant day with good visibility. There are no signs of rain or stormy conditions.\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Usage Metadata</strong></summary>\n*\n* ```typescript\n* const aiMsgForMetadata = await llm.invoke(input);\n* console.log(aiMsgForMetadata.usage_metadata);\n* ```\n*\n* ```txt\n* { input_tokens: 28, output_tokens: 5, total_tokens: 33 }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Logprobs</strong></summary>\n*\n* ```typescript\n* const logprobsLlm = new ChatOpenAI({ model: \"gpt-4o-mini\", logprobs: true });\n* const aiMsgForLogprobs = await logprobsLlm.invoke(input);\n* console.log(aiMsgForLogprobs.response_metadata.logprobs);\n* ```\n*\n* ```txt\n* {\n*   content: [\n*     {\n*       token: 'J',\n*       logprob: -0.000050616763,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     {\n*       token: \"'\",\n*       logprob: -0.01868736,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     {\n*       token: 'ad',\n*       logprob: -0.0000030545007,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     { token: 'ore', logprob: 0, bytes: [Array], top_logprobs: [] },\n*     {\n*       token: ' la',\n*       logprob: -0.515404,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     {\n*       token: ' programm',\n*       logprob: -0.0000118755715,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     { token: 'ation', logprob: 0, bytes: [Array], top_logprobs: [] },\n*     {\n*       token: '.',\n*       logprob: -0.0000037697225,\n*       bytes: [Array],\n*       top_logprobs: []\n*     }\n*   ],\n*   refusal: null\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Response Metadata</strong></summary>\n*\n* ```typescript\n* const aiMsgForResponseMetadata = await llm.invoke(input);\n* console.log(aiMsgForResponseMetadata.response_metadata);\n* ```\n*\n* ```txt\n* {\n*   tokenUsage: { completionTokens: 5, promptTokens: 28, totalTokens: 33 },\n*   finish_reason: 'stop',\n*   system_fingerprint: 'fp_3aa7262c27'\n* }\n* ```\n* </details>\n*/\nvar AzureChatOpenAI = class extends _chat_models_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI {\n\tazureOpenAIApiVersion;\n\tazureOpenAIApiKey;\n\tazureADTokenProvider;\n\tazureOpenAIApiInstanceName;\n\tazureOpenAIApiDeploymentName;\n\tazureOpenAIBasePath;\n\tazureOpenAIEndpoint;\n\t_llmType() {\n\t\treturn \"azure_openai\";\n\t}\n\tget lc_aliases() {\n\t\treturn {\n\t\t\t...super.lc_aliases,\n\t\t\t..._common_js__WEBPACK_IMPORTED_MODULE_1__.AZURE_ALIASES\n\t\t};\n\t}\n\tget lc_secrets() {\n\t\treturn {\n\t\t\t...super.lc_secrets,\n\t\t\t..._common_js__WEBPACK_IMPORTED_MODULE_1__.AZURE_SECRETS\n\t\t};\n\t}\n\tget lc_serializable_keys() {\n\t\treturn [...super.lc_serializable_keys, ..._common_js__WEBPACK_IMPORTED_MODULE_1__.AZURE_SERIALIZABLE_KEYS];\n\t}\n\tgetLsParams(options) {\n\t\tconst params = super.getLsParams(options);\n\t\tparams.ls_provider = \"azure\";\n\t\treturn params;\n\t}\n\tconstructor(fields) {\n\t\tsuper({\n\t\t\t...fields,\n\t\t\tcompletions: new _completions_js__WEBPACK_IMPORTED_MODULE_2__.AzureChatOpenAICompletions(fields),\n\t\t\tresponses: new _responses_js__WEBPACK_IMPORTED_MODULE_3__.AzureChatOpenAIResponses(fields)\n\t\t});\n\t\t_common_js__WEBPACK_IMPORTED_MODULE_1__._constructAzureFields.call(this, fields);\n\t}\n\t/** @internal */\n\t_getStructuredOutputMethod(config) {\n\t\tconst ensuredConfig = { ...config };\n\t\tif (this.model.startsWith(\"gpt-4o\")) {\n\t\t\tif (ensuredConfig?.method === void 0) return \"functionCalling\";\n\t\t}\n\t\treturn super._getStructuredOutputMethod(ensuredConfig);\n\t}\n\ttoJSON() {\n\t\treturn _common_js__WEBPACK_IMPORTED_MODULE_1__._serializeAzureChat.call(this, super.toJSON());\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/responses.js":
/*!********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/responses.js ***!
  \********************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAIResponses: () => (/* binding */ AzureChatOpenAIResponses)\n/* harmony export */ });\n/* harmony import */ var _chat_models_responses_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chat_models/responses.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/responses.js\");\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/common.js\");\n\n\n\n//#region src/azure/chat_models/responses.ts\nvar AzureChatOpenAIResponses = class extends _chat_models_responses_js__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAIResponses {\n\tazureOpenAIApiVersion;\n\tazureOpenAIApiKey;\n\tazureADTokenProvider;\n\tazureOpenAIApiInstanceName;\n\tazureOpenAIApiDeploymentName;\n\tazureOpenAIBasePath;\n\tazureOpenAIEndpoint;\n\t_llmType() {\n\t\treturn \"azure_openai\";\n\t}\n\tget lc_aliases() {\n\t\treturn {\n\t\t\t...super.lc_aliases,\n\t\t\t..._common_js__WEBPACK_IMPORTED_MODULE_1__.AZURE_ALIASES\n\t\t};\n\t}\n\tget lc_secrets() {\n\t\treturn {\n\t\t\t...super.lc_secrets,\n\t\t\t..._common_js__WEBPACK_IMPORTED_MODULE_1__.AZURE_SECRETS\n\t\t};\n\t}\n\tget lc_serializable_keys() {\n\t\treturn [...super.lc_serializable_keys, ..._common_js__WEBPACK_IMPORTED_MODULE_1__.AZURE_SERIALIZABLE_KEYS];\n\t}\n\tgetLsParams(options) {\n\t\tconst params = super.getLsParams(options);\n\t\tparams.ls_provider = \"azure\";\n\t\treturn params;\n\t}\n\tconstructor(fields) {\n\t\tsuper(fields);\n\t\t_common_js__WEBPACK_IMPORTED_MODULE_1__._constructAzureFields.call(this, fields);\n\t}\n\t_getClientOptions(options) {\n\t\treturn _common_js__WEBPACK_IMPORTED_MODULE_1__._getAzureClientOptions.call(this, options);\n\t}\n\ttoJSON() {\n\t\treturn _common_js__WEBPACK_IMPORTED_MODULE_1__._serializeAzureChat.call(this, super.toJSON());\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=responses.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvYXp1cmUvY2hhdF9tb2RlbHMvcmVzcG9uc2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRTtBQUNtRjs7QUFFeEo7QUFDQSw2Q0FBNkMsMEVBQW1CO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxxREFBYTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxxREFBYTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsK0RBQXVCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLDZEQUFxQjtBQUN2QjtBQUNBO0FBQ0EsU0FBUyw4REFBc0I7QUFDL0I7QUFDQTtBQUNBLFNBQVMsMkRBQW1CO0FBQzVCO0FBQ0E7O0FBRUE7QUFDb0M7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK29wZW5haUAxLjAuMF9AbGFuZ2NoYWluK2NvcmVAMS4wLjFfb3BlbmFpQDYuNy4wX3dzQDguMTguM196b2RAMy4yNS43Nl9fX3dzQDguMTguMy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9henVyZS9jaGF0X21vZGVscy9yZXNwb25zZXMuanM/YjI5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGF0T3BlbkFJUmVzcG9uc2VzIH0gZnJvbSBcIi4uLy4uL2NoYXRfbW9kZWxzL3Jlc3BvbnNlcy5qc1wiO1xuaW1wb3J0IHsgQVpVUkVfQUxJQVNFUywgQVpVUkVfU0VDUkVUUywgQVpVUkVfU0VSSUFMSVpBQkxFX0tFWVMsIF9jb25zdHJ1Y3RBenVyZUZpZWxkcywgX2dldEF6dXJlQ2xpZW50T3B0aW9ucywgX3NlcmlhbGl6ZUF6dXJlQ2hhdCB9IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuXG4vLyNyZWdpb24gc3JjL2F6dXJlL2NoYXRfbW9kZWxzL3Jlc3BvbnNlcy50c1xudmFyIEF6dXJlQ2hhdE9wZW5BSVJlc3BvbnNlcyA9IGNsYXNzIGV4dGVuZHMgQ2hhdE9wZW5BSVJlc3BvbnNlcyB7XG5cdGF6dXJlT3BlbkFJQXBpVmVyc2lvbjtcblx0YXp1cmVPcGVuQUlBcGlLZXk7XG5cdGF6dXJlQURUb2tlblByb3ZpZGVyO1xuXHRhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZTtcblx0YXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZTtcblx0YXp1cmVPcGVuQUlCYXNlUGF0aDtcblx0YXp1cmVPcGVuQUlFbmRwb2ludDtcblx0X2xsbVR5cGUoKSB7XG5cdFx0cmV0dXJuIFwiYXp1cmVfb3BlbmFpXCI7XG5cdH1cblx0Z2V0IGxjX2FsaWFzZXMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLnN1cGVyLmxjX2FsaWFzZXMsXG5cdFx0XHQuLi5BWlVSRV9BTElBU0VTXG5cdFx0fTtcblx0fVxuXHRnZXQgbGNfc2VjcmV0cygpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Li4uc3VwZXIubGNfc2VjcmV0cyxcblx0XHRcdC4uLkFaVVJFX1NFQ1JFVFNcblx0XHR9O1xuXHR9XG5cdGdldCBsY19zZXJpYWxpemFibGVfa2V5cygpIHtcblx0XHRyZXR1cm4gWy4uLnN1cGVyLmxjX3NlcmlhbGl6YWJsZV9rZXlzLCAuLi5BWlVSRV9TRVJJQUxJWkFCTEVfS0VZU107XG5cdH1cblx0Z2V0THNQYXJhbXMob3B0aW9ucykge1xuXHRcdGNvbnN0IHBhcmFtcyA9IHN1cGVyLmdldExzUGFyYW1zKG9wdGlvbnMpO1xuXHRcdHBhcmFtcy5sc19wcm92aWRlciA9IFwiYXp1cmVcIjtcblx0XHRyZXR1cm4gcGFyYW1zO1xuXHR9XG5cdGNvbnN0cnVjdG9yKGZpZWxkcykge1xuXHRcdHN1cGVyKGZpZWxkcyk7XG5cdFx0X2NvbnN0cnVjdEF6dXJlRmllbGRzLmNhbGwodGhpcywgZmllbGRzKTtcblx0fVxuXHRfZ2V0Q2xpZW50T3B0aW9ucyhvcHRpb25zKSB7XG5cdFx0cmV0dXJuIF9nZXRBenVyZUNsaWVudE9wdGlvbnMuY2FsbCh0aGlzLCBvcHRpb25zKTtcblx0fVxuXHR0b0pTT04oKSB7XG5cdFx0cmV0dXJuIF9zZXJpYWxpemVBenVyZUNoYXQuY2FsbCh0aGlzLCBzdXBlci50b0pTT04oKSk7XG5cdH1cbn07XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgQXp1cmVDaGF0T3BlbkFJUmVzcG9uc2VzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/responses.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/embeddings.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/embeddings.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureOpenAIEmbeddings: () => (/* binding */ AzureOpenAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/azure.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/client.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/client.js\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../embeddings.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/embeddings.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n\n\n\n\n\n\n//#region src/azure/embeddings.ts\nvar AzureOpenAIEmbeddings = class extends _embeddings_js__WEBPACK_IMPORTED_MODULE_2__.OpenAIEmbeddings {\n\tazureOpenAIApiVersion;\n\tazureOpenAIApiKey;\n\tazureADTokenProvider;\n\tazureOpenAIApiInstanceName;\n\tazureOpenAIApiDeploymentName;\n\tazureOpenAIBasePath;\n\tconstructor(fields) {\n\t\tsuper(fields);\n\t\tthis.batchSize = fields?.batchSize ?? 1;\n\t\tthis.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? fields?.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n\t\tthis.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? fields?.openAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n\t\tthis.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n\t\tthis.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n\t\tthis.azureOpenAIApiDeploymentName = (fields?.azureOpenAIApiEmbeddingsDeploymentName || fields?.azureOpenAIApiDeploymentName) ?? ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME\") || (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n\t\tthis.azureADTokenProvider = fields?.azureADTokenProvider;\n\t}\n\tasync embeddingWithRetry(request) {\n\t\tif (!this.client) {\n\t\t\tconst openAIEndpointConfig = {\n\t\t\t\tazureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n\t\t\t\tazureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n\t\t\t\tazureOpenAIApiKey: this.azureOpenAIApiKey,\n\t\t\t\tazureOpenAIBasePath: this.azureOpenAIBasePath,\n\t\t\t\tazureADTokenProvider: this.azureADTokenProvider,\n\t\t\t\tbaseURL: this.clientConfig.baseURL\n\t\t\t};\n\t\t\tconst endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_0__.getEndpoint)(openAIEndpointConfig);\n\t\t\tconst params = {\n\t\t\t\t...this.clientConfig,\n\t\t\t\tbaseURL: endpoint,\n\t\t\t\ttimeout: this.timeout,\n\t\t\t\tmaxRetries: 0\n\t\t\t};\n\t\t\tif (!this.azureADTokenProvider) params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n\t\t\tif (!params.baseURL) delete params.baseURL;\n\t\t\tconst defaultHeaders = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_0__.normalizeHeaders)(params.defaultHeaders);\n\t\t\tparams.defaultHeaders = {\n\t\t\t\t...params.defaultHeaders,\n\t\t\t\t\"User-Agent\": defaultHeaders[\"User-Agent\"] ? `${defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2` : `langchainjs-azure-openai-v2`\n\t\t\t};\n\t\t\tthis.client = new openai__WEBPACK_IMPORTED_MODULE_3__.AzureOpenAI({\n\t\t\t\tapiVersion: this.azureOpenAIApiVersion,\n\t\t\t\tazureADTokenProvider: this.azureADTokenProvider,\n\t\t\t\tdeployment: this.azureOpenAIApiDeploymentName,\n\t\t\t\t...params\n\t\t\t});\n\t\t}\n\t\tconst requestOptions = {};\n\t\tif (this.azureOpenAIApiKey) {\n\t\t\trequestOptions.headers = {\n\t\t\t\t\"api-key\": this.azureOpenAIApiKey,\n\t\t\t\t...requestOptions.headers\n\t\t\t};\n\t\t\trequestOptions.query = {\n\t\t\t\t\"api-version\": this.azureOpenAIApiVersion,\n\t\t\t\t...requestOptions.query\n\t\t\t};\n\t\t}\n\t\treturn this.caller.call(async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await this.client.embeddings.create(request, requestOptions);\n\t\t\t\treturn res;\n\t\t\t} catch (e) {\n\t\t\t\tconst error = (0,_utils_client_js__WEBPACK_IMPORTED_MODULE_1__.wrapOpenAIClientError)(e);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=embeddings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvYXp1cmUvZW1iZWRkaW5ncy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBa0U7QUFDUDtBQUNQO0FBQ2Y7QUFDOEI7O0FBRW5FO0FBQ0EsMENBQTBDLDREQUFnQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsaUZBQXNCO0FBQ2hHLDRGQUE0RixpRkFBc0I7QUFDbEgsNERBQTRELGlGQUFzQjtBQUNsRiwwRUFBMEUsaUZBQXNCO0FBQ2hHLG1JQUFtSSxpRkFBc0IsbURBQW1ELGlGQUFzQjtBQUNsTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNERBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixpRUFBZ0I7QUFDMUM7QUFDQTtBQUNBLG9EQUFvRCw2QkFBNkI7QUFDakY7QUFDQSxxQkFBcUIsK0NBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsa0JBQWtCLHVFQUFxQjtBQUN2QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK29wZW5haUAxLjAuMF9AbGFuZ2NoYWluK2NvcmVAMS4wLjFfb3BlbmFpQDYuNy4wX3dzQDguMTguM196b2RAMy4yNS43Nl9fX3dzQDguMTguMy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9henVyZS9lbWJlZGRpbmdzLmpzP2NiZTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RW5kcG9pbnQsIG5vcm1hbGl6ZUhlYWRlcnMgfSBmcm9tIFwiLi4vdXRpbHMvYXp1cmUuanNcIjtcbmltcG9ydCB7IHdyYXBPcGVuQUlDbGllbnRFcnJvciB9IGZyb20gXCIuLi91dGlscy9jbGllbnQuanNcIjtcbmltcG9ydCB7IE9wZW5BSUVtYmVkZGluZ3MgfSBmcm9tIFwiLi4vZW1iZWRkaW5ncy5qc1wiO1xuaW1wb3J0IHsgQXp1cmVPcGVuQUkgfSBmcm9tIFwib3BlbmFpXCI7XG5pbXBvcnQgeyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS91dGlscy9lbnZcIjtcblxuLy8jcmVnaW9uIHNyYy9henVyZS9lbWJlZGRpbmdzLnRzXG52YXIgQXp1cmVPcGVuQUlFbWJlZGRpbmdzID0gY2xhc3MgZXh0ZW5kcyBPcGVuQUlFbWJlZGRpbmdzIHtcblx0YXp1cmVPcGVuQUlBcGlWZXJzaW9uO1xuXHRhenVyZU9wZW5BSUFwaUtleTtcblx0YXp1cmVBRFRva2VuUHJvdmlkZXI7XG5cdGF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lO1xuXHRhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lO1xuXHRhenVyZU9wZW5BSUJhc2VQYXRoO1xuXHRjb25zdHJ1Y3RvcihmaWVsZHMpIHtcblx0XHRzdXBlcihmaWVsZHMpO1xuXHRcdHRoaXMuYmF0Y2hTaXplID0gZmllbGRzPy5iYXRjaFNpemUgPz8gMTtcblx0XHR0aGlzLmF6dXJlT3BlbkFJQXBpS2V5ID0gZmllbGRzPy5henVyZU9wZW5BSUFwaUtleSA/PyBmaWVsZHM/LmFwaUtleSA/PyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiQVpVUkVfT1BFTkFJX0FQSV9LRVlcIik7XG5cdFx0dGhpcy5henVyZU9wZW5BSUFwaVZlcnNpb24gPSBmaWVsZHM/LmF6dXJlT3BlbkFJQXBpVmVyc2lvbiA/PyBmaWVsZHM/Lm9wZW5BSUFwaVZlcnNpb24gPz8gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIkFaVVJFX09QRU5BSV9BUElfVkVSU0lPTlwiKTtcblx0XHR0aGlzLmF6dXJlT3BlbkFJQmFzZVBhdGggPSBmaWVsZHM/LmF6dXJlT3BlbkFJQmFzZVBhdGggPz8gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIkFaVVJFX09QRU5BSV9CQVNFX1BBVEhcIik7XG5cdFx0dGhpcy5henVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSA9IGZpZWxkcz8uYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUgPz8gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIkFaVVJFX09QRU5BSV9BUElfSU5TVEFOQ0VfTkFNRVwiKTtcblx0XHR0aGlzLmF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUgPSAoZmllbGRzPy5henVyZU9wZW5BSUFwaUVtYmVkZGluZ3NEZXBsb3ltZW50TmFtZSB8fCBmaWVsZHM/LmF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUpID8/IChnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiQVpVUkVfT1BFTkFJX0FQSV9FTUJFRERJTkdTX0RFUExPWU1FTlRfTkFNRVwiKSB8fCBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiQVpVUkVfT1BFTkFJX0FQSV9ERVBMT1lNRU5UX05BTUVcIikpO1xuXHRcdHRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIgPSBmaWVsZHM/LmF6dXJlQURUb2tlblByb3ZpZGVyO1xuXHR9XG5cdGFzeW5jIGVtYmVkZGluZ1dpdGhSZXRyeShyZXF1ZXN0KSB7XG5cdFx0aWYgKCF0aGlzLmNsaWVudCkge1xuXHRcdFx0Y29uc3Qgb3BlbkFJRW5kcG9pbnRDb25maWcgPSB7XG5cdFx0XHRcdGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWU6IHRoaXMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSxcblx0XHRcdFx0YXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWU6IHRoaXMuYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUsXG5cdFx0XHRcdGF6dXJlT3BlbkFJQXBpS2V5OiB0aGlzLmF6dXJlT3BlbkFJQXBpS2V5LFxuXHRcdFx0XHRhenVyZU9wZW5BSUJhc2VQYXRoOiB0aGlzLmF6dXJlT3BlbkFJQmFzZVBhdGgsXG5cdFx0XHRcdGF6dXJlQURUb2tlblByb3ZpZGVyOiB0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyLFxuXHRcdFx0XHRiYXNlVVJMOiB0aGlzLmNsaWVudENvbmZpZy5iYXNlVVJMXG5cdFx0XHR9O1xuXHRcdFx0Y29uc3QgZW5kcG9pbnQgPSBnZXRFbmRwb2ludChvcGVuQUlFbmRwb2ludENvbmZpZyk7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHRcdC4uLnRoaXMuY2xpZW50Q29uZmlnLFxuXHRcdFx0XHRiYXNlVVJMOiBlbmRwb2ludCxcblx0XHRcdFx0dGltZW91dDogdGhpcy50aW1lb3V0LFxuXHRcdFx0XHRtYXhSZXRyaWVzOiAwXG5cdFx0XHR9O1xuXHRcdFx0aWYgKCF0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyKSBwYXJhbXMuYXBpS2V5ID0gb3BlbkFJRW5kcG9pbnRDb25maWcuYXp1cmVPcGVuQUlBcGlLZXk7XG5cdFx0XHRpZiAoIXBhcmFtcy5iYXNlVVJMKSBkZWxldGUgcGFyYW1zLmJhc2VVUkw7XG5cdFx0XHRjb25zdCBkZWZhdWx0SGVhZGVycyA9IG5vcm1hbGl6ZUhlYWRlcnMocGFyYW1zLmRlZmF1bHRIZWFkZXJzKTtcblx0XHRcdHBhcmFtcy5kZWZhdWx0SGVhZGVycyA9IHtcblx0XHRcdFx0Li4ucGFyYW1zLmRlZmF1bHRIZWFkZXJzLFxuXHRcdFx0XHRcIlVzZXItQWdlbnRcIjogZGVmYXVsdEhlYWRlcnNbXCJVc2VyLUFnZW50XCJdID8gYCR7ZGVmYXVsdEhlYWRlcnNbXCJVc2VyLUFnZW50XCJdfTogbGFuZ2NoYWluanMtYXp1cmUtb3BlbmFpLXYyYCA6IGBsYW5nY2hhaW5qcy1henVyZS1vcGVuYWktdjJgXG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5jbGllbnQgPSBuZXcgQXp1cmVPcGVuQUkoe1xuXHRcdFx0XHRhcGlWZXJzaW9uOiB0aGlzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbixcblx0XHRcdFx0YXp1cmVBRFRva2VuUHJvdmlkZXI6IHRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIsXG5cdFx0XHRcdGRlcGxveW1lbnQ6IHRoaXMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSxcblx0XHRcdFx0Li4ucGFyYW1zXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Y29uc3QgcmVxdWVzdE9wdGlvbnMgPSB7fTtcblx0XHRpZiAodGhpcy5henVyZU9wZW5BSUFwaUtleSkge1xuXHRcdFx0cmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHtcblx0XHRcdFx0XCJhcGkta2V5XCI6IHRoaXMuYXp1cmVPcGVuQUlBcGlLZXksXG5cdFx0XHRcdC4uLnJlcXVlc3RPcHRpb25zLmhlYWRlcnNcblx0XHRcdH07XG5cdFx0XHRyZXF1ZXN0T3B0aW9ucy5xdWVyeSA9IHtcblx0XHRcdFx0XCJhcGktdmVyc2lvblwiOiB0aGlzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbixcblx0XHRcdFx0Li4ucmVxdWVzdE9wdGlvbnMucXVlcnlcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmNhbGxlci5jYWxsKGFzeW5jICgpID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LmVtYmVkZGluZ3MuY3JlYXRlKHJlcXVlc3QsIHJlcXVlc3RPcHRpb25zKTtcblx0XHRcdFx0cmV0dXJuIHJlcztcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0Y29uc3QgZXJyb3IgPSB3cmFwT3BlbkFJQ2xpZW50RXJyb3IoZSk7XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59O1xuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IEF6dXJlT3BlbkFJRW1iZWRkaW5ncyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1iZWRkaW5ncy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/llms.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/llms.js ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureOpenAI: () => (/* binding */ AzureOpenAI$1)\n/* harmony export */ });\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/azure.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _llms_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../llms.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/llms.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n\n\n\n\n\n//#region src/azure/llms.ts\nvar AzureOpenAI$1 = class extends _llms_js__WEBPACK_IMPORTED_MODULE_1__.OpenAI {\n\tazureOpenAIApiVersion;\n\tazureOpenAIApiKey;\n\tazureADTokenProvider;\n\tazureOpenAIApiInstanceName;\n\tazureOpenAIApiDeploymentName;\n\tazureOpenAIBasePath;\n\tazureOpenAIEndpoint;\n\tget lc_aliases() {\n\t\treturn {\n\t\t\t...super.lc_aliases,\n\t\t\topenAIApiKey: \"openai_api_key\",\n\t\t\topenAIApiVersion: \"openai_api_version\",\n\t\t\topenAIBasePath: \"openai_api_base\",\n\t\t\tdeploymentName: \"deployment_name\",\n\t\t\tazureOpenAIEndpoint: \"azure_endpoint\",\n\t\t\tazureOpenAIApiVersion: \"openai_api_version\",\n\t\t\tazureOpenAIBasePath: \"openai_api_base\",\n\t\t\tazureOpenAIApiDeploymentName: \"deployment_name\"\n\t\t};\n\t}\n\tget lc_secrets() {\n\t\treturn {\n\t\t\t...super.lc_secrets,\n\t\t\tazureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\"\n\t\t};\n\t}\n\tconstructor(fields) {\n\t\tsuper(fields);\n\t\tthis.azureOpenAIApiDeploymentName = (fields?.azureOpenAIApiCompletionsDeploymentName || fields?.azureOpenAIApiDeploymentName) ?? ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") || (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n\t\tthis.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? fields?.openAIApiKey ?? fields?.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n\t\tthis.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n\t\tthis.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? fields?.openAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n\t\tthis.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n\t\tthis.azureOpenAIEndpoint = fields?.azureOpenAIEndpoint ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"AZURE_OPENAI_ENDPOINT\");\n\t\tthis.azureADTokenProvider = fields?.azureADTokenProvider;\n\t\tif (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) throw new Error(\"Azure OpenAI API key or Token Provider not found\");\n\t}\n\t_getClientOptions(options) {\n\t\tif (!this.client) {\n\t\t\tconst openAIEndpointConfig = {\n\t\t\t\tazureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n\t\t\t\tazureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n\t\t\t\tazureOpenAIApiKey: this.azureOpenAIApiKey,\n\t\t\t\tazureOpenAIBasePath: this.azureOpenAIBasePath,\n\t\t\t\tazureADTokenProvider: this.azureADTokenProvider,\n\t\t\t\tbaseURL: this.clientConfig.baseURL\n\t\t\t};\n\t\t\tconst endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_0__.getEndpoint)(openAIEndpointConfig);\n\t\t\tconst params = {\n\t\t\t\t...this.clientConfig,\n\t\t\t\tbaseURL: endpoint,\n\t\t\t\ttimeout: this.timeout,\n\t\t\t\tmaxRetries: 0\n\t\t\t};\n\t\t\tif (!this.azureADTokenProvider) params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n\t\t\tif (!params.baseURL) delete params.baseURL;\n\t\t\tconst defaultHeaders = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_0__.normalizeHeaders)(params.defaultHeaders);\n\t\t\tparams.defaultHeaders = {\n\t\t\t\t...params.defaultHeaders,\n\t\t\t\t\"User-Agent\": defaultHeaders[\"User-Agent\"] ? `${defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2` : `langchainjs-azure-openai-v2`\n\t\t\t};\n\t\t\tthis.client = new openai__WEBPACK_IMPORTED_MODULE_2__.AzureOpenAI({\n\t\t\t\tapiVersion: this.azureOpenAIApiVersion,\n\t\t\t\tazureADTokenProvider: this.azureADTokenProvider,\n\t\t\t\t...params\n\t\t\t});\n\t\t}\n\t\tconst requestOptions = {\n\t\t\t...this.clientConfig,\n\t\t\t...options\n\t\t};\n\t\tif (this.azureOpenAIApiKey) {\n\t\t\trequestOptions.headers = {\n\t\t\t\t\"api-key\": this.azureOpenAIApiKey,\n\t\t\t\t...requestOptions.headers\n\t\t\t};\n\t\t\trequestOptions.query = {\n\t\t\t\t\"api-version\": this.azureOpenAIApiVersion,\n\t\t\t\t...requestOptions.query\n\t\t\t};\n\t\t}\n\t\treturn requestOptions;\n\t}\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\t\tfunction isRecord(obj) {\n\t\t\treturn typeof obj === \"object\" && obj != null;\n\t\t}\n\t\tif (isRecord(json) && isRecord(json.kwargs)) {\n\t\t\tdelete json.kwargs.azure_openai_base_path;\n\t\t\tdelete json.kwargs.azure_openai_api_deployment_name;\n\t\t\tdelete json.kwargs.azure_openai_api_key;\n\t\t\tdelete json.kwargs.azure_openai_api_version;\n\t\t\tdelete json.kwargs.azure_open_ai_base_path;\n\t\t}\n\t\treturn json;\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=llms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvYXp1cmUvbGxtcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFrRTtBQUM5QjtBQUNDO0FBQzhCOztBQUVuRTtBQUNBLGtDQUFrQyw0Q0FBTTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9JQUFvSSxpRkFBc0Isb0RBQW9ELGlGQUFzQjtBQUNwTyxrR0FBa0csaUZBQXNCO0FBQ3hILDBFQUEwRSxpRkFBc0I7QUFDaEcsNEZBQTRGLGlGQUFzQjtBQUNsSCw0REFBNEQsaUZBQXNCO0FBQ2xGLDREQUE0RCxpRkFBc0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNERBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixpRUFBZ0I7QUFDMUM7QUFDQTtBQUNBLG9EQUFvRCw2QkFBNkI7QUFDakY7QUFDQSxxQkFBcUIsK0NBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDd0M7QUFDeEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK29wZW5haUAxLjAuMF9AbGFuZ2NoYWluK2NvcmVAMS4wLjFfb3BlbmFpQDYuNy4wX3dzQDguMTguM196b2RAMy4yNS43Nl9fX3dzQDguMTguMy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9henVyZS9sbG1zLmpzP2I0ZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RW5kcG9pbnQsIG5vcm1hbGl6ZUhlYWRlcnMgfSBmcm9tIFwiLi4vdXRpbHMvYXp1cmUuanNcIjtcbmltcG9ydCB7IE9wZW5BSSB9IGZyb20gXCIuLi9sbG1zLmpzXCI7XG5pbXBvcnQgeyBBenVyZU9wZW5BSSB9IGZyb20gXCJvcGVuYWlcIjtcbmltcG9ydCB7IGdldEVudmlyb25tZW50VmFyaWFibGUgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2VudlwiO1xuXG4vLyNyZWdpb24gc3JjL2F6dXJlL2xsbXMudHNcbnZhciBBenVyZU9wZW5BSSQxID0gY2xhc3MgZXh0ZW5kcyBPcGVuQUkge1xuXHRhenVyZU9wZW5BSUFwaVZlcnNpb247XG5cdGF6dXJlT3BlbkFJQXBpS2V5O1xuXHRhenVyZUFEVG9rZW5Qcm92aWRlcjtcblx0YXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWU7XG5cdGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWU7XG5cdGF6dXJlT3BlbkFJQmFzZVBhdGg7XG5cdGF6dXJlT3BlbkFJRW5kcG9pbnQ7XG5cdGdldCBsY19hbGlhc2VzKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHQuLi5zdXBlci5sY19hbGlhc2VzLFxuXHRcdFx0b3BlbkFJQXBpS2V5OiBcIm9wZW5haV9hcGlfa2V5XCIsXG5cdFx0XHRvcGVuQUlBcGlWZXJzaW9uOiBcIm9wZW5haV9hcGlfdmVyc2lvblwiLFxuXHRcdFx0b3BlbkFJQmFzZVBhdGg6IFwib3BlbmFpX2FwaV9iYXNlXCIsXG5cdFx0XHRkZXBsb3ltZW50TmFtZTogXCJkZXBsb3ltZW50X25hbWVcIixcblx0XHRcdGF6dXJlT3BlbkFJRW5kcG9pbnQ6IFwiYXp1cmVfZW5kcG9pbnRcIixcblx0XHRcdGF6dXJlT3BlbkFJQXBpVmVyc2lvbjogXCJvcGVuYWlfYXBpX3ZlcnNpb25cIixcblx0XHRcdGF6dXJlT3BlbkFJQmFzZVBhdGg6IFwib3BlbmFpX2FwaV9iYXNlXCIsXG5cdFx0XHRhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lOiBcImRlcGxveW1lbnRfbmFtZVwiXG5cdFx0fTtcblx0fVxuXHRnZXQgbGNfc2VjcmV0cygpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Li4uc3VwZXIubGNfc2VjcmV0cyxcblx0XHRcdGF6dXJlT3BlbkFJQXBpS2V5OiBcIkFaVVJFX09QRU5BSV9BUElfS0VZXCJcblx0XHR9O1xuXHR9XG5cdGNvbnN0cnVjdG9yKGZpZWxkcykge1xuXHRcdHN1cGVyKGZpZWxkcyk7XG5cdFx0dGhpcy5henVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lID0gKGZpZWxkcz8uYXp1cmVPcGVuQUlBcGlDb21wbGV0aW9uc0RlcGxveW1lbnROYW1lIHx8IGZpZWxkcz8uYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSkgPz8gKGdldEVudmlyb25tZW50VmFyaWFibGUoXCJBWlVSRV9PUEVOQUlfQVBJX0NPTVBMRVRJT05TX0RFUExPWU1FTlRfTkFNRVwiKSB8fCBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiQVpVUkVfT1BFTkFJX0FQSV9ERVBMT1lNRU5UX05BTUVcIikpO1xuXHRcdHRoaXMuYXp1cmVPcGVuQUlBcGlLZXkgPSBmaWVsZHM/LmF6dXJlT3BlbkFJQXBpS2V5ID8/IGZpZWxkcz8ub3BlbkFJQXBpS2V5ID8/IGZpZWxkcz8uYXBpS2V5ID8/IGdldEVudmlyb25tZW50VmFyaWFibGUoXCJBWlVSRV9PUEVOQUlfQVBJX0tFWVwiKTtcblx0XHR0aGlzLmF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lID0gZmllbGRzPy5henVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSA/PyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiQVpVUkVfT1BFTkFJX0FQSV9JTlNUQU5DRV9OQU1FXCIpO1xuXHRcdHRoaXMuYXp1cmVPcGVuQUlBcGlWZXJzaW9uID0gZmllbGRzPy5henVyZU9wZW5BSUFwaVZlcnNpb24gPz8gZmllbGRzPy5vcGVuQUlBcGlWZXJzaW9uID8/IGdldEVudmlyb25tZW50VmFyaWFibGUoXCJBWlVSRV9PUEVOQUlfQVBJX1ZFUlNJT05cIik7XG5cdFx0dGhpcy5henVyZU9wZW5BSUJhc2VQYXRoID0gZmllbGRzPy5henVyZU9wZW5BSUJhc2VQYXRoID8/IGdldEVudmlyb25tZW50VmFyaWFibGUoXCJBWlVSRV9PUEVOQUlfQkFTRV9QQVRIXCIpO1xuXHRcdHRoaXMuYXp1cmVPcGVuQUlFbmRwb2ludCA9IGZpZWxkcz8uYXp1cmVPcGVuQUlFbmRwb2ludCA/PyBnZXRFbnZpcm9ubWVudFZhcmlhYmxlKFwiQVpVUkVfT1BFTkFJX0VORFBPSU5UXCIpO1xuXHRcdHRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIgPSBmaWVsZHM/LmF6dXJlQURUb2tlblByb3ZpZGVyO1xuXHRcdGlmICghdGhpcy5henVyZU9wZW5BSUFwaUtleSAmJiAhdGhpcy5hcGlLZXkgJiYgIXRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIpIHRocm93IG5ldyBFcnJvcihcIkF6dXJlIE9wZW5BSSBBUEkga2V5IG9yIFRva2VuIFByb3ZpZGVyIG5vdCBmb3VuZFwiKTtcblx0fVxuXHRfZ2V0Q2xpZW50T3B0aW9ucyhvcHRpb25zKSB7XG5cdFx0aWYgKCF0aGlzLmNsaWVudCkge1xuXHRcdFx0Y29uc3Qgb3BlbkFJRW5kcG9pbnRDb25maWcgPSB7XG5cdFx0XHRcdGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWU6IHRoaXMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSxcblx0XHRcdFx0YXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWU6IHRoaXMuYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUsXG5cdFx0XHRcdGF6dXJlT3BlbkFJQXBpS2V5OiB0aGlzLmF6dXJlT3BlbkFJQXBpS2V5LFxuXHRcdFx0XHRhenVyZU9wZW5BSUJhc2VQYXRoOiB0aGlzLmF6dXJlT3BlbkFJQmFzZVBhdGgsXG5cdFx0XHRcdGF6dXJlQURUb2tlblByb3ZpZGVyOiB0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyLFxuXHRcdFx0XHRiYXNlVVJMOiB0aGlzLmNsaWVudENvbmZpZy5iYXNlVVJMXG5cdFx0XHR9O1xuXHRcdFx0Y29uc3QgZW5kcG9pbnQgPSBnZXRFbmRwb2ludChvcGVuQUlFbmRwb2ludENvbmZpZyk7XG5cdFx0XHRjb25zdCBwYXJhbXMgPSB7XG5cdFx0XHRcdC4uLnRoaXMuY2xpZW50Q29uZmlnLFxuXHRcdFx0XHRiYXNlVVJMOiBlbmRwb2ludCxcblx0XHRcdFx0dGltZW91dDogdGhpcy50aW1lb3V0LFxuXHRcdFx0XHRtYXhSZXRyaWVzOiAwXG5cdFx0XHR9O1xuXHRcdFx0aWYgKCF0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyKSBwYXJhbXMuYXBpS2V5ID0gb3BlbkFJRW5kcG9pbnRDb25maWcuYXp1cmVPcGVuQUlBcGlLZXk7XG5cdFx0XHRpZiAoIXBhcmFtcy5iYXNlVVJMKSBkZWxldGUgcGFyYW1zLmJhc2VVUkw7XG5cdFx0XHRjb25zdCBkZWZhdWx0SGVhZGVycyA9IG5vcm1hbGl6ZUhlYWRlcnMocGFyYW1zLmRlZmF1bHRIZWFkZXJzKTtcblx0XHRcdHBhcmFtcy5kZWZhdWx0SGVhZGVycyA9IHtcblx0XHRcdFx0Li4ucGFyYW1zLmRlZmF1bHRIZWFkZXJzLFxuXHRcdFx0XHRcIlVzZXItQWdlbnRcIjogZGVmYXVsdEhlYWRlcnNbXCJVc2VyLUFnZW50XCJdID8gYCR7ZGVmYXVsdEhlYWRlcnNbXCJVc2VyLUFnZW50XCJdfTogbGFuZ2NoYWluanMtYXp1cmUtb3BlbmFpLXYyYCA6IGBsYW5nY2hhaW5qcy1henVyZS1vcGVuYWktdjJgXG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5jbGllbnQgPSBuZXcgQXp1cmVPcGVuQUkoe1xuXHRcdFx0XHRhcGlWZXJzaW9uOiB0aGlzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbixcblx0XHRcdFx0YXp1cmVBRFRva2VuUHJvdmlkZXI6IHRoaXMuYXp1cmVBRFRva2VuUHJvdmlkZXIsXG5cdFx0XHRcdC4uLnBhcmFtc1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGNvbnN0IHJlcXVlc3RPcHRpb25zID0ge1xuXHRcdFx0Li4udGhpcy5jbGllbnRDb25maWcsXG5cdFx0XHQuLi5vcHRpb25zXG5cdFx0fTtcblx0XHRpZiAodGhpcy5henVyZU9wZW5BSUFwaUtleSkge1xuXHRcdFx0cmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHtcblx0XHRcdFx0XCJhcGkta2V5XCI6IHRoaXMuYXp1cmVPcGVuQUlBcGlLZXksXG5cdFx0XHRcdC4uLnJlcXVlc3RPcHRpb25zLmhlYWRlcnNcblx0XHRcdH07XG5cdFx0XHRyZXF1ZXN0T3B0aW9ucy5xdWVyeSA9IHtcblx0XHRcdFx0XCJhcGktdmVyc2lvblwiOiB0aGlzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbixcblx0XHRcdFx0Li4ucmVxdWVzdE9wdGlvbnMucXVlcnlcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiByZXF1ZXN0T3B0aW9ucztcblx0fVxuXHR0b0pTT04oKSB7XG5cdFx0Y29uc3QganNvbiA9IHN1cGVyLnRvSlNPTigpO1xuXHRcdGZ1bmN0aW9uIGlzUmVjb3JkKG9iaikge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgb2JqICE9IG51bGw7XG5cdFx0fVxuXHRcdGlmIChpc1JlY29yZChqc29uKSAmJiBpc1JlY29yZChqc29uLmt3YXJncykpIHtcblx0XHRcdGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuYWlfYmFzZV9wYXRoO1xuXHRcdFx0ZGVsZXRlIGpzb24ua3dhcmdzLmF6dXJlX29wZW5haV9hcGlfZGVwbG95bWVudF9uYW1lO1xuXHRcdFx0ZGVsZXRlIGpzb24ua3dhcmdzLmF6dXJlX29wZW5haV9hcGlfa2V5O1xuXHRcdFx0ZGVsZXRlIGpzb24ua3dhcmdzLmF6dXJlX29wZW5haV9hcGlfdmVyc2lvbjtcblx0XHRcdGRlbGV0ZSBqc29uLmt3YXJncy5henVyZV9vcGVuX2FpX2Jhc2VfcGF0aDtcblx0XHR9XG5cdFx0cmV0dXJuIGpzb247XG5cdH1cbn07XG5cbi8vI2VuZHJlZ2lvblxuZXhwb3J0IHsgQXp1cmVPcGVuQUkkMSBhcyBBenVyZU9wZW5BSSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGxtcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/base.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/base.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatOpenAI: () => (/* binding */ BaseChatOpenAI)\n/* harmony export */ });\n/* harmony import */ var _utils_misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/misc.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/azure.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_tools_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/tools.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/tools.js\");\n/* harmony import */ var _utils_output_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/output.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/output.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/language_models/chat_models.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/runnables/index.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/output_parsers/index.js\");\n/* harmony import */ var _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @langchain/core/output_parsers/openai_tools */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/output_parsers/openai_tools/index.js\");\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/types/index.js\");\n/* harmony import */ var _langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @langchain/core/utils/json_schema */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/json_schema.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//#region src/chat_models/base.ts\n/** @internal */\nvar BaseChatOpenAI = class extends _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_6__.BaseChatModel {\n\ttemperature;\n\ttopP;\n\tfrequencyPenalty;\n\tpresencePenalty;\n\tn;\n\tlogitBias;\n\tmodel = \"gpt-3.5-turbo\";\n\tmodelKwargs;\n\tstop;\n\tstopSequences;\n\tuser;\n\ttimeout;\n\tstreaming = false;\n\tstreamUsage = true;\n\tmaxTokens;\n\tlogprobs;\n\ttopLogprobs;\n\tapiKey;\n\torganization;\n\t__includeRawResponse;\n\t/** @internal */\n\tclient;\n\t/** @internal */\n\tclientConfig;\n\t/**\n\t* Whether the model supports the `strict` argument when passing in tools.\n\t* If `undefined` the `strict` argument will not be passed to OpenAI.\n\t*/\n\tsupportsStrictToolCalling;\n\taudio;\n\tmodalities;\n\treasoning;\n\t/**\n\t* Must be set to `true` in tenancies with Zero Data Retention. Setting to `true` will disable\n\t* output storage in the Responses API, but this DOES NOT enable Zero Data Retention in your\n\t* OpenAI organization or project. This must be configured directly with OpenAI.\n\t*\n\t* See:\n\t* https://platform.openai.com/docs/guides/your-data\n\t* https://platform.openai.com/docs/api-reference/responses/create#responses-create-store\n\t*\n\t* @default false\n\t*/\n\tzdrEnabled;\n\t/**\n\t* Service tier to use for this request. Can be \"auto\", \"default\", or \"flex\" or \"priority\".\n\t* Specifies the service tier for prioritization and latency optimization.\n\t*/\n\tservice_tier;\n\t/**\n\t* Used by OpenAI to cache responses for similar requests to optimize your cache\n\t* hit rates.\n\t* [Learn more](https://platform.openai.com/docs/guides/prompt-caching).\n\t*/\n\tpromptCacheKey;\n\t/**\n\t* The verbosity of the model's response.\n\t*/\n\tverbosity;\n\tdefaultOptions;\n\t_llmType() {\n\t\treturn \"openai\";\n\t}\n\tstatic lc_name() {\n\t\treturn \"ChatOpenAI\";\n\t}\n\tget callKeys() {\n\t\treturn [\n\t\t\t...super.callKeys,\n\t\t\t\"options\",\n\t\t\t\"function_call\",\n\t\t\t\"functions\",\n\t\t\t\"tools\",\n\t\t\t\"tool_choice\",\n\t\t\t\"promptIndex\",\n\t\t\t\"response_format\",\n\t\t\t\"seed\",\n\t\t\t\"reasoning\",\n\t\t\t\"service_tier\"\n\t\t];\n\t}\n\tlc_serializable = true;\n\tget lc_secrets() {\n\t\treturn {\n\t\t\tapiKey: \"OPENAI_API_KEY\",\n\t\t\torganization: \"OPENAI_ORGANIZATION\"\n\t\t};\n\t}\n\tget lc_aliases() {\n\t\treturn {\n\t\t\tapiKey: \"openai_api_key\",\n\t\t\tmodelName: \"model\"\n\t\t};\n\t}\n\tget lc_serializable_keys() {\n\t\treturn [\n\t\t\t\"configuration\",\n\t\t\t\"logprobs\",\n\t\t\t\"topLogprobs\",\n\t\t\t\"prefixMessages\",\n\t\t\t\"supportsStrictToolCalling\",\n\t\t\t\"modalities\",\n\t\t\t\"audio\",\n\t\t\t\"temperature\",\n\t\t\t\"maxTokens\",\n\t\t\t\"topP\",\n\t\t\t\"frequencyPenalty\",\n\t\t\t\"presencePenalty\",\n\t\t\t\"n\",\n\t\t\t\"logitBias\",\n\t\t\t\"user\",\n\t\t\t\"streaming\",\n\t\t\t\"streamUsage\",\n\t\t\t\"model\",\n\t\t\t\"modelName\",\n\t\t\t\"modelKwargs\",\n\t\t\t\"stop\",\n\t\t\t\"stopSequences\",\n\t\t\t\"timeout\",\n\t\t\t\"apiKey\",\n\t\t\t\"cache\",\n\t\t\t\"maxConcurrency\",\n\t\t\t\"maxRetries\",\n\t\t\t\"verbose\",\n\t\t\t\"callbacks\",\n\t\t\t\"tags\",\n\t\t\t\"metadata\",\n\t\t\t\"disableStreaming\",\n\t\t\t\"zdrEnabled\",\n\t\t\t\"reasoning\",\n\t\t\t\"promptCacheKey\",\n\t\t\t\"verbosity\"\n\t\t];\n\t}\n\tgetLsParams(options) {\n\t\tconst params = this.invocationParams(options);\n\t\treturn {\n\t\t\tls_provider: \"openai\",\n\t\t\tls_model_name: this.model,\n\t\t\tls_model_type: \"chat\",\n\t\t\tls_temperature: params.temperature ?? void 0,\n\t\t\tls_max_tokens: params.max_tokens ?? void 0,\n\t\t\tls_stop: options.stop\n\t\t};\n\t}\n\t/** @ignore */\n\t_identifyingParams() {\n\t\treturn {\n\t\t\tmodel_name: this.model,\n\t\t\t...this.invocationParams(),\n\t\t\t...this.clientConfig\n\t\t};\n\t}\n\t/**\n\t* Get the identifying parameters for the model\n\t*/\n\tidentifyingParams() {\n\t\treturn this._identifyingParams();\n\t}\n\tconstructor(fields) {\n\t\tsuper(fields ?? {});\n\t\tconst configApiKey = typeof fields?.configuration?.apiKey === \"string\" ? fields?.configuration?.apiKey : void 0;\n\t\tthis.apiKey = fields?.apiKey ?? configApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_5__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n\t\tthis.organization = fields?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_5__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n\t\tthis.model = fields?.model ?? fields?.modelName ?? this.model;\n\t\tthis.modelKwargs = fields?.modelKwargs ?? {};\n\t\tthis.timeout = fields?.timeout;\n\t\tthis.temperature = fields?.temperature ?? this.temperature;\n\t\tthis.topP = fields?.topP ?? this.topP;\n\t\tthis.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n\t\tthis.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n\t\tthis.logprobs = fields?.logprobs;\n\t\tthis.topLogprobs = fields?.topLogprobs;\n\t\tthis.n = fields?.n ?? this.n;\n\t\tthis.logitBias = fields?.logitBias;\n\t\tthis.stop = fields?.stopSequences ?? fields?.stop;\n\t\tthis.stopSequences = this.stop;\n\t\tthis.user = fields?.user;\n\t\tthis.__includeRawResponse = fields?.__includeRawResponse;\n\t\tthis.audio = fields?.audio;\n\t\tthis.modalities = fields?.modalities;\n\t\tthis.reasoning = fields?.reasoning;\n\t\tthis.maxTokens = fields?.maxCompletionTokens ?? fields?.maxTokens;\n\t\tthis.promptCacheKey = fields?.promptCacheKey ?? this.promptCacheKey;\n\t\tthis.verbosity = fields?.verbosity ?? this.verbosity;\n\t\tthis.disableStreaming = fields?.disableStreaming === true;\n\t\tthis.streaming = fields?.streaming === true;\n\t\tif (this.disableStreaming) this.streaming = false;\n\t\tif (fields?.streaming === false) this.disableStreaming = true;\n\t\tthis.streamUsage = fields?.streamUsage ?? this.streamUsage;\n\t\tif (this.disableStreaming) this.streamUsage = false;\n\t\tthis.clientConfig = {\n\t\t\tapiKey: this.apiKey,\n\t\t\torganization: this.organization,\n\t\t\tdangerouslyAllowBrowser: true,\n\t\t\t...fields?.configuration\n\t\t};\n\t\tif (fields?.supportsStrictToolCalling !== void 0) this.supportsStrictToolCalling = fields.supportsStrictToolCalling;\n\t\tif (fields?.service_tier !== void 0) this.service_tier = fields.service_tier;\n\t\tthis.zdrEnabled = fields?.zdrEnabled ?? false;\n\t}\n\t/**\n\t* Returns backwards compatible reasoning parameters from constructor params and call options\n\t* @internal\n\t*/\n\t_getReasoningParams(options) {\n\t\tif (!(0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_0__.isReasoningModel)(this.model)) return;\n\t\tlet reasoning;\n\t\tif (this.reasoning !== void 0) reasoning = {\n\t\t\t...reasoning,\n\t\t\t...this.reasoning\n\t\t};\n\t\tif (options?.reasoning !== void 0) reasoning = {\n\t\t\t...reasoning,\n\t\t\t...options.reasoning\n\t\t};\n\t\treturn reasoning;\n\t}\n\t/**\n\t* Returns an openai compatible response format from a set of options\n\t* @internal\n\t*/\n\t_getResponseFormat(resFormat) {\n\t\tif (resFormat && resFormat.type === \"json_schema\" && resFormat.json_schema.schema && (0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_11__.isInteropZodSchema)(resFormat.json_schema.schema)) return (0,_utils_output_js__WEBPACK_IMPORTED_MODULE_3__.interopZodResponseFormat)(resFormat.json_schema.schema, resFormat.json_schema.name, { description: resFormat.json_schema.description });\n\t\treturn resFormat;\n\t}\n\t_combineCallOptions(additionalOptions) {\n\t\treturn {\n\t\t\t...this.defaultOptions,\n\t\t\t...additionalOptions ?? {}\n\t\t};\n\t}\n\t/** @internal */\n\t_getClientOptions(options) {\n\t\tif (!this.client) {\n\t\t\tconst openAIEndpointConfig = { baseURL: this.clientConfig.baseURL };\n\t\t\tconst endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.getEndpoint)(openAIEndpointConfig);\n\t\t\tconst params = {\n\t\t\t\t...this.clientConfig,\n\t\t\t\tbaseURL: endpoint,\n\t\t\t\ttimeout: this.timeout,\n\t\t\t\tmaxRetries: 0\n\t\t\t};\n\t\t\tif (!params.baseURL) delete params.baseURL;\n\t\t\tthis.client = new openai__WEBPACK_IMPORTED_MODULE_4__.OpenAI(params);\n\t\t}\n\t\tconst requestOptions = {\n\t\t\t...this.clientConfig,\n\t\t\t...options\n\t\t};\n\t\treturn requestOptions;\n\t}\n\t_convertChatOpenAIToolToCompletionsTool(tool, fields) {\n\t\tif ((0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_2__.isCustomTool)(tool)) return (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_2__.convertResponsesCustomTool)(tool.metadata.customTool);\n\t\tif ((0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_7__.isOpenAITool)(tool)) {\n\t\t\tif (fields?.strict !== void 0) return {\n\t\t\t\t...tool,\n\t\t\t\tfunction: {\n\t\t\t\t\t...tool.function,\n\t\t\t\t\tstrict: fields.strict\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn tool;\n\t\t}\n\t\treturn (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_2__._convertToOpenAITool)(tool, fields);\n\t}\n\tbindTools(tools, kwargs) {\n\t\tlet strict;\n\t\tif (kwargs?.strict !== void 0) strict = kwargs.strict;\n\t\telse if (this.supportsStrictToolCalling !== void 0) strict = this.supportsStrictToolCalling;\n\t\treturn this.withConfig({\n\t\t\ttools: tools.map((tool) => (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_2__.isBuiltInTool)(tool) || (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_2__.isCustomTool)(tool) ? tool : this._convertChatOpenAIToolToCompletionsTool(tool, { strict })),\n\t\t\t...kwargs\n\t\t});\n\t}\n\tasync stream(input, options) {\n\t\treturn super.stream(input, this._combineCallOptions(options));\n\t}\n\tasync invoke(input, options) {\n\t\treturn super.invoke(input, this._combineCallOptions(options));\n\t}\n\t/** @ignore */\n\t_combineLLMOutput(...llmOutputs) {\n\t\treturn llmOutputs.reduce((acc, llmOutput) => {\n\t\t\tif (llmOutput && llmOutput.tokenUsage) {\n\t\t\t\tacc.tokenUsage.completionTokens += llmOutput.tokenUsage.completionTokens ?? 0;\n\t\t\t\tacc.tokenUsage.promptTokens += llmOutput.tokenUsage.promptTokens ?? 0;\n\t\t\t\tacc.tokenUsage.totalTokens += llmOutput.tokenUsage.totalTokens ?? 0;\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, { tokenUsage: {\n\t\t\tcompletionTokens: 0,\n\t\t\tpromptTokens: 0,\n\t\t\ttotalTokens: 0\n\t\t} });\n\t}\n\tasync getNumTokensFromMessages(messages) {\n\t\tlet totalCount = 0;\n\t\tlet tokensPerMessage = 0;\n\t\tlet tokensPerName = 0;\n\t\tif (this.model === \"gpt-3.5-turbo-0301\") {\n\t\t\ttokensPerMessage = 4;\n\t\t\ttokensPerName = -1;\n\t\t} else {\n\t\t\ttokensPerMessage = 3;\n\t\t\ttokensPerName = 1;\n\t\t}\n\t\tconst countPerMessage = await Promise.all(messages.map(async (message) => {\n\t\t\tconst textCount = await this.getNumTokens(message.content);\n\t\t\tconst roleCount = await this.getNumTokens((0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_0__.messageToOpenAIRole)(message));\n\t\t\tconst nameCount = message.name !== void 0 ? tokensPerName + await this.getNumTokens(message.name) : 0;\n\t\t\tlet count = textCount + tokensPerMessage + roleCount + nameCount;\n\t\t\tconst openAIMessage = message;\n\t\t\tif (openAIMessage._getType() === \"function\") count -= 2;\n\t\t\tif (openAIMessage.additional_kwargs?.function_call) count += 3;\n\t\t\tif (openAIMessage?.additional_kwargs.function_call?.name) count += await this.getNumTokens(openAIMessage.additional_kwargs.function_call?.name);\n\t\t\tif (openAIMessage.additional_kwargs.function_call?.arguments) try {\n\t\t\t\tcount += await this.getNumTokens(JSON.stringify(JSON.parse(openAIMessage.additional_kwargs.function_call?.arguments)));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"Error parsing function arguments\", error, JSON.stringify(openAIMessage.additional_kwargs.function_call));\n\t\t\t\tcount += await this.getNumTokens(openAIMessage.additional_kwargs.function_call?.arguments);\n\t\t\t}\n\t\t\ttotalCount += count;\n\t\t\treturn count;\n\t\t}));\n\t\ttotalCount += 3;\n\t\treturn {\n\t\t\ttotalCount,\n\t\t\tcountPerMessage\n\t\t};\n\t}\n\t/** @internal */\n\tasync _getNumTokensFromGenerations(generations) {\n\t\tconst generationUsages = await Promise.all(generations.map(async (generation) => {\n\t\t\tif (generation.message.additional_kwargs?.function_call) return (await this.getNumTokensFromMessages([generation.message])).countPerMessage[0];\n\t\t\telse return await this.getNumTokens(generation.message.content);\n\t\t}));\n\t\treturn generationUsages.reduce((a, b) => a + b, 0);\n\t}\n\t/** @internal */\n\tasync _getEstimatedTokenCountFromPrompt(messages, functions, function_call) {\n\t\tlet tokens = (await this.getNumTokensFromMessages(messages)).totalCount;\n\t\tif (functions && function_call !== \"auto\") {\n\t\t\tconst promptDefinitions = (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_2__.formatFunctionDefinitions)(functions);\n\t\t\ttokens += await this.getNumTokens(promptDefinitions);\n\t\t\ttokens += 9;\n\t\t}\n\t\tif (functions && messages.find((m) => m._getType() === \"system\")) tokens -= 4;\n\t\tif (function_call === \"none\") tokens += 1;\n\t\telse if (typeof function_call === \"object\") tokens += await this.getNumTokens(function_call.name) + 4;\n\t\treturn tokens;\n\t}\n\t/** @internal */\n\t_getStructuredOutputMethod(config) {\n\t\tconst ensuredConfig = { ...config };\n\t\tif (!this.model.startsWith(\"gpt-3\") && !this.model.startsWith(\"gpt-4-\") && this.model !== \"gpt-4\") {\n\t\t\tif (ensuredConfig?.method === void 0) return \"jsonSchema\";\n\t\t} else if (ensuredConfig.method === \"jsonSchema\") console.warn(`[WARNING]: JSON Schema is not supported for model \"${this.model}\". Falling back to tool calling.`);\n\t\treturn ensuredConfig.method;\n\t}\n\t/**\n\t* Add structured output to the model.\n\t*\n\t* The OpenAI model family supports the following structured output methods:\n\t* - `jsonSchema`: Use the `response_format` field in the response to return a JSON schema. Only supported with the `gpt-4o-mini`,\n\t*   `gpt-4o-mini-2024-07-18`, and `gpt-4o-2024-08-06` model snapshots and later.\n\t* - `functionCalling`: Function calling is useful when you are building an application that bridges the models and functionality\n\t*   of your application.\n\t* - `jsonMode`: JSON mode is a more basic version of the Structured Outputs feature. While JSON mode ensures that model\n\t*   output is valid JSON, Structured Outputs reliably matches the model's output to the schema you specify.\n\t*   We recommend you use `functionCalling` or `jsonSchema` if it is supported for your use case.\n\t*\n\t* The default method is `functionCalling`.\n\t*\n\t* @see https://platform.openai.com/docs/guides/structured-outputs\n\t* @param outputSchema - The schema to use for structured output.\n\t* @param config - The structured output method options.\n\t* @returns The model with structured output.\n\t*/\n\twithStructuredOutput(outputSchema, config) {\n\t\tlet llm;\n\t\tlet outputParser;\n\t\tconst { schema, name, includeRaw } = {\n\t\t\t...config,\n\t\t\tschema: outputSchema\n\t\t};\n\t\tif (config?.strict !== void 0 && config.method === \"jsonMode\") throw new Error(\"Argument `strict` is only supported for `method` = 'function_calling'\");\n\t\tconst method = (0,_utils_output_js__WEBPACK_IMPORTED_MODULE_3__.getStructuredOutputMethod)(this.model, config?.method);\n\t\tif (method === \"jsonMode\") {\n\t\t\tif ((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_11__.isInteropZodSchema)(schema)) outputParser = _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_9__.StructuredOutputParser.fromZodSchema(schema);\n\t\t\telse outputParser = new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_9__.JsonOutputParser();\n\t\t\tconst asJsonSchema = (0,_langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_12__.toJsonSchema)(schema);\n\t\t\tllm = this.withConfig({\n\t\t\t\toutputVersion: \"v0\",\n\t\t\t\tresponse_format: { type: \"json_object\" },\n\t\t\t\tls_structured_output_format: {\n\t\t\t\t\tkwargs: { method: \"json_mode\" },\n\t\t\t\t\tschema: {\n\t\t\t\t\t\ttitle: name ?? \"extract\",\n\t\t\t\t\t\t...asJsonSchema\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (method === \"jsonSchema\") {\n\t\t\tconst openaiJsonSchemaParams = {\n\t\t\t\tname: name ?? \"extract\",\n\t\t\t\tdescription: (0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_11__.getSchemaDescription)(schema),\n\t\t\t\tschema,\n\t\t\t\tstrict: config?.strict\n\t\t\t};\n\t\t\tconst asJsonSchema = (0,_langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_12__.toJsonSchema)(openaiJsonSchemaParams.schema);\n\t\t\tllm = this.withConfig({\n\t\t\t\toutputVersion: \"v0\",\n\t\t\t\tresponse_format: {\n\t\t\t\t\ttype: \"json_schema\",\n\t\t\t\t\tjson_schema: openaiJsonSchemaParams\n\t\t\t\t},\n\t\t\t\tls_structured_output_format: {\n\t\t\t\t\tkwargs: { method: \"json_schema\" },\n\t\t\t\t\tschema: {\n\t\t\t\t\t\ttitle: openaiJsonSchemaParams.name,\n\t\t\t\t\t\tdescription: openaiJsonSchemaParams.description,\n\t\t\t\t\t\t...asJsonSchema\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tif ((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_11__.isInteropZodSchema)(schema)) {\n\t\t\t\tconst altParser = _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_9__.StructuredOutputParser.fromZodSchema(schema);\n\t\t\t\toutputParser = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_8__.RunnableLambda.from((aiMessage) => {\n\t\t\t\t\tif (\"parsed\" in aiMessage.additional_kwargs) return aiMessage.additional_kwargs.parsed;\n\t\t\t\t\treturn altParser;\n\t\t\t\t});\n\t\t\t} else outputParser = new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_9__.JsonOutputParser();\n\t\t} else {\n\t\t\tlet functionName = name ?? \"extract\";\n\t\t\tif ((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_11__.isInteropZodSchema)(schema)) {\n\t\t\t\tconst asJsonSchema = (0,_langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_12__.toJsonSchema)(schema);\n\t\t\t\tllm = this.withConfig({\n\t\t\t\t\toutputVersion: \"v0\",\n\t\t\t\t\ttools: [{\n\t\t\t\t\t\ttype: \"function\",\n\t\t\t\t\t\tfunction: {\n\t\t\t\t\t\t\tname: functionName,\n\t\t\t\t\t\t\tdescription: asJsonSchema.description,\n\t\t\t\t\t\t\tparameters: asJsonSchema\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\ttool_choice: {\n\t\t\t\t\t\ttype: \"function\",\n\t\t\t\t\t\tfunction: { name: functionName }\n\t\t\t\t\t},\n\t\t\t\t\tls_structured_output_format: {\n\t\t\t\t\t\tkwargs: { method: \"function_calling\" },\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\ttitle: functionName,\n\t\t\t\t\t\t\t...asJsonSchema\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t...config?.strict !== void 0 ? { strict: config.strict } : {}\n\t\t\t\t});\n\t\t\t\toutputParser = new _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_10__.JsonOutputKeyToolsParser({\n\t\t\t\t\treturnSingle: true,\n\t\t\t\t\tkeyName: functionName,\n\t\t\t\t\tzodSchema: schema\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet openAIFunctionDefinition;\n\t\t\t\tif (typeof schema.name === \"string\" && typeof schema.parameters === \"object\" && schema.parameters != null) {\n\t\t\t\t\topenAIFunctionDefinition = schema;\n\t\t\t\t\tfunctionName = schema.name;\n\t\t\t\t} else {\n\t\t\t\t\tfunctionName = schema.title ?? functionName;\n\t\t\t\t\topenAIFunctionDefinition = {\n\t\t\t\t\t\tname: functionName,\n\t\t\t\t\t\tdescription: schema.description ?? \"\",\n\t\t\t\t\t\tparameters: schema\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tconst asJsonSchema = (0,_langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_12__.toJsonSchema)(schema);\n\t\t\t\tllm = this.withConfig({\n\t\t\t\t\toutputVersion: \"v0\",\n\t\t\t\t\ttools: [{\n\t\t\t\t\t\ttype: \"function\",\n\t\t\t\t\t\tfunction: openAIFunctionDefinition\n\t\t\t\t\t}],\n\t\t\t\t\ttool_choice: {\n\t\t\t\t\t\ttype: \"function\",\n\t\t\t\t\t\tfunction: { name: functionName }\n\t\t\t\t\t},\n\t\t\t\t\tls_structured_output_format: {\n\t\t\t\t\t\tkwargs: { method: \"function_calling\" },\n\t\t\t\t\t\tschema: {\n\t\t\t\t\t\t\ttitle: functionName,\n\t\t\t\t\t\t\t...asJsonSchema\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t...config?.strict !== void 0 ? { strict: config.strict } : {}\n\t\t\t\t});\n\t\t\t\toutputParser = new _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_10__.JsonOutputKeyToolsParser({\n\t\t\t\t\treturnSingle: true,\n\t\t\t\t\tkeyName: functionName\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (!includeRaw) return llm.pipe(outputParser);\n\t\tconst parserAssign = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_8__.RunnablePassthrough.assign({ parsed: (input, config$1) => outputParser.invoke(input.raw, config$1) });\n\t\tconst parserNone = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_8__.RunnablePassthrough.assign({ parsed: () => null });\n\t\tconst parsedWithFallback = parserAssign.withFallbacks({ fallbacks: [parserNone] });\n\t\treturn _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_8__.RunnableSequence.from([{ raw: llm }, parsedWithFallback]);\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/completions.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/completions.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatOpenAICompletions: () => (/* binding */ ChatOpenAICompletions)\n/* harmony export */ });\n/* harmony import */ var _utils_misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/misc.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js\");\n/* harmony import */ var _utils_tools_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/tools.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/tools.js\");\n/* harmony import */ var _utils_output_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/output.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/output.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/base.js\");\n/* harmony import */ var _utils_client_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/client.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/client.js\");\n/* harmony import */ var _utils_message_inputs_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/message_inputs.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/message_inputs.js\");\n/* harmony import */ var _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @langchain/core/output_parsers/openai_tools */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/output_parsers/openai_tools/index.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/outputs.js\");\n\n\n\n\n\n\n\n\n\n\n//#region src/chat_models/completions.ts\n/**\n* OpenAI Completions API implementation.\n* @internal\n*/\nvar ChatOpenAICompletions = class extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChatOpenAI {\n\t/** @internal */\n\tinvocationParams(options, extra) {\n\t\tlet strict;\n\t\tif (options?.strict !== void 0) strict = options.strict;\n\t\telse if (this.supportsStrictToolCalling !== void 0) strict = this.supportsStrictToolCalling;\n\t\tlet streamOptionsConfig = {};\n\t\tif (options?.stream_options !== void 0) streamOptionsConfig = { stream_options: options.stream_options };\n\t\telse if (this.streamUsage && (this.streaming || extra?.streaming)) streamOptionsConfig = { stream_options: { include_usage: true } };\n\t\tconst params = {\n\t\t\tmodel: this.model,\n\t\t\ttemperature: this.temperature,\n\t\t\ttop_p: this.topP,\n\t\t\tfrequency_penalty: this.frequencyPenalty,\n\t\t\tpresence_penalty: this.presencePenalty,\n\t\t\tlogprobs: this.logprobs,\n\t\t\ttop_logprobs: this.topLogprobs,\n\t\t\tn: this.n,\n\t\t\tlogit_bias: this.logitBias,\n\t\t\tstop: options?.stop ?? this.stopSequences,\n\t\t\tuser: this.user,\n\t\t\tstream: this.streaming,\n\t\t\tfunctions: options?.functions,\n\t\t\tfunction_call: options?.function_call,\n\t\t\ttools: options?.tools?.length ? options.tools.map((tool) => this._convertChatOpenAIToolToCompletionsTool(tool, { strict })) : void 0,\n\t\t\ttool_choice: (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_1__.formatToOpenAIToolChoice)(options?.tool_choice),\n\t\t\tresponse_format: this._getResponseFormat(options?.response_format),\n\t\t\tseed: options?.seed,\n\t\t\t...streamOptionsConfig,\n\t\t\tparallel_tool_calls: options?.parallel_tool_calls,\n\t\t\t...this.audio || options?.audio ? { audio: this.audio || options?.audio } : {},\n\t\t\t...this.modalities || options?.modalities ? { modalities: this.modalities || options?.modalities } : {},\n\t\t\t...this.modelKwargs,\n\t\t\tprompt_cache_key: options?.promptCacheKey ?? this.promptCacheKey,\n\t\t\tverbosity: options?.verbosity ?? this.verbosity\n\t\t};\n\t\tif (options?.prediction !== void 0) params.prediction = options.prediction;\n\t\tif (this.service_tier !== void 0) params.service_tier = this.service_tier;\n\t\tif (options?.service_tier !== void 0) params.service_tier = options.service_tier;\n\t\tconst reasoning = this._getReasoningParams(options);\n\t\tif (reasoning !== void 0 && reasoning.effort !== void 0) params.reasoning_effort = reasoning.effort;\n\t\tif ((0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_0__.isReasoningModel)(params.model)) params.max_completion_tokens = this.maxTokens === -1 ? void 0 : this.maxTokens;\n\t\telse params.max_tokens = this.maxTokens === -1 ? void 0 : this.maxTokens;\n\t\treturn params;\n\t}\n\tasync _generate(messages, options, runManager) {\n\t\tconst usageMetadata = {};\n\t\tconst params = this.invocationParams(options);\n\t\tconst messagesMapped = (0,_utils_message_inputs_js__WEBPACK_IMPORTED_MODULE_5__._convertMessagesToOpenAIParams)(messages, this.model);\n\t\tif (params.stream) {\n\t\t\tconst stream = this._streamResponseChunks(messages, options, runManager);\n\t\t\tconst finalChunks = {};\n\t\t\tfor await (const chunk of stream) {\n\t\t\t\tchunk.message.response_metadata = {\n\t\t\t\t\t...chunk.generationInfo,\n\t\t\t\t\t...chunk.message.response_metadata\n\t\t\t\t};\n\t\t\t\tconst index = chunk.generationInfo?.completion ?? 0;\n\t\t\t\tif (finalChunks[index] === void 0) finalChunks[index] = chunk;\n\t\t\t\telse finalChunks[index] = finalChunks[index].concat(chunk);\n\t\t\t}\n\t\t\tconst generations = Object.entries(finalChunks).sort(([aKey], [bKey]) => parseInt(aKey, 10) - parseInt(bKey, 10)).map(([_, value]) => value);\n\t\t\tconst { functions, function_call } = this.invocationParams(options);\n\t\t\tconst promptTokenUsage = await this._getEstimatedTokenCountFromPrompt(messages, functions, function_call);\n\t\t\tconst completionTokenUsage = await this._getNumTokensFromGenerations(generations);\n\t\t\tusageMetadata.input_tokens = promptTokenUsage;\n\t\t\tusageMetadata.output_tokens = completionTokenUsage;\n\t\t\tusageMetadata.total_tokens = promptTokenUsage + completionTokenUsage;\n\t\t\treturn {\n\t\t\t\tgenerations,\n\t\t\t\tllmOutput: { estimatedTokenUsage: {\n\t\t\t\t\tpromptTokens: usageMetadata.input_tokens,\n\t\t\t\t\tcompletionTokens: usageMetadata.output_tokens,\n\t\t\t\t\ttotalTokens: usageMetadata.total_tokens\n\t\t\t\t} }\n\t\t\t};\n\t\t} else {\n\t\t\tconst data = await this.completionWithRetry({\n\t\t\t\t...params,\n\t\t\t\tstream: false,\n\t\t\t\tmessages: messagesMapped\n\t\t\t}, {\n\t\t\t\tsignal: options?.signal,\n\t\t\t\t...options?.options\n\t\t\t});\n\t\t\tconst { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens, prompt_tokens_details: promptTokensDetails, completion_tokens_details: completionTokensDetails } = data?.usage ?? {};\n\t\t\tif (completionTokens) usageMetadata.output_tokens = (usageMetadata.output_tokens ?? 0) + completionTokens;\n\t\t\tif (promptTokens) usageMetadata.input_tokens = (usageMetadata.input_tokens ?? 0) + promptTokens;\n\t\t\tif (totalTokens) usageMetadata.total_tokens = (usageMetadata.total_tokens ?? 0) + totalTokens;\n\t\t\tif (promptTokensDetails?.audio_tokens !== null || promptTokensDetails?.cached_tokens !== null) usageMetadata.input_token_details = {\n\t\t\t\t...promptTokensDetails?.audio_tokens !== null && { audio: promptTokensDetails?.audio_tokens },\n\t\t\t\t...promptTokensDetails?.cached_tokens !== null && { cache_read: promptTokensDetails?.cached_tokens }\n\t\t\t};\n\t\t\tif (completionTokensDetails?.audio_tokens !== null || completionTokensDetails?.reasoning_tokens !== null) usageMetadata.output_token_details = {\n\t\t\t\t...completionTokensDetails?.audio_tokens !== null && { audio: completionTokensDetails?.audio_tokens },\n\t\t\t\t...completionTokensDetails?.reasoning_tokens !== null && { reasoning: completionTokensDetails?.reasoning_tokens }\n\t\t\t};\n\t\t\tconst generations = [];\n\t\t\tfor (const part of data?.choices ?? []) {\n\t\t\t\tconst text = part.message?.content ?? \"\";\n\t\t\t\tconst generation = {\n\t\t\t\t\ttext,\n\t\t\t\t\tmessage: this._convertCompletionsMessageToBaseMessage(part.message ?? { role: \"assistant\" }, data)\n\t\t\t\t};\n\t\t\t\tgeneration.generationInfo = {\n\t\t\t\t\t...part.finish_reason ? { finish_reason: part.finish_reason } : {},\n\t\t\t\t\t...part.logprobs ? { logprobs: part.logprobs } : {}\n\t\t\t\t};\n\t\t\t\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.isAIMessage)(generation.message)) generation.message.usage_metadata = usageMetadata;\n\t\t\t\tgeneration.message = new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.AIMessage(Object.fromEntries(Object.entries(generation.message).filter(([key]) => !key.startsWith(\"lc_\"))));\n\t\t\t\tgenerations.push(generation);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tgenerations,\n\t\t\t\tllmOutput: { tokenUsage: {\n\t\t\t\t\tpromptTokens: usageMetadata.input_tokens,\n\t\t\t\t\tcompletionTokens: usageMetadata.output_tokens,\n\t\t\t\t\ttotalTokens: usageMetadata.total_tokens\n\t\t\t\t} }\n\t\t\t};\n\t\t}\n\t}\n\tasync *_streamResponseChunks(messages, options, runManager) {\n\t\tconst messagesMapped = (0,_utils_message_inputs_js__WEBPACK_IMPORTED_MODULE_5__._convertMessagesToOpenAIParams)(messages, this.model);\n\t\tconst params = {\n\t\t\t...this.invocationParams(options, { streaming: true }),\n\t\t\tmessages: messagesMapped,\n\t\t\tstream: true\n\t\t};\n\t\tlet defaultRole;\n\t\tconst streamIterable = await this.completionWithRetry(params, options);\n\t\tlet usage;\n\t\tfor await (const data of streamIterable) {\n\t\t\tconst choice = data?.choices?.[0];\n\t\t\tif (data.usage) usage = data.usage;\n\t\t\tif (!choice) continue;\n\t\t\tconst { delta } = choice;\n\t\t\tif (!delta) continue;\n\t\t\tconst chunk = this._convertCompletionsDeltaToBaseMessageChunk(delta, data, defaultRole);\n\t\t\tdefaultRole = delta.role ?? defaultRole;\n\t\t\tconst newTokenIndices = {\n\t\t\t\tprompt: options.promptIndex ?? 0,\n\t\t\t\tcompletion: choice.index ?? 0\n\t\t\t};\n\t\t\tif (typeof chunk.content !== \"string\") {\n\t\t\t\tconsole.log(\"[WARNING]: Received non-string content from OpenAI. This is currently not supported.\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst generationInfo = { ...newTokenIndices };\n\t\t\tif (choice.finish_reason != null) {\n\t\t\t\tgenerationInfo.finish_reason = choice.finish_reason;\n\t\t\t\tgenerationInfo.system_fingerprint = data.system_fingerprint;\n\t\t\t\tgenerationInfo.model_name = data.model;\n\t\t\t\tgenerationInfo.service_tier = data.service_tier;\n\t\t\t}\n\t\t\tif (this.logprobs) generationInfo.logprobs = choice.logprobs;\n\t\t\tconst generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_8__.ChatGenerationChunk({\n\t\t\t\tmessage: chunk,\n\t\t\t\ttext: chunk.content,\n\t\t\t\tgenerationInfo\n\t\t\t});\n\t\t\tyield generationChunk;\n\t\t\tawait runManager?.handleLLMNewToken(generationChunk.text ?? \"\", newTokenIndices, void 0, void 0, void 0, { chunk: generationChunk });\n\t\t}\n\t\tif (usage) {\n\t\t\tconst inputTokenDetails = {\n\t\t\t\t...usage.prompt_tokens_details?.audio_tokens !== null && { audio: usage.prompt_tokens_details?.audio_tokens },\n\t\t\t\t...usage.prompt_tokens_details?.cached_tokens !== null && { cache_read: usage.prompt_tokens_details?.cached_tokens }\n\t\t\t};\n\t\t\tconst outputTokenDetails = {\n\t\t\t\t...usage.completion_tokens_details?.audio_tokens !== null && { audio: usage.completion_tokens_details?.audio_tokens },\n\t\t\t\t...usage.completion_tokens_details?.reasoning_tokens !== null && { reasoning: usage.completion_tokens_details?.reasoning_tokens }\n\t\t\t};\n\t\t\tconst generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_8__.ChatGenerationChunk({\n\t\t\t\tmessage: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.AIMessageChunk({\n\t\t\t\t\tcontent: \"\",\n\t\t\t\t\tresponse_metadata: { usage: { ...usage } },\n\t\t\t\t\tusage_metadata: {\n\t\t\t\t\t\tinput_tokens: usage.prompt_tokens,\n\t\t\t\t\t\toutput_tokens: usage.completion_tokens,\n\t\t\t\t\t\ttotal_tokens: usage.total_tokens,\n\t\t\t\t\t\t...Object.keys(inputTokenDetails).length > 0 && { input_token_details: inputTokenDetails },\n\t\t\t\t\t\t...Object.keys(outputTokenDetails).length > 0 && { output_token_details: outputTokenDetails }\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttext: \"\"\n\t\t\t});\n\t\t\tyield generationChunk;\n\t\t}\n\t\tif (options.signal?.aborted) throw new Error(\"AbortError\");\n\t}\n\tasync completionWithRetry(request, requestOptions) {\n\t\tconst clientOptions = this._getClientOptions(requestOptions);\n\t\tconst isParseableFormat = request.response_format && request.response_format.type === \"json_schema\";\n\t\treturn this.caller.call(async () => {\n\t\t\ttry {\n\t\t\t\tif (isParseableFormat && !request.stream) return await this.client.chat.completions.parse(request, clientOptions);\n\t\t\t\telse return await this.client.chat.completions.create(request, clientOptions);\n\t\t\t} catch (e) {\n\t\t\t\tconst error = (0,_utils_client_js__WEBPACK_IMPORTED_MODULE_4__.wrapOpenAIClientError)(e);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n\t/** @internal */\n\t_convertCompletionsMessageToBaseMessage(message, rawResponse) {\n\t\tconst rawToolCalls = message.tool_calls;\n\t\tswitch (message.role) {\n\t\t\tcase \"assistant\": {\n\t\t\t\tconst toolCalls = [];\n\t\t\t\tconst invalidToolCalls = [];\n\t\t\t\tfor (const rawToolCall of rawToolCalls ?? []) try {\n\t\t\t\t\ttoolCalls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_6__.parseToolCall)(rawToolCall, { returnId: true }));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tinvalidToolCalls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_6__.makeInvalidToolCall)(rawToolCall, e.message));\n\t\t\t\t}\n\t\t\t\tconst additional_kwargs = {\n\t\t\t\t\tfunction_call: message.function_call,\n\t\t\t\t\ttool_calls: rawToolCalls\n\t\t\t\t};\n\t\t\t\tif (this.__includeRawResponse !== void 0) additional_kwargs.__raw_response = rawResponse;\n\t\t\t\tconst response_metadata = {\n\t\t\t\t\tmodel_provider: \"openai\",\n\t\t\t\t\tmodel_name: rawResponse.model,\n\t\t\t\t\t...rawResponse.system_fingerprint ? {\n\t\t\t\t\t\tusage: { ...rawResponse.usage },\n\t\t\t\t\t\tsystem_fingerprint: rawResponse.system_fingerprint\n\t\t\t\t\t} : {}\n\t\t\t\t};\n\t\t\t\tif (message.audio) additional_kwargs.audio = message.audio;\n\t\t\t\tconst content = (0,_utils_output_js__WEBPACK_IMPORTED_MODULE_2__.handleMultiModalOutput)(message.content || \"\", rawResponse.choices?.[0]?.message);\n\t\t\t\treturn new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.AIMessage({\n\t\t\t\t\tcontent,\n\t\t\t\t\ttool_calls: toolCalls,\n\t\t\t\t\tinvalid_tool_calls: invalidToolCalls,\n\t\t\t\t\tadditional_kwargs,\n\t\t\t\t\tresponse_metadata,\n\t\t\t\t\tid: rawResponse.id\n\t\t\t\t});\n\t\t\t}\n\t\t\tdefault: return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.ChatMessage(message.content || \"\", message.role ?? \"unknown\");\n\t\t}\n\t}\n\t/** @internal */\n\t_convertCompletionsDeltaToBaseMessageChunk(delta, rawResponse, defaultRole) {\n\t\tconst role = delta.role ?? defaultRole;\n\t\tconst content = delta.content ?? \"\";\n\t\tlet additional_kwargs;\n\t\tif (delta.function_call) additional_kwargs = { function_call: delta.function_call };\n\t\telse if (delta.tool_calls) additional_kwargs = { tool_calls: delta.tool_calls };\n\t\telse additional_kwargs = {};\n\t\tif (this.__includeRawResponse) additional_kwargs.__raw_response = rawResponse;\n\t\tif (delta.audio) additional_kwargs.audio = {\n\t\t\t...delta.audio,\n\t\t\tindex: rawResponse.choices[0].index\n\t\t};\n\t\tconst response_metadata = {\n\t\t\tmodel_provider: \"openai\",\n\t\t\tusage: { ...rawResponse.usage }\n\t\t};\n\t\tif (role === \"user\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.HumanMessageChunk({\n\t\t\tcontent,\n\t\t\tresponse_metadata\n\t\t});\n\t\telse if (role === \"assistant\") {\n\t\t\tconst toolCallChunks = [];\n\t\t\tif (Array.isArray(delta.tool_calls)) for (const rawToolCall of delta.tool_calls) toolCallChunks.push({\n\t\t\t\tname: rawToolCall.function?.name,\n\t\t\t\targs: rawToolCall.function?.arguments,\n\t\t\t\tid: rawToolCall.id,\n\t\t\t\tindex: rawToolCall.index,\n\t\t\t\ttype: \"tool_call_chunk\"\n\t\t\t});\n\t\t\treturn new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.AIMessageChunk({\n\t\t\t\tcontent,\n\t\t\t\ttool_call_chunks: toolCallChunks,\n\t\t\t\tadditional_kwargs,\n\t\t\t\tid: rawResponse.id,\n\t\t\t\tresponse_metadata\n\t\t\t});\n\t\t} else if (role === \"system\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.SystemMessageChunk({\n\t\t\tcontent,\n\t\t\tresponse_metadata\n\t\t});\n\t\telse if (role === \"developer\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.SystemMessageChunk({\n\t\t\tcontent,\n\t\t\tresponse_metadata,\n\t\t\tadditional_kwargs: { __openai_role__: \"developer\" }\n\t\t});\n\t\telse if (role === \"function\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.FunctionMessageChunk({\n\t\t\tcontent,\n\t\t\tadditional_kwargs,\n\t\t\tname: delta.name,\n\t\t\tresponse_metadata\n\t\t});\n\t\telse if (role === \"tool\") return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.ToolMessageChunk({\n\t\t\tcontent,\n\t\t\tadditional_kwargs,\n\t\t\ttool_call_id: delta.tool_call_id,\n\t\t\tresponse_metadata\n\t\t});\n\t\telse return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_7__.ChatMessageChunk({\n\t\t\tcontent,\n\t\t\trole,\n\t\t\tresponse_metadata\n\t\t});\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=completions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/completions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/index.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/index.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatOpenAI: () => (/* binding */ ChatOpenAI)\n/* harmony export */ });\n/* harmony import */ var _utils_tools_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/tools.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/tools.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/base.js\");\n/* harmony import */ var _responses_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./responses.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/responses.js\");\n/* harmony import */ var _completions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./completions.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/completions.js\");\n\n\n\n\n\n//#region src/chat_models/index.ts\n/**\n* OpenAI chat model integration.\n*\n* To use with Azure, import the `AzureChatOpenAI` class.\n*\n* Setup:\n* Install `@langchain/openai` and set an environment variable named `OPENAI_API_KEY`.\n*\n* ```bash\n* npm install @langchain/openai\n* export OPENAI_API_KEY=\"your-api-key\"\n* ```\n*\n* ## [Constructor args](https://api.js.langchain.com/classes/langchain_openai.ChatOpenAI.html#constructor)\n*\n* ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_openai.ChatOpenAICallOptions.html)\n*\n* Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n* They can also be passed via `.withConfig`, or the second arg in `.bindTools`, like shown in the examples below:\n*\n* ```typescript\n* // When calling `.withConfig`, call options should be passed via the first argument\n* const llmWithArgsBound = llm.withConfig({\n*   stop: [\"\\n\"],\n*   tools: [...],\n* });\n*\n* // When calling `.bindTools`, call options should be passed via the second argument\n* const llmWithTools = llm.bindTools(\n*   [...],\n*   {\n*     tool_choice: \"auto\",\n*   }\n* );\n* ```\n*\n* ## Examples\n*\n* <details open>\n* <summary><strong>Instantiate</strong></summary>\n*\n* ```typescript\n* import { ChatOpenAI } from '@langchain/openai';\n*\n* const llm = new ChatOpenAI({\n*   model: \"gpt-4o-mini\",\n*   temperature: 0,\n*   maxTokens: undefined,\n*   timeout: undefined,\n*   maxRetries: 2,\n*   // apiKey: \"...\",\n*   // configuration: {\n*   //   baseURL: \"...\",\n*   // }\n*   // organization: \"...\",\n*   // other params...\n* });\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Invoking</strong></summary>\n*\n* ```typescript\n* const input = `Translate \"I love programming\" into French.`;\n*\n* // Models also accept a list of chat messages or a formatted prompt\n* const result = await llm.invoke(input);\n* console.log(result);\n* ```\n*\n* ```txt\n* AIMessage {\n*   \"id\": \"chatcmpl-9u4Mpu44CbPjwYFkTbeoZgvzB00Tz\",\n*   \"content\": \"J'adore la programmation.\",\n*   \"response_metadata\": {\n*     \"tokenUsage\": {\n*       \"completionTokens\": 5,\n*       \"promptTokens\": 28,\n*       \"totalTokens\": 33\n*     },\n*     \"finish_reason\": \"stop\",\n*     \"system_fingerprint\": \"fp_3aa7262c27\"\n*   },\n*   \"usage_metadata\": {\n*     \"input_tokens\": 28,\n*     \"output_tokens\": 5,\n*     \"total_tokens\": 33\n*   }\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Streaming Chunks</strong></summary>\n*\n* ```typescript\n* for await (const chunk of await llm.stream(input)) {\n*   console.log(chunk);\n* }\n* ```\n*\n* ```txt\n* AIMessageChunk {\n*   \"id\": \"chatcmpl-9u4NWB7yUeHCKdLr6jP3HpaOYHTqs\",\n*   \"content\": \"\"\n* }\n* AIMessageChunk {\n*   \"content\": \"J\"\n* }\n* AIMessageChunk {\n*   \"content\": \"'adore\"\n* }\n* AIMessageChunk {\n*   \"content\": \" la\"\n* }\n* AIMessageChunk {\n*   \"content\": \" programmation\",,\n* }\n* AIMessageChunk {\n*   \"content\": \".\",,\n* }\n* AIMessageChunk {\n*   \"content\": \"\",\n*   \"response_metadata\": {\n*     \"finish_reason\": \"stop\",\n*     \"system_fingerprint\": \"fp_c9aa9c0491\"\n*   },\n* }\n* AIMessageChunk {\n*   \"content\": \"\",\n*   \"usage_metadata\": {\n*     \"input_tokens\": 28,\n*     \"output_tokens\": 5,\n*     \"total_tokens\": 33\n*   }\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Aggregate Streamed Chunks</strong></summary>\n*\n* ```typescript\n* import { AIMessageChunk } from '@langchain/core/messages';\n* import { concat } from '@langchain/core/utils/stream';\n*\n* const stream = await llm.stream(input);\n* let full: AIMessageChunk | undefined;\n* for await (const chunk of stream) {\n*   full = !full ? chunk : concat(full, chunk);\n* }\n* console.log(full);\n* ```\n*\n* ```txt\n* AIMessageChunk {\n*   \"id\": \"chatcmpl-9u4PnX6Fy7OmK46DASy0bH6cxn5Xu\",\n*   \"content\": \"J'adore la programmation.\",\n*   \"response_metadata\": {\n*     \"prompt\": 0,\n*     \"completion\": 0,\n*     \"finish_reason\": \"stop\",\n*   },\n*   \"usage_metadata\": {\n*     \"input_tokens\": 28,\n*     \"output_tokens\": 5,\n*     \"total_tokens\": 33\n*   }\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Bind tools</strong></summary>\n*\n* ```typescript\n* import { z } from 'zod';\n*\n* const GetWeather = {\n*   name: \"GetWeather\",\n*   description: \"Get the current weather in a given location\",\n*   schema: z.object({\n*     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n*   }),\n* }\n*\n* const GetPopulation = {\n*   name: \"GetPopulation\",\n*   description: \"Get the current population in a given location\",\n*   schema: z.object({\n*     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n*   }),\n* }\n*\n* const llmWithTools = llm.bindTools(\n*   [GetWeather, GetPopulation],\n*   {\n*     // strict: true  // enforce tool args schema is respected\n*   }\n* );\n* const aiMsg = await llmWithTools.invoke(\n*   \"Which city is hotter today and which is bigger: LA or NY?\"\n* );\n* console.log(aiMsg.tool_calls);\n* ```\n*\n* ```txt\n* [\n*   {\n*     name: 'GetWeather',\n*     args: { location: 'Los Angeles, CA' },\n*     type: 'tool_call',\n*     id: 'call_uPU4FiFzoKAtMxfmPnfQL6UK'\n*   },\n*   {\n*     name: 'GetWeather',\n*     args: { location: 'New York, NY' },\n*     type: 'tool_call',\n*     id: 'call_UNkEwuQsHrGYqgDQuH9nPAtX'\n*   },\n*   {\n*     name: 'GetPopulation',\n*     args: { location: 'Los Angeles, CA' },\n*     type: 'tool_call',\n*     id: 'call_kL3OXxaq9OjIKqRTpvjaCH14'\n*   },\n*   {\n*     name: 'GetPopulation',\n*     args: { location: 'New York, NY' },\n*     type: 'tool_call',\n*     id: 'call_s9KQB1UWj45LLGaEnjz0179q'\n*   }\n* ]\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Structured Output</strong></summary>\n*\n* ```typescript\n* import { z } from 'zod';\n*\n* const Joke = z.object({\n*   setup: z.string().describe(\"The setup of the joke\"),\n*   punchline: z.string().describe(\"The punchline to the joke\"),\n*   rating: z.number().nullable().describe(\"How funny the joke is, from 1 to 10\")\n* }).describe('Joke to tell user.');\n*\n* const structuredLlm = llm.withStructuredOutput(Joke, {\n*   name: \"Joke\",\n*   strict: true, // Optionally enable OpenAI structured outputs\n* });\n* const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n* console.log(jokeResult);\n* ```\n*\n* ```txt\n* {\n*   setup: 'Why was the cat sitting on the computer?',\n*   punchline: 'Because it wanted to keep an eye on the mouse!',\n*   rating: 7\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>JSON Object Response Format</strong></summary>\n*\n* ```typescript\n* const jsonLlm = llm.withConfig({ response_format: { type: \"json_object\" } });\n* const jsonLlmAiMsg = await jsonLlm.invoke(\n*   \"Return a JSON object with key 'randomInts' and a value of 10 random ints in [0-99]\"\n* );\n* console.log(jsonLlmAiMsg.content);\n* ```\n*\n* ```txt\n* {\n*   \"randomInts\": [23, 87, 45, 12, 78, 34, 56, 90, 11, 67]\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Multimodal</strong></summary>\n*\n* ```typescript\n* import { HumanMessage } from '@langchain/core/messages';\n*\n* const imageUrl = \"https://example.com/image.jpg\";\n* const imageData = await fetch(imageUrl).then(res => res.arrayBuffer());\n* const base64Image = Buffer.from(imageData).toString('base64');\n*\n* const message = new HumanMessage({\n*   content: [\n*     { type: \"text\", text: \"describe the weather in this image\" },\n*     {\n*       type: \"image_url\",\n*       image_url: { url: `data:image/jpeg;base64,${base64Image}` },\n*     },\n*   ]\n* });\n*\n* const imageDescriptionAiMsg = await llm.invoke([message]);\n* console.log(imageDescriptionAiMsg.content);\n* ```\n*\n* ```txt\n* The weather in the image appears to be clear and sunny. The sky is mostly blue with a few scattered white clouds, indicating fair weather. The bright sunlight is casting shadows on the green, grassy hill, suggesting it is a pleasant day with good visibility. There are no signs of rain or stormy conditions.\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Usage Metadata</strong></summary>\n*\n* ```typescript\n* const aiMsgForMetadata = await llm.invoke(input);\n* console.log(aiMsgForMetadata.usage_metadata);\n* ```\n*\n* ```txt\n* { input_tokens: 28, output_tokens: 5, total_tokens: 33 }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Logprobs</strong></summary>\n*\n* ```typescript\n* const logprobsLlm = new ChatOpenAI({ model: \"gpt-4o-mini\", logprobs: true });\n* const aiMsgForLogprobs = await logprobsLlm.invoke(input);\n* console.log(aiMsgForLogprobs.response_metadata.logprobs);\n* ```\n*\n* ```txt\n* {\n*   content: [\n*     {\n*       token: 'J',\n*       logprob: -0.000050616763,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     {\n*       token: \"'\",\n*       logprob: -0.01868736,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     {\n*       token: 'ad',\n*       logprob: -0.0000030545007,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     { token: 'ore', logprob: 0, bytes: [Array], top_logprobs: [] },\n*     {\n*       token: ' la',\n*       logprob: -0.515404,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     {\n*       token: ' programm',\n*       logprob: -0.0000118755715,\n*       bytes: [Array],\n*       top_logprobs: []\n*     },\n*     { token: 'ation', logprob: 0, bytes: [Array], top_logprobs: [] },\n*     {\n*       token: '.',\n*       logprob: -0.0000037697225,\n*       bytes: [Array],\n*       top_logprobs: []\n*     }\n*   ],\n*   refusal: null\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Response Metadata</strong></summary>\n*\n* ```typescript\n* const aiMsgForResponseMetadata = await llm.invoke(input);\n* console.log(aiMsgForResponseMetadata.response_metadata);\n* ```\n*\n* ```txt\n* {\n*   tokenUsage: { completionTokens: 5, promptTokens: 28, totalTokens: 33 },\n*   finish_reason: 'stop',\n*   system_fingerprint: 'fp_3aa7262c27'\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>JSON Schema Structured Output</strong></summary>\n*\n* ```typescript\n* const llmForJsonSchema = new ChatOpenAI({\n*   model: \"gpt-4o-2024-08-06\",\n* }).withStructuredOutput(\n*   z.object({\n*     command: z.string().describe(\"The command to execute\"),\n*     expectedOutput: z.string().describe(\"The expected output of the command\"),\n*     options: z\n*       .array(z.string())\n*       .describe(\"The options you can pass to the command\"),\n*   }),\n*   {\n*     method: \"jsonSchema\",\n*     strict: true, // Optional when using the `jsonSchema` method\n*   }\n* );\n*\n* const jsonSchemaRes = await llmForJsonSchema.invoke(\n*   \"What is the command to list files in a directory?\"\n* );\n* console.log(jsonSchemaRes);\n* ```\n*\n* ```txt\n* {\n*   command: 'ls',\n*   expectedOutput: 'A list of files and subdirectories within the specified directory.',\n*   options: [\n*     '-a: include directory entries whose names begin with a dot (.).',\n*     '-l: use a long listing format.',\n*     '-h: with -l, print sizes in human readable format (e.g., 1K, 234M, 2G).',\n*     '-t: sort by time, newest first.',\n*     '-r: reverse order while sorting.',\n*     '-S: sort by file size, largest first.',\n*     '-R: list subdirectories recursively.'\n*   ]\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Audio Outputs</strong></summary>\n*\n* ```typescript\n* import { ChatOpenAI } from \"@langchain/openai\";\n*\n* const modelWithAudioOutput = new ChatOpenAI({\n*   model: \"gpt-4o-audio-preview\",\n*   // You may also pass these fields to `.withConfig` as a call argument.\n*   modalities: [\"text\", \"audio\"], // Specifies that the model should output audio.\n*   audio: {\n*     voice: \"alloy\",\n*     format: \"wav\",\n*   },\n* });\n*\n* const audioOutputResult = await modelWithAudioOutput.invoke(\"Tell me a joke about cats.\");\n* const castMessageContent = audioOutputResult.content[0] as Record<string, any>;\n*\n* console.log({\n*   ...castMessageContent,\n*   data: castMessageContent.data.slice(0, 100) // Sliced for brevity\n* })\n* ```\n*\n* ```txt\n* {\n*   id: 'audio_67117718c6008190a3afad3e3054b9b6',\n*   data: 'UklGRqYwBgBXQVZFZm10IBAAAAABAAEAwF0AAIC7AAACABAATElTVBoAAABJTkZPSVNGVA4AAABMYXZmNTguMjkuMTAwAGRhdGFg',\n*   expires_at: 1729201448,\n*   transcript: 'Sure! Why did the cat sit on the computer? Because it wanted to keep an eye on the mouse!'\n* }\n* ```\n* </details>\n*\n* <br />\n*\n* <details>\n* <summary><strong>Audio Outputs</strong></summary>\n*\n* ```typescript\n* import { ChatOpenAI } from \"@langchain/openai\";\n*\n* const modelWithAudioOutput = new ChatOpenAI({\n*   model: \"gpt-4o-audio-preview\",\n*   // You may also pass these fields to `.withConfig` as a call argument.\n*   modalities: [\"text\", \"audio\"], // Specifies that the model should output audio.\n*   audio: {\n*     voice: \"alloy\",\n*     format: \"wav\",\n*   },\n* });\n*\n* const audioOutputResult = await modelWithAudioOutput.invoke(\"Tell me a joke about cats.\");\n* const castAudioContent = audioOutputResult.additional_kwargs.audio as Record<string, any>;\n*\n* console.log({\n*   ...castAudioContent,\n*   data: castAudioContent.data.slice(0, 100) // Sliced for brevity\n* })\n* ```\n*\n* ```txt\n* {\n*   id: 'audio_67117718c6008190a3afad3e3054b9b6',\n*   data: 'UklGRqYwBgBXQVZFZm10IBAAAAABAAEAwF0AAIC7AAACABAATElTVBoAAABJTkZPSVNGVA4AAABMYXZmNTguMjkuMTAwAGRhdGFg',\n*   expires_at: 1729201448,\n*   transcript: 'Sure! Why did the cat sit on the computer? Because it wanted to keep an eye on the mouse!'\n* }\n* ```\n* </details>\n*\n* <br />\n*/\nvar ChatOpenAI = class ChatOpenAI extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseChatOpenAI {\n\t/**\n\t* Whether to use the responses API for all requests. If `false` the responses API will be used\n\t* only when required in order to fulfill the request.\n\t*/\n\tuseResponsesApi = false;\n\tresponses;\n\tcompletions;\n\tget lc_serializable_keys() {\n\t\treturn [...super.lc_serializable_keys, \"useResponsesApi\"];\n\t}\n\tget callKeys() {\n\t\treturn [...super.callKeys, \"useResponsesApi\"];\n\t}\n\tconstructor(fields) {\n\t\tsuper(fields);\n\t\tthis.fields = fields;\n\t\tthis.useResponsesApi = fields?.useResponsesApi ?? false;\n\t\tthis.responses = fields?.responses ?? new _responses_js__WEBPACK_IMPORTED_MODULE_2__.ChatOpenAIResponses(fields);\n\t\tthis.completions = fields?.completions ?? new _completions_js__WEBPACK_IMPORTED_MODULE_3__.ChatOpenAICompletions(fields);\n\t}\n\t_useResponsesApi(options) {\n\t\tconst usesBuiltInTools = options?.tools?.some(_utils_tools_js__WEBPACK_IMPORTED_MODULE_0__.isBuiltInTool);\n\t\tconst hasResponsesOnlyKwargs = options?.previous_response_id != null || options?.text != null || options?.truncation != null || options?.include != null || options?.reasoning?.summary != null || this.reasoning?.summary != null;\n\t\tconst hasCustomTools = options?.tools?.some(_utils_tools_js__WEBPACK_IMPORTED_MODULE_0__.isOpenAICustomTool) || options?.tools?.some(_utils_tools_js__WEBPACK_IMPORTED_MODULE_0__.isCustomTool);\n\t\treturn this.useResponsesApi || usesBuiltInTools || hasResponsesOnlyKwargs || hasCustomTools;\n\t}\n\tgetLsParams(options) {\n\t\tconst optionsWithDefaults = this._combineCallOptions(options);\n\t\tif (this._useResponsesApi(options)) return this.responses.getLsParams(optionsWithDefaults);\n\t\treturn this.completions.getLsParams(optionsWithDefaults);\n\t}\n\tinvocationParams(options) {\n\t\tconst optionsWithDefaults = this._combineCallOptions(options);\n\t\tif (this._useResponsesApi(options)) return this.responses.invocationParams(optionsWithDefaults);\n\t\treturn this.completions.invocationParams(optionsWithDefaults);\n\t}\n\t/** @ignore */\n\tasync _generate(messages, options, runManager) {\n\t\tif (this._useResponsesApi(options)) return this.responses._generate(messages, options);\n\t\treturn this.completions._generate(messages, options, runManager);\n\t}\n\tasync *_streamResponseChunks(messages, options, runManager) {\n\t\tif (this._useResponsesApi(options)) {\n\t\t\tyield* this.responses._streamResponseChunks(messages, this._combineCallOptions(options), runManager);\n\t\t\treturn;\n\t\t}\n\t\tyield* this.completions._streamResponseChunks(messages, this._combineCallOptions(options), runManager);\n\t}\n\twithConfig(config) {\n\t\tconst newModel = new ChatOpenAI(this.fields);\n\t\tnewModel.defaultOptions = {\n\t\t\t...this.defaultOptions,\n\t\t\t...config\n\t\t};\n\t\treturn newModel;\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/responses.js":
/*!**************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/responses.js ***!
  \**************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatOpenAIResponses: () => (/* binding */ ChatOpenAIResponses)\n/* harmony export */ });\n/* harmony import */ var _utils_misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/misc.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js\");\n/* harmony import */ var _utils_tools_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/tools.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/tools.js\");\n/* harmony import */ var _utils_output_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/output.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/output.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/base.js\");\n/* harmony import */ var _utils_client_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/client.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/client.js\");\n/* harmony import */ var _utils_standard_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/standard.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/standard.js\");\n/* harmony import */ var _utils_message_inputs_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/message_inputs.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/message_inputs.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @langchain/core/output_parsers/openai_tools */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/output_parsers/openai_tools/index.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/outputs.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n//#region src/chat_models/responses.ts\nconst _FUNCTION_CALL_IDS_MAP_KEY = \"__openai_function_call_ids__\";\n/**\n* OpenAI Responses API implementation.\n*\n* Will be exported in a later version of @langchain/openai.\n*\n* @internal\n*/\nvar ChatOpenAIResponses = class extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseChatOpenAI {\n\tinvocationParams(options) {\n\t\tlet strict;\n\t\tif (options?.strict !== void 0) strict = options.strict;\n\t\telse if (this.supportsStrictToolCalling !== void 0) strict = this.supportsStrictToolCalling;\n\t\tconst params = {\n\t\t\tmodel: this.model,\n\t\t\ttemperature: this.temperature,\n\t\t\ttop_p: this.topP,\n\t\t\tuser: this.user,\n\t\t\tstream: this.streaming,\n\t\t\tprevious_response_id: options?.previous_response_id,\n\t\t\ttruncation: options?.truncation,\n\t\t\tinclude: options?.include,\n\t\t\ttools: options?.tools?.length ? this._reduceChatOpenAITools(options.tools, {\n\t\t\t\tstream: this.streaming,\n\t\t\t\tstrict\n\t\t\t}) : void 0,\n\t\t\ttool_choice: (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_1__.isBuiltInToolChoice)(options?.tool_choice) ? options?.tool_choice : (() => {\n\t\t\t\tconst formatted = (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_1__.formatToOpenAIToolChoice)(options?.tool_choice);\n\t\t\t\tif (typeof formatted === \"object\" && \"type\" in formatted) {\n\t\t\t\t\tif (formatted.type === \"function\") return {\n\t\t\t\t\t\ttype: \"function\",\n\t\t\t\t\t\tname: formatted.function.name\n\t\t\t\t\t};\n\t\t\t\t\telse if (formatted.type === \"allowed_tools\") return {\n\t\t\t\t\t\ttype: \"allowed_tools\",\n\t\t\t\t\t\tmode: formatted.allowed_tools.mode,\n\t\t\t\t\t\ttools: formatted.allowed_tools.tools\n\t\t\t\t\t};\n\t\t\t\t\telse if (formatted.type === \"custom\") return {\n\t\t\t\t\t\ttype: \"custom\",\n\t\t\t\t\t\tname: formatted.custom.name\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn void 0;\n\t\t\t})(),\n\t\t\ttext: (() => {\n\t\t\t\tif (options?.text) return options.text;\n\t\t\t\tconst format = this._getResponseFormat(options?.response_format);\n\t\t\t\tif (format?.type === \"json_schema\") {\n\t\t\t\t\tif (format.json_schema.schema != null) return {\n\t\t\t\t\t\tformat: {\n\t\t\t\t\t\t\ttype: \"json_schema\",\n\t\t\t\t\t\t\tschema: format.json_schema.schema,\n\t\t\t\t\t\t\tdescription: format.json_schema.description,\n\t\t\t\t\t\t\tname: format.json_schema.name,\n\t\t\t\t\t\t\tstrict: format.json_schema.strict\n\t\t\t\t\t\t},\n\t\t\t\t\t\tverbosity: options?.verbosity\n\t\t\t\t\t};\n\t\t\t\t\treturn void 0;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tformat,\n\t\t\t\t\tverbosity: options?.verbosity\n\t\t\t\t};\n\t\t\t})(),\n\t\t\tparallel_tool_calls: options?.parallel_tool_calls,\n\t\t\tmax_output_tokens: this.maxTokens === -1 ? void 0 : this.maxTokens,\n\t\t\tprompt_cache_key: options?.promptCacheKey ?? this.promptCacheKey,\n\t\t\t...this.zdrEnabled ? { store: false } : {},\n\t\t\t...this.modelKwargs\n\t\t};\n\t\tconst reasoning = this._getReasoningParams(options);\n\t\tif (reasoning !== void 0) params.reasoning = reasoning;\n\t\treturn params;\n\t}\n\tasync _generate(messages, options) {\n\t\tconst invocationParams = this.invocationParams(options);\n\t\tif (invocationParams.stream) {\n\t\t\tconst stream = this._streamResponseChunks(messages, options);\n\t\t\tlet finalChunk;\n\t\t\tfor await (const chunk of stream) {\n\t\t\t\tchunk.message.response_metadata = {\n\t\t\t\t\t...chunk.generationInfo,\n\t\t\t\t\t...chunk.message.response_metadata\n\t\t\t\t};\n\t\t\t\tfinalChunk = finalChunk?.concat(chunk) ?? chunk;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tgenerations: finalChunk ? [finalChunk] : [],\n\t\t\t\tllmOutput: { estimatedTokenUsage: (finalChunk?.message)?.usage_metadata }\n\t\t\t};\n\t\t} else {\n\t\t\tconst input = this._convertMessagesToResponsesParams(messages);\n\t\t\tconst data = await this.completionWithRetry({\n\t\t\t\tinput,\n\t\t\t\t...invocationParams,\n\t\t\t\tstream: false\n\t\t\t}, {\n\t\t\t\tsignal: options?.signal,\n\t\t\t\t...options?.options\n\t\t\t});\n\t\t\treturn {\n\t\t\t\tgenerations: [{\n\t\t\t\t\ttext: data.output_text,\n\t\t\t\t\tmessage: this._convertResponsesMessageToBaseMessage(data)\n\t\t\t\t}],\n\t\t\t\tllmOutput: {\n\t\t\t\t\tid: data.id,\n\t\t\t\t\testimatedTokenUsage: data.usage ? {\n\t\t\t\t\t\tpromptTokens: data.usage.input_tokens,\n\t\t\t\t\t\tcompletionTokens: data.usage.output_tokens,\n\t\t\t\t\t\ttotalTokens: data.usage.total_tokens\n\t\t\t\t\t} : void 0\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\tasync *_streamResponseChunks(messages, options, runManager) {\n\t\tconst streamIterable = await this.completionWithRetry({\n\t\t\t...this.invocationParams(options),\n\t\t\tinput: this._convertMessagesToResponsesParams(messages),\n\t\t\tstream: true\n\t\t}, options);\n\t\tfor await (const data of streamIterable) {\n\t\t\tconst chunk = this._convertResponsesDeltaToBaseMessageChunk(data);\n\t\t\tif (chunk == null) continue;\n\t\t\tyield chunk;\n\t\t\tawait runManager?.handleLLMNewToken(chunk.text || \"\", {\n\t\t\t\tprompt: options.promptIndex ?? 0,\n\t\t\t\tcompletion: 0\n\t\t\t}, void 0, void 0, void 0, { chunk });\n\t\t}\n\t}\n\tasync completionWithRetry(request, requestOptions) {\n\t\treturn this.caller.call(async () => {\n\t\t\tconst clientOptions = this._getClientOptions(requestOptions);\n\t\t\ttry {\n\t\t\t\tif (request.text?.format?.type === \"json_schema\" && !request.stream) return await this.client.responses.parse(request, clientOptions);\n\t\t\t\treturn await this.client.responses.create(request, clientOptions);\n\t\t\t} catch (e) {\n\t\t\t\tconst error = (0,_utils_client_js__WEBPACK_IMPORTED_MODULE_4__.wrapOpenAIClientError)(e);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n\t/** @internal */\n\t_convertResponsesMessageToBaseMessage(response) {\n\t\tif (response.error) {\n\t\t\tconst error = new Error(response.error.message);\n\t\t\terror.name = response.error.code;\n\t\t\tthrow error;\n\t\t}\n\t\tlet messageId;\n\t\tconst content = [];\n\t\tconst tool_calls = [];\n\t\tconst invalid_tool_calls = [];\n\t\tconst response_metadata = {\n\t\t\tmodel_provider: \"openai\",\n\t\t\tmodel: response.model,\n\t\t\tcreated_at: response.created_at,\n\t\t\tid: response.id,\n\t\t\tincomplete_details: response.incomplete_details,\n\t\t\tmetadata: response.metadata,\n\t\t\tobject: response.object,\n\t\t\tstatus: response.status,\n\t\t\tuser: response.user,\n\t\t\tservice_tier: response.service_tier,\n\t\t\tmodel_name: response.model\n\t\t};\n\t\tconst additional_kwargs = {};\n\t\tfor (const item of response.output) if (item.type === \"message\") {\n\t\t\tmessageId = item.id;\n\t\t\tcontent.push(...item.content.flatMap((part) => {\n\t\t\t\tif (part.type === \"output_text\") {\n\t\t\t\t\tif (\"parsed\" in part && part.parsed != null) additional_kwargs.parsed = part.parsed;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\ttext: part.text,\n\t\t\t\t\t\tannotations: part.annotations\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (part.type === \"refusal\") {\n\t\t\t\t\tadditional_kwargs.refusal = part.refusal;\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn part;\n\t\t\t}));\n\t\t} else if (item.type === \"function_call\") {\n\t\t\tconst fnAdapter = {\n\t\t\t\tfunction: {\n\t\t\t\t\tname: item.name,\n\t\t\t\t\targuments: item.arguments\n\t\t\t\t},\n\t\t\t\tid: item.call_id\n\t\t\t};\n\t\t\ttry {\n\t\t\t\ttool_calls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__.parseToolCall)(fnAdapter, { returnId: true }));\n\t\t\t} catch (e) {\n\t\t\t\tlet errMessage;\n\t\t\t\tif (typeof e === \"object\" && e != null && \"message\" in e && typeof e.message === \"string\") errMessage = e.message;\n\t\t\t\tinvalid_tool_calls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__.makeInvalidToolCall)(fnAdapter, errMessage));\n\t\t\t}\n\t\t\tadditional_kwargs[_FUNCTION_CALL_IDS_MAP_KEY] ??= {};\n\t\t\tif (item.id) additional_kwargs[_FUNCTION_CALL_IDS_MAP_KEY][item.call_id] = item.id;\n\t\t} else if (item.type === \"reasoning\") additional_kwargs.reasoning = item;\n\t\telse if (item.type === \"custom_tool_call\") {\n\t\t\tconst parsed = (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_1__.parseCustomToolCall)(item);\n\t\t\tif (parsed) tool_calls.push(parsed);\n\t\t\telse invalid_tool_calls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_8__.makeInvalidToolCall)(item, \"Malformed custom tool call\"));\n\t\t} else {\n\t\t\tadditional_kwargs.tool_outputs ??= [];\n\t\t\tadditional_kwargs.tool_outputs.push(item);\n\t\t}\n\t\treturn new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_9__.AIMessage({\n\t\t\tid: messageId,\n\t\t\tcontent,\n\t\t\ttool_calls,\n\t\t\tinvalid_tool_calls,\n\t\t\tusage_metadata: (0,_utils_output_js__WEBPACK_IMPORTED_MODULE_2__._convertOpenAIResponsesUsageToLangChainUsage)(response.usage),\n\t\t\tadditional_kwargs,\n\t\t\tresponse_metadata\n\t\t});\n\t}\n\t/** @internal */\n\t_convertResponsesDeltaToBaseMessageChunk(chunk) {\n\t\tconst content = [];\n\t\tlet generationInfo = {};\n\t\tlet usage_metadata;\n\t\tconst tool_call_chunks = [];\n\t\tconst response_metadata = { model_provider: \"openai\" };\n\t\tconst additional_kwargs = {};\n\t\tlet id;\n\t\tif (chunk.type === \"response.output_text.delta\") content.push({\n\t\t\ttype: \"text\",\n\t\t\ttext: chunk.delta,\n\t\t\tindex: chunk.content_index\n\t\t});\n\t\telse if (chunk.type === \"response.output_text.annotation.added\") content.push({\n\t\t\ttype: \"text\",\n\t\t\ttext: \"\",\n\t\t\tannotations: [chunk.annotation],\n\t\t\tindex: chunk.content_index\n\t\t});\n\t\telse if (chunk.type === \"response.output_item.added\" && chunk.item.type === \"message\") id = chunk.item.id;\n\t\telse if (chunk.type === \"response.output_item.added\" && chunk.item.type === \"function_call\") {\n\t\t\ttool_call_chunks.push({\n\t\t\t\ttype: \"tool_call_chunk\",\n\t\t\t\tname: chunk.item.name,\n\t\t\t\targs: chunk.item.arguments,\n\t\t\t\tid: chunk.item.call_id,\n\t\t\t\tindex: chunk.output_index\n\t\t\t});\n\t\t\tadditional_kwargs[_FUNCTION_CALL_IDS_MAP_KEY] = { [chunk.item.call_id]: chunk.item.id };\n\t\t} else if (chunk.type === \"response.output_item.done\" && [\n\t\t\t\"web_search_call\",\n\t\t\t\"file_search_call\",\n\t\t\t\"computer_call\",\n\t\t\t\"code_interpreter_call\",\n\t\t\t\"mcp_call\",\n\t\t\t\"mcp_list_tools\",\n\t\t\t\"mcp_approval_request\",\n\t\t\t\"image_generation_call\",\n\t\t\t\"custom_tool_call\"\n\t\t].includes(chunk.item.type)) additional_kwargs.tool_outputs = [chunk.item];\n\t\telse if (chunk.type === \"response.created\") {\n\t\t\tresponse_metadata.id = chunk.response.id;\n\t\t\tresponse_metadata.model_name = chunk.response.model;\n\t\t\tresponse_metadata.model = chunk.response.model;\n\t\t} else if (chunk.type === \"response.completed\") {\n\t\t\tconst msg = this._convertResponsesMessageToBaseMessage(chunk.response);\n\t\t\tusage_metadata = (0,_utils_output_js__WEBPACK_IMPORTED_MODULE_2__._convertOpenAIResponsesUsageToLangChainUsage)(chunk.response.usage);\n\t\t\tif (chunk.response.text?.format?.type === \"json_schema\") additional_kwargs.parsed ??= JSON.parse(msg.text);\n\t\t\tfor (const [key, value] of Object.entries(chunk.response)) if (key !== \"id\") response_metadata[key] = value;\n\t\t} else if (chunk.type === \"response.function_call_arguments.delta\" || chunk.type === \"response.custom_tool_call_input.delta\") tool_call_chunks.push({\n\t\t\ttype: \"tool_call_chunk\",\n\t\t\targs: chunk.delta,\n\t\t\tindex: chunk.output_index\n\t\t});\n\t\telse if (chunk.type === \"response.web_search_call.completed\" || chunk.type === \"response.file_search_call.completed\") generationInfo = { tool_outputs: {\n\t\t\tid: chunk.item_id,\n\t\t\ttype: chunk.type.replace(\"response.\", \"\").replace(\".completed\", \"\"),\n\t\t\tstatus: \"completed\"\n\t\t} };\n\t\telse if (chunk.type === \"response.refusal.done\") additional_kwargs.refusal = chunk.refusal;\n\t\telse if (chunk.type === \"response.output_item.added\" && \"item\" in chunk && chunk.item.type === \"reasoning\") {\n\t\t\tconst summary = chunk.item.summary ? chunk.item.summary.map((s, index) => ({\n\t\t\t\t...s,\n\t\t\t\tindex\n\t\t\t})) : void 0;\n\t\t\tadditional_kwargs.reasoning = {\n\t\t\t\tid: chunk.item.id,\n\t\t\t\ttype: chunk.item.type,\n\t\t\t\t...summary ? { summary } : {}\n\t\t\t};\n\t\t} else if (chunk.type === \"response.reasoning_summary_part.added\") additional_kwargs.reasoning = {\n\t\t\ttype: \"reasoning\",\n\t\t\tsummary: [{\n\t\t\t\t...chunk.part,\n\t\t\t\tindex: chunk.summary_index\n\t\t\t}]\n\t\t};\n\t\telse if (chunk.type === \"response.reasoning_summary_text.delta\") additional_kwargs.reasoning = {\n\t\t\ttype: \"reasoning\",\n\t\t\tsummary: [{\n\t\t\t\ttext: chunk.delta,\n\t\t\t\ttype: \"summary_text\",\n\t\t\t\tindex: chunk.summary_index\n\t\t\t}]\n\t\t};\n\t\telse if (chunk.type === \"response.image_generation_call.partial_image\") return null;\n\t\telse return null;\n\t\treturn new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_10__.ChatGenerationChunk({\n\t\t\ttext: content.map((part) => part.text).join(\"\"),\n\t\t\tmessage: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_9__.AIMessageChunk({\n\t\t\t\tid,\n\t\t\t\tcontent,\n\t\t\t\ttool_call_chunks,\n\t\t\t\tusage_metadata,\n\t\t\t\tadditional_kwargs,\n\t\t\t\tresponse_metadata\n\t\t\t}),\n\t\t\tgenerationInfo\n\t\t});\n\t}\n\t/** @internal */\n\t_convertMessagesToResponsesParams(messages) {\n\t\treturn messages.flatMap((lcMsg) => {\n\t\t\tconst responseMetadata = lcMsg.response_metadata;\n\t\t\tif (responseMetadata?.output_version === \"v1\") return (0,_utils_standard_js__WEBPACK_IMPORTED_MODULE_5__._convertToResponsesMessageFromV1)(lcMsg);\n\t\t\tconst additional_kwargs = lcMsg.additional_kwargs;\n\t\t\tlet role = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_0__.messageToOpenAIRole)(lcMsg);\n\t\t\tif (role === \"system\" && (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_0__.isReasoningModel)(this.model)) role = \"developer\";\n\t\t\tif (role === \"function\") throw new Error(\"Function messages are not supported in Responses API\");\n\t\t\tif (role === \"tool\") {\n\t\t\t\tconst toolMessage = lcMsg;\n\t\t\t\tif (additional_kwargs?.type === \"computer_call_output\") {\n\t\t\t\t\tconst output = (() => {\n\t\t\t\t\t\tif (typeof toolMessage.content === \"string\") return {\n\t\t\t\t\t\t\ttype: \"computer_screenshot\",\n\t\t\t\t\t\t\timage_url: toolMessage.content\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (Array.isArray(toolMessage.content)) {\n\t\t\t\t\t\t\tconst oaiScreenshot = toolMessage.content.find((i) => i.type === \"computer_screenshot\");\n\t\t\t\t\t\t\tif (oaiScreenshot) return oaiScreenshot;\n\t\t\t\t\t\t\tconst lcImage = toolMessage.content.find((i) => i.type === \"image_url\");\n\t\t\t\t\t\t\tif (lcImage) return {\n\t\t\t\t\t\t\t\ttype: \"computer_screenshot\",\n\t\t\t\t\t\t\t\timage_url: typeof lcImage.image_url === \"string\" ? lcImage.image_url : lcImage.image_url.url\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(\"Invalid computer call output\");\n\t\t\t\t\t})();\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"computer_call_output\",\n\t\t\t\t\t\toutput,\n\t\t\t\t\t\tcall_id: toolMessage.tool_call_id\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (toolMessage.additional_kwargs?.customTool) return {\n\t\t\t\t\ttype: \"custom_tool_call_output\",\n\t\t\t\t\tcall_id: toolMessage.tool_call_id,\n\t\t\t\t\toutput: toolMessage.content\n\t\t\t\t};\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"function_call_output\",\n\t\t\t\t\tcall_id: toolMessage.tool_call_id,\n\t\t\t\t\tid: toolMessage.id?.startsWith(\"fc_\") ? toolMessage.id : void 0,\n\t\t\t\t\toutput: typeof toolMessage.content !== \"string\" ? JSON.stringify(toolMessage.content) : toolMessage.content\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (role === \"assistant\") {\n\t\t\t\tif (!this.zdrEnabled && responseMetadata?.output != null && Array.isArray(responseMetadata?.output) && responseMetadata?.output.length > 0 && responseMetadata?.output.every((item) => \"type\" in item)) return responseMetadata?.output;\n\t\t\t\tconst input = [];\n\t\t\t\tif (additional_kwargs?.reasoning && !this.zdrEnabled) {\n\t\t\t\t\tconst reasoningItem = this._convertReasoningSummary(additional_kwargs.reasoning);\n\t\t\t\t\tinput.push(reasoningItem);\n\t\t\t\t}\n\t\t\t\tlet { content } = lcMsg;\n\t\t\t\tif (additional_kwargs?.refusal) {\n\t\t\t\t\tif (typeof content === \"string\") content = [{\n\t\t\t\t\t\ttype: \"output_text\",\n\t\t\t\t\t\ttext: content,\n\t\t\t\t\t\tannotations: []\n\t\t\t\t\t}];\n\t\t\t\t\tcontent = [...content, {\n\t\t\t\t\t\ttype: \"refusal\",\n\t\t\t\t\t\trefusal: additional_kwargs.refusal\n\t\t\t\t\t}];\n\t\t\t\t}\n\t\t\t\tif (typeof content === \"string\" || content.length > 0) input.push({\n\t\t\t\t\ttype: \"message\",\n\t\t\t\t\trole: \"assistant\",\n\t\t\t\t\t...lcMsg.id && !this.zdrEnabled && lcMsg.id.startsWith(\"msg_\") ? { id: lcMsg.id } : {},\n\t\t\t\t\tcontent: (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_0__.iife)(() => {\n\t\t\t\t\t\tif (typeof content === \"string\") return content;\n\t\t\t\t\t\treturn content.flatMap((item) => {\n\t\t\t\t\t\t\tif (item.type === \"text\") return {\n\t\t\t\t\t\t\t\ttype: \"output_text\",\n\t\t\t\t\t\t\t\ttext: item.text,\n\t\t\t\t\t\t\t\tannotations: item.annotations ?? []\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (item.type === \"output_text\" || item.type === \"refusal\") return item;\n\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t\tconst functionCallIds = additional_kwargs?.[_FUNCTION_CALL_IDS_MAP_KEY];\n\t\t\t\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_9__.isAIMessage)(lcMsg) && !!lcMsg.tool_calls?.length) input.push(...lcMsg.tool_calls.map((toolCall) => {\n\t\t\t\t\tif ((0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_1__.isCustomToolCall)(toolCall)) return {\n\t\t\t\t\t\ttype: \"custom_tool_call\",\n\t\t\t\t\t\tid: toolCall.call_id,\n\t\t\t\t\t\tcall_id: toolCall.id ?? \"\",\n\t\t\t\t\t\tinput: toolCall.args.input,\n\t\t\t\t\t\tname: toolCall.name\n\t\t\t\t\t};\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: \"function_call\",\n\t\t\t\t\t\tname: toolCall.name,\n\t\t\t\t\t\targuments: JSON.stringify(toolCall.args),\n\t\t\t\t\t\tcall_id: toolCall.id,\n\t\t\t\t\t\t...this.zdrEnabled ? { id: functionCallIds?.[toolCall.id] } : {}\n\t\t\t\t\t};\n\t\t\t\t}));\n\t\t\t\telse if (additional_kwargs?.tool_calls) input.push(...additional_kwargs.tool_calls.map((toolCall) => ({\n\t\t\t\t\ttype: \"function_call\",\n\t\t\t\t\tname: toolCall.function.name,\n\t\t\t\t\tcall_id: toolCall.id,\n\t\t\t\t\targuments: toolCall.function.arguments,\n\t\t\t\t\t...this.zdrEnabled ? { id: functionCallIds?.[toolCall.id] } : {}\n\t\t\t\t})));\n\t\t\t\tconst toolOutputs = (responseMetadata?.output)?.length ? responseMetadata?.output : additional_kwargs.tool_outputs;\n\t\t\t\tconst fallthroughCallTypes = [\n\t\t\t\t\t\"computer_call\",\n\t\t\t\t\t\"mcp_call\",\n\t\t\t\t\t\"code_interpreter_call\",\n\t\t\t\t\t\"image_generation_call\"\n\t\t\t\t];\n\t\t\t\tif (toolOutputs != null) {\n\t\t\t\t\tconst castToolOutputs = toolOutputs;\n\t\t\t\t\tconst fallthroughCalls = castToolOutputs?.filter((item) => fallthroughCallTypes.includes(item.type));\n\t\t\t\t\tif (fallthroughCalls.length > 0) input.push(...fallthroughCalls);\n\t\t\t\t}\n\t\t\t\treturn input;\n\t\t\t}\n\t\t\tif (role === \"user\" || role === \"system\" || role === \"developer\") {\n\t\t\t\tif (typeof lcMsg.content === \"string\") return {\n\t\t\t\t\ttype: \"message\",\n\t\t\t\t\trole,\n\t\t\t\t\tcontent: lcMsg.content\n\t\t\t\t};\n\t\t\t\tconst messages$1 = [];\n\t\t\t\tconst content = lcMsg.content.flatMap((item) => {\n\t\t\t\t\tif (item.type === \"mcp_approval_response\") messages$1.push({\n\t\t\t\t\t\ttype: \"mcp_approval_response\",\n\t\t\t\t\t\tapproval_request_id: item.approval_request_id,\n\t\t\t\t\t\tapprove: item.approve\n\t\t\t\t\t});\n\t\t\t\t\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_9__.isDataContentBlock)(item)) return (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_9__.convertToProviderContentBlock)(item, _utils_message_inputs_js__WEBPACK_IMPORTED_MODULE_6__.completionsApiContentBlockConverter);\n\t\t\t\t\tif (item.type === \"text\") return {\n\t\t\t\t\t\ttype: \"input_text\",\n\t\t\t\t\t\ttext: item.text\n\t\t\t\t\t};\n\t\t\t\t\tif (item.type === \"image_url\") {\n\t\t\t\t\t\tconst imageUrl = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_0__.iife)(() => {\n\t\t\t\t\t\t\tif (typeof item.image_url === \"string\") return item.image_url;\n\t\t\t\t\t\t\telse if (typeof item.image_url === \"object\" && item.image_url !== null && \"url\" in item.image_url) return item.image_url.url;\n\t\t\t\t\t\t\treturn void 0;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst detail = (0,_utils_misc_js__WEBPACK_IMPORTED_MODULE_0__.iife)(() => {\n\t\t\t\t\t\t\tif (typeof item.image_url === \"string\") return \"auto\";\n\t\t\t\t\t\t\telse if (typeof item.image_url === \"object\" && item.image_url !== null && \"detail\" in item.image_url) return item.image_url.detail;\n\t\t\t\t\t\t\treturn void 0;\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: \"input_image\",\n\t\t\t\t\t\t\timage_url: imageUrl,\n\t\t\t\t\t\t\tdetail\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tif (item.type === \"input_text\" || item.type === \"input_image\" || item.type === \"input_file\") return item;\n\t\t\t\t\treturn [];\n\t\t\t\t});\n\t\t\t\tif (content.length > 0) messages$1.push({\n\t\t\t\t\ttype: \"message\",\n\t\t\t\t\trole,\n\t\t\t\t\tcontent\n\t\t\t\t});\n\t\t\t\treturn messages$1;\n\t\t\t}\n\t\t\tconsole.warn(`Unsupported role found when converting to OpenAI Responses API: ${role}`);\n\t\t\treturn [];\n\t\t});\n\t}\n\t/** @internal */\n\t_convertReasoningSummary(reasoning) {\n\t\tconst summary = (reasoning.summary.length > 1 ? reasoning.summary.reduce((acc, curr) => {\n\t\t\tconst last = acc[acc.length - 1];\n\t\t\tif (last.index === curr.index) last.text += curr.text;\n\t\t\telse acc.push(curr);\n\t\t\treturn acc;\n\t\t}, [{ ...reasoning.summary[0] }]) : reasoning.summary).map((s) => Object.fromEntries(Object.entries(s).filter(([k]) => k !== \"index\")));\n\t\treturn {\n\t\t\t...reasoning,\n\t\t\tsummary\n\t\t};\n\t}\n\t/** @internal */\n\t_reduceChatOpenAITools(tools, fields) {\n\t\tconst reducedTools = [];\n\t\tfor (const tool of tools) if ((0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_1__.isBuiltInTool)(tool)) {\n\t\t\tif (tool.type === \"image_generation\" && fields?.stream) tool.partial_images = 1;\n\t\t\treducedTools.push(tool);\n\t\t} else if ((0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_1__.isCustomTool)(tool)) {\n\t\t\tconst customToolData = tool.metadata.customTool;\n\t\t\treducedTools.push({\n\t\t\t\ttype: \"custom\",\n\t\t\t\tname: customToolData.name,\n\t\t\t\tdescription: customToolData.description,\n\t\t\t\tformat: customToolData.format\n\t\t\t});\n\t\t} else if ((0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_7__.isOpenAITool)(tool)) reducedTools.push({\n\t\t\ttype: \"function\",\n\t\t\tname: tool.function.name,\n\t\t\tparameters: tool.function.parameters,\n\t\t\tdescription: tool.function.description,\n\t\t\tstrict: fields?.strict ?? null\n\t\t});\n\t\telse if ((0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_1__.isOpenAICustomTool)(tool)) reducedTools.push((0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_1__.convertCompletionsCustomTool)(tool));\n\t\treturn reducedTools;\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=responses.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/responses.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/embeddings.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/embeddings.js ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIEmbeddings: () => (/* binding */ OpenAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/client.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/client.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/chunk_array.js\");\n/* harmony import */ var _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/embeddings.js\");\n\n\n\n\n\n\n\n//#region src/embeddings.ts\n/**\n* Class for generating embeddings using the OpenAI API.\n*\n* To use with Azure, import the `AzureOpenAIEmbeddings` class.\n*\n* @example\n* ```typescript\n* // Embed a query using OpenAIEmbeddings to generate embeddings for a given text\n* const model = new OpenAIEmbeddings();\n* const res = await model.embedQuery(\n*   \"What would be a good company name for a company that makes colorful socks?\",\n* );\n* console.log({ res });\n*\n* ```\n*/\nvar OpenAIEmbeddings = class extends _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_5__.Embeddings {\n\tmodel = \"text-embedding-ada-002\";\n\t/** @deprecated Use \"model\" instead */\n\tmodelName;\n\tbatchSize = 512;\n\tstripNewLines = true;\n\t/**\n\t* The number of dimensions the resulting output embeddings should have.\n\t* Only supported in `text-embedding-3` and later models.\n\t*/\n\tdimensions;\n\ttimeout;\n\torganization;\n\tencodingFormat;\n\tclient;\n\tclientConfig;\n\tconstructor(fields) {\n\t\tconst fieldsWithDefaults = {\n\t\t\tmaxConcurrency: 2,\n\t\t\t...fields\n\t\t};\n\t\tsuper(fieldsWithDefaults);\n\t\tconst apiKey = fieldsWithDefaults?.apiKey ?? fieldsWithDefaults?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n\t\tthis.organization = fieldsWithDefaults?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n\t\tthis.model = fieldsWithDefaults?.model ?? fieldsWithDefaults?.modelName ?? this.model;\n\t\tthis.modelName = this.model;\n\t\tthis.batchSize = fieldsWithDefaults?.batchSize ?? this.batchSize;\n\t\tthis.stripNewLines = fieldsWithDefaults?.stripNewLines ?? this.stripNewLines;\n\t\tthis.timeout = fieldsWithDefaults?.timeout;\n\t\tthis.dimensions = fieldsWithDefaults?.dimensions;\n\t\tthis.encodingFormat = fieldsWithDefaults?.encodingFormat;\n\t\tthis.clientConfig = {\n\t\t\tapiKey,\n\t\t\torganization: this.organization,\n\t\t\tdangerouslyAllowBrowser: true,\n\t\t\t...fields?.configuration\n\t\t};\n\t}\n\t/**\n\t* Method to generate embeddings for an array of documents. Splits the\n\t* documents into batches and makes requests to the OpenAI API to generate\n\t* embeddings.\n\t* @param texts Array of documents to generate embeddings for.\n\t* @returns Promise that resolves to a 2D array of embeddings for each document.\n\t*/\n\tasync embedDocuments(texts) {\n\t\tconst batches = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__.chunkArray)(this.stripNewLines ? texts.map((t) => t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n\t\tconst batchRequests = batches.map((batch) => {\n\t\t\tconst params = {\n\t\t\t\tmodel: this.model,\n\t\t\t\tinput: batch\n\t\t\t};\n\t\t\tif (this.dimensions) params.dimensions = this.dimensions;\n\t\t\tif (this.encodingFormat) params.encoding_format = this.encodingFormat;\n\t\t\treturn this.embeddingWithRetry(params);\n\t\t});\n\t\tconst batchResponses = await Promise.all(batchRequests);\n\t\tconst embeddings = [];\n\t\tfor (let i = 0; i < batchResponses.length; i += 1) {\n\t\t\tconst batch = batches[i];\n\t\t\tconst { data: batchResponse } = batchResponses[i];\n\t\t\tfor (let j = 0; j < batch.length; j += 1) embeddings.push(batchResponse[j].embedding);\n\t\t}\n\t\treturn embeddings;\n\t}\n\t/**\n\t* Method to generate an embedding for a single document. Calls the\n\t* embeddingWithRetry method with the document as the input.\n\t* @param text Document to generate an embedding for.\n\t* @returns Promise that resolves to an embedding for the document.\n\t*/\n\tasync embedQuery(text) {\n\t\tconst params = {\n\t\t\tmodel: this.model,\n\t\t\tinput: this.stripNewLines ? text.replace(/\\n/g, \" \") : text\n\t\t};\n\t\tif (this.dimensions) params.dimensions = this.dimensions;\n\t\tif (this.encodingFormat) params.encoding_format = this.encodingFormat;\n\t\tconst { data } = await this.embeddingWithRetry(params);\n\t\treturn data[0].embedding;\n\t}\n\t/**\n\t* Private method to make a request to the OpenAI API to generate\n\t* embeddings. Handles the retry logic and returns the response from the\n\t* API.\n\t* @param request Request to send to the OpenAI API.\n\t* @returns Promise that resolves to the response from the API.\n\t*/\n\tasync embeddingWithRetry(request) {\n\t\tif (!this.client) {\n\t\t\tconst openAIEndpointConfig = { baseURL: this.clientConfig.baseURL };\n\t\t\tconst endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_0__.getEndpoint)(openAIEndpointConfig);\n\t\t\tconst params = {\n\t\t\t\t...this.clientConfig,\n\t\t\t\tbaseURL: endpoint,\n\t\t\t\ttimeout: this.timeout,\n\t\t\t\tmaxRetries: 0\n\t\t\t};\n\t\t\tif (!params.baseURL) delete params.baseURL;\n\t\t\tthis.client = new openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI(params);\n\t\t}\n\t\tconst requestOptions = {};\n\t\treturn this.caller.call(async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await this.client.embeddings.create(request, requestOptions);\n\t\t\t\treturn res;\n\t\t\t} catch (e) {\n\t\t\t\tconst error = (0,_utils_client_js__WEBPACK_IMPORTED_MODULE_1__.wrapOpenAIClientError)(e);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=embeddings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/index.js":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/index.js ***!
  \**********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* reexport safe */ _azure_chat_models_index_js__WEBPACK_IMPORTED_MODULE_10__.AzureChatOpenAI),\n/* harmony export */   AzureChatOpenAICompletions: () => (/* reexport safe */ _azure_chat_models_completions_js__WEBPACK_IMPORTED_MODULE_8__.AzureChatOpenAICompletions),\n/* harmony export */   AzureChatOpenAIResponses: () => (/* reexport safe */ _azure_chat_models_responses_js__WEBPACK_IMPORTED_MODULE_9__.AzureChatOpenAIResponses),\n/* harmony export */   AzureOpenAI: () => (/* reexport safe */ _azure_llms_js__WEBPACK_IMPORTED_MODULE_12__.AzureOpenAI),\n/* harmony export */   AzureOpenAIEmbeddings: () => (/* reexport safe */ _azure_embeddings_js__WEBPACK_IMPORTED_MODULE_14__.AzureOpenAIEmbeddings),\n/* harmony export */   BaseChatOpenAI: () => (/* reexport safe */ _chat_models_base_js__WEBPACK_IMPORTED_MODULE_2__.BaseChatOpenAI),\n/* harmony export */   ChatOpenAI: () => (/* reexport safe */ _chat_models_index_js__WEBPACK_IMPORTED_MODULE_7__.ChatOpenAI),\n/* harmony export */   ChatOpenAICompletions: () => (/* reexport safe */ _chat_models_completions_js__WEBPACK_IMPORTED_MODULE_6__.ChatOpenAICompletions),\n/* harmony export */   ChatOpenAIResponses: () => (/* reexport safe */ _chat_models_responses_js__WEBPACK_IMPORTED_MODULE_5__.ChatOpenAIResponses),\n/* harmony export */   DallEAPIWrapper: () => (/* reexport safe */ _tools_dalle_js__WEBPACK_IMPORTED_MODULE_15__.DallEAPIWrapper),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _llms_js__WEBPACK_IMPORTED_MODULE_11__.OpenAI),\n/* harmony export */   OpenAIClient: () => (/* reexport safe */ openai__WEBPACK_IMPORTED_MODULE_19__.OpenAI),\n/* harmony export */   OpenAIEmbeddings: () => (/* reexport safe */ _embeddings_js__WEBPACK_IMPORTED_MODULE_13__.OpenAIEmbeddings),\n/* harmony export */   _convertMessagesToOpenAIParams: () => (/* reexport safe */ _utils_message_inputs_js__WEBPACK_IMPORTED_MODULE_4__._convertMessagesToOpenAIParams),\n/* harmony export */   convertPromptToOpenAI: () => (/* reexport safe */ _utils_prompts_js__WEBPACK_IMPORTED_MODULE_18__.convertPromptToOpenAI),\n/* harmony export */   customTool: () => (/* reexport safe */ _tools_custom_js__WEBPACK_IMPORTED_MODULE_17__.customTool),\n/* harmony export */   getEndpoint: () => (/* reexport safe */ _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.getEndpoint),\n/* harmony export */   isHeaders: () => (/* reexport safe */ _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.isHeaders),\n/* harmony export */   messageToOpenAIRole: () => (/* reexport safe */ _utils_misc_js__WEBPACK_IMPORTED_MODULE_0__.messageToOpenAIRole),\n/* harmony export */   normalizeHeaders: () => (/* reexport safe */ _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.normalizeHeaders),\n/* harmony export */   toFile: () => (/* reexport safe */ openai__WEBPACK_IMPORTED_MODULE_19__.toFile),\n/* harmony export */   wrapOpenAIClientError: () => (/* reexport safe */ _utils_client_js__WEBPACK_IMPORTED_MODULE_3__.wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var _utils_misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/misc.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _chat_models_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat_models/base.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/base.js\");\n/* harmony import */ var _utils_client_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/client.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/client.js\");\n/* harmony import */ var _utils_message_inputs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/message_inputs.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/message_inputs.js\");\n/* harmony import */ var _chat_models_responses_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chat_models/responses.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/responses.js\");\n/* harmony import */ var _chat_models_completions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chat_models/completions.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/completions.js\");\n/* harmony import */ var _chat_models_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chat_models/index.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/chat_models/index.js\");\n/* harmony import */ var _azure_chat_models_completions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./azure/chat_models/completions.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/completions.js\");\n/* harmony import */ var _azure_chat_models_responses_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./azure/chat_models/responses.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/responses.js\");\n/* harmony import */ var _azure_chat_models_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./azure/chat_models/index.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/chat_models/index.js\");\n/* harmony import */ var _llms_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./llms.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/llms.js\");\n/* harmony import */ var _azure_llms_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./azure/llms.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/llms.js\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./embeddings.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/embeddings.js\");\n/* harmony import */ var _azure_embeddings_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./azure/embeddings.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/azure/embeddings.js\");\n/* harmony import */ var _tools_dalle_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./tools/dalle.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/dalle.js\");\n/* harmony import */ var _tools_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./tools/index.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/index.js\");\n/* harmony import */ var _tools_custom_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./tools/custom.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/custom.js\");\n/* harmony import */ var _utils_prompts_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./utils/prompts.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/prompts.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNEO0FBQ3NCO0FBQ3JCO0FBQ0c7QUFDaUI7QUFDVjtBQUNJO0FBQ2pCO0FBQzRCO0FBQ0o7QUFDYjtBQUM1QjtBQUNXO0FBQ0s7QUFDVztBQUNYO0FBQ3pCO0FBQ3FCO0FBQ1k7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5yb3V0ZXItbGFuZ2dyYXBoLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsYW5nY2hhaW4rb3BlbmFpQDEuMC4wX0BsYW5nY2hhaW4rY29yZUAxLjAuMV9vcGVuYWlANi43LjBfd3NAOC4xOC4zX3pvZEAzLjI1Ljc2X19fd3NAOC4xOC4zL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L2luZGV4LmpzP2M5ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVzc2FnZVRvT3BlbkFJUm9sZSB9IGZyb20gXCIuL3V0aWxzL21pc2MuanNcIjtcbmltcG9ydCB7IGdldEVuZHBvaW50LCBpc0hlYWRlcnMsIG5vcm1hbGl6ZUhlYWRlcnMgfSBmcm9tIFwiLi91dGlscy9henVyZS5qc1wiO1xuaW1wb3J0IHsgQmFzZUNoYXRPcGVuQUkgfSBmcm9tIFwiLi9jaGF0X21vZGVscy9iYXNlLmpzXCI7XG5pbXBvcnQgeyB3cmFwT3BlbkFJQ2xpZW50RXJyb3IgfSBmcm9tIFwiLi91dGlscy9jbGllbnQuanNcIjtcbmltcG9ydCB7IF9jb252ZXJ0TWVzc2FnZXNUb09wZW5BSVBhcmFtcyB9IGZyb20gXCIuL3V0aWxzL21lc3NhZ2VfaW5wdXRzLmpzXCI7XG5pbXBvcnQgeyBDaGF0T3BlbkFJUmVzcG9uc2VzIH0gZnJvbSBcIi4vY2hhdF9tb2RlbHMvcmVzcG9uc2VzLmpzXCI7XG5pbXBvcnQgeyBDaGF0T3BlbkFJQ29tcGxldGlvbnMgfSBmcm9tIFwiLi9jaGF0X21vZGVscy9jb21wbGV0aW9ucy5qc1wiO1xuaW1wb3J0IHsgQ2hhdE9wZW5BSSB9IGZyb20gXCIuL2NoYXRfbW9kZWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBBenVyZUNoYXRPcGVuQUlDb21wbGV0aW9ucyB9IGZyb20gXCIuL2F6dXJlL2NoYXRfbW9kZWxzL2NvbXBsZXRpb25zLmpzXCI7XG5pbXBvcnQgeyBBenVyZUNoYXRPcGVuQUlSZXNwb25zZXMgfSBmcm9tIFwiLi9henVyZS9jaGF0X21vZGVscy9yZXNwb25zZXMuanNcIjtcbmltcG9ydCB7IEF6dXJlQ2hhdE9wZW5BSSB9IGZyb20gXCIuL2F6dXJlL2NoYXRfbW9kZWxzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBPcGVuQUkgfSBmcm9tIFwiLi9sbG1zLmpzXCI7XG5pbXBvcnQgeyBBenVyZU9wZW5BSSB9IGZyb20gXCIuL2F6dXJlL2xsbXMuanNcIjtcbmltcG9ydCB7IE9wZW5BSUVtYmVkZGluZ3MgfSBmcm9tIFwiLi9lbWJlZGRpbmdzLmpzXCI7XG5pbXBvcnQgeyBBenVyZU9wZW5BSUVtYmVkZGluZ3MgfSBmcm9tIFwiLi9henVyZS9lbWJlZGRpbmdzLmpzXCI7XG5pbXBvcnQgeyBEYWxsRUFQSVdyYXBwZXIgfSBmcm9tIFwiLi90b29scy9kYWxsZS5qc1wiO1xuaW1wb3J0IFwiLi90b29scy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY3VzdG9tVG9vbCB9IGZyb20gXCIuL3Rvb2xzL2N1c3RvbS5qc1wiO1xuaW1wb3J0IHsgY29udmVydFByb21wdFRvT3BlbkFJIH0gZnJvbSBcIi4vdXRpbHMvcHJvbXB0cy5qc1wiO1xuaW1wb3J0IHsgT3BlbkFJIGFzIE9wZW5BSUNsaWVudCwgdG9GaWxlIH0gZnJvbSBcIm9wZW5haVwiO1xuXG5leHBvcnQgeyBBenVyZUNoYXRPcGVuQUksIEF6dXJlQ2hhdE9wZW5BSUNvbXBsZXRpb25zLCBBenVyZUNoYXRPcGVuQUlSZXNwb25zZXMsIEF6dXJlT3BlbkFJLCBBenVyZU9wZW5BSUVtYmVkZGluZ3MsIEJhc2VDaGF0T3BlbkFJLCBDaGF0T3BlbkFJLCBDaGF0T3BlbkFJQ29tcGxldGlvbnMsIENoYXRPcGVuQUlSZXNwb25zZXMsIERhbGxFQVBJV3JhcHBlciwgT3BlbkFJLCBPcGVuQUlDbGllbnQsIE9wZW5BSUVtYmVkZGluZ3MsIF9jb252ZXJ0TWVzc2FnZXNUb09wZW5BSVBhcmFtcywgY29udmVydFByb21wdFRvT3BlbkFJLCBjdXN0b21Ub29sLCBnZXRFbmRwb2ludCwgaXNIZWFkZXJzLCBtZXNzYWdlVG9PcGVuQUlSb2xlLCBub3JtYWxpemVIZWFkZXJzLCB0b0ZpbGUsIHdyYXBPcGVuQUlDbGllbnRFcnJvciB9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/llms.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/llms.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI$2)\n/* harmony export */ });\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/client.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/client.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/language_models/llms.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/chunk_array.js\");\n\n\n\n\n\n\n\n\n\n//#region src/llms.ts\n/**\n* Wrapper around OpenAI large language models.\n*\n* To use you should have the `openai` package installed, with the\n* `OPENAI_API_KEY` environment variable set.\n*\n* To use with Azure, import the `AzureOpenAI` class.\n*\n* @remarks\n* Any parameters that are valid to be passed to {@link\n* https://platform.openai.com/docs/api-reference/completions/create |\n* `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n* if not explicitly available on this class.\n* @example\n* ```typescript\n* const model = new OpenAI({\n*   modelName: \"gpt-4\",\n*   temperature: 0.7,\n*   maxTokens: 1000,\n*   maxRetries: 5,\n* });\n*\n* const res = await model.invoke(\n*   \"Question: What would be a good company name for a company that makes colorful socks?\\nAnswer:\"\n* );\n* console.log({ res });\n* ```\n*/\nvar OpenAI$2 = class extends _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_6__.BaseLLM {\n\tstatic lc_name() {\n\t\treturn \"OpenAI\";\n\t}\n\tget callKeys() {\n\t\treturn [...super.callKeys, \"options\"];\n\t}\n\tlc_serializable = true;\n\tget lc_secrets() {\n\t\treturn {\n\t\t\topenAIApiKey: \"OPENAI_API_KEY\",\n\t\t\tapiKey: \"OPENAI_API_KEY\",\n\t\t\torganization: \"OPENAI_ORGANIZATION\"\n\t\t};\n\t}\n\tget lc_aliases() {\n\t\treturn {\n\t\t\tmodelName: \"model\",\n\t\t\topenAIApiKey: \"openai_api_key\",\n\t\t\tapiKey: \"openai_api_key\"\n\t\t};\n\t}\n\ttemperature;\n\tmaxTokens;\n\ttopP;\n\tfrequencyPenalty;\n\tpresencePenalty;\n\tn = 1;\n\tbestOf;\n\tlogitBias;\n\tmodel = \"gpt-3.5-turbo-instruct\";\n\t/** @deprecated Use \"model\" instead */\n\tmodelName;\n\tmodelKwargs;\n\tbatchSize = 20;\n\ttimeout;\n\tstop;\n\tstopSequences;\n\tuser;\n\tstreaming = false;\n\topenAIApiKey;\n\tapiKey;\n\torganization;\n\tclient;\n\tclientConfig;\n\tconstructor(fields) {\n\t\tsuper(fields ?? {});\n\t\tthis.openAIApiKey = fields?.apiKey ?? fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n\t\tthis.apiKey = this.openAIApiKey;\n\t\tthis.organization = fields?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n\t\tthis.model = fields?.model ?? fields?.modelName ?? this.model;\n\t\tif ((this.model?.startsWith(\"gpt-3.5-turbo\") || this.model?.startsWith(\"gpt-4\") || this.model?.startsWith(\"o1\")) && !this.model?.includes(\"-instruct\")) throw new Error([\n\t\t\t`Your chosen OpenAI model, \"${this.model}\", is a chat model and not a text-in/text-out LLM.`,\n\t\t\t`Passing it into the \"OpenAI\" class is no longer supported.`,\n\t\t\t`Please use the \"ChatOpenAI\" class instead.`,\n\t\t\t\"\",\n\t\t\t`See this page for more information:`,\n\t\t\t\"|\",\n\t\t\t`└> https://js.langchain.com/docs/integrations/chat/openai`\n\t\t].join(\"\\n\"));\n\t\tthis.modelName = this.model;\n\t\tthis.modelKwargs = fields?.modelKwargs ?? {};\n\t\tthis.batchSize = fields?.batchSize ?? this.batchSize;\n\t\tthis.timeout = fields?.timeout;\n\t\tthis.temperature = fields?.temperature ?? this.temperature;\n\t\tthis.maxTokens = fields?.maxTokens ?? this.maxTokens;\n\t\tthis.topP = fields?.topP ?? this.topP;\n\t\tthis.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n\t\tthis.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n\t\tthis.n = fields?.n ?? this.n;\n\t\tthis.bestOf = fields?.bestOf ?? this.bestOf;\n\t\tthis.logitBias = fields?.logitBias;\n\t\tthis.stop = fields?.stopSequences ?? fields?.stop;\n\t\tthis.stopSequences = this.stop;\n\t\tthis.user = fields?.user;\n\t\tthis.streaming = fields?.streaming ?? false;\n\t\tif (this.streaming && this.bestOf && this.bestOf > 1) throw new Error(\"Cannot stream results when bestOf > 1\");\n\t\tthis.clientConfig = {\n\t\t\tapiKey: this.apiKey,\n\t\t\torganization: this.organization,\n\t\t\tdangerouslyAllowBrowser: true,\n\t\t\t...fields?.configuration\n\t\t};\n\t}\n\t/**\n\t* Get the parameters used to invoke the model\n\t*/\n\tinvocationParams(options) {\n\t\treturn {\n\t\t\tmodel: this.model,\n\t\t\ttemperature: this.temperature,\n\t\t\tmax_tokens: this.maxTokens,\n\t\t\ttop_p: this.topP,\n\t\t\tfrequency_penalty: this.frequencyPenalty,\n\t\t\tpresence_penalty: this.presencePenalty,\n\t\t\tn: this.n,\n\t\t\tbest_of: this.bestOf,\n\t\t\tlogit_bias: this.logitBias,\n\t\t\tstop: options?.stop ?? this.stopSequences,\n\t\t\tuser: this.user,\n\t\t\tstream: this.streaming,\n\t\t\t...this.modelKwargs\n\t\t};\n\t}\n\t/** @ignore */\n\t_identifyingParams() {\n\t\treturn {\n\t\t\tmodel_name: this.model,\n\t\t\t...this.invocationParams(),\n\t\t\t...this.clientConfig\n\t\t};\n\t}\n\t/**\n\t* Get the identifying parameters for the model\n\t*/\n\tidentifyingParams() {\n\t\treturn this._identifyingParams();\n\t}\n\t/**\n\t* Call out to OpenAI's endpoint with k unique prompts\n\t*\n\t* @param [prompts] - The prompts to pass into the model.\n\t* @param [options] - Optional list of stop words to use when generating.\n\t* @param [runManager] - Optional callback manager to use when generating.\n\t*\n\t* @returns The full LLM output.\n\t*\n\t* @example\n\t* ```ts\n\t* import { OpenAI } from \"langchain/llms/openai\";\n\t* const openai = new OpenAI();\n\t* const response = await openai.generate([\"Tell me a joke.\"]);\n\t* ```\n\t*/\n\tasync _generate(prompts, options, runManager) {\n\t\tconst subPrompts = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_7__.chunkArray)(prompts, this.batchSize);\n\t\tconst choices = [];\n\t\tconst tokenUsage = {};\n\t\tconst params = this.invocationParams(options);\n\t\tif (params.max_tokens === -1) {\n\t\t\tif (prompts.length !== 1) throw new Error(\"max_tokens set to -1 not supported for multiple inputs\");\n\t\t\tparams.max_tokens = await (0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_4__.calculateMaxTokens)({\n\t\t\t\tprompt: prompts[0],\n\t\t\t\tmodelName: this.model\n\t\t\t});\n\t\t}\n\t\tfor (let i = 0; i < subPrompts.length; i += 1) {\n\t\t\tconst data = params.stream ? await (async () => {\n\t\t\t\tconst choices$1 = [];\n\t\t\t\tlet response;\n\t\t\t\tconst stream = await this.completionWithRetry({\n\t\t\t\t\t...params,\n\t\t\t\t\tstream: true,\n\t\t\t\t\tprompt: subPrompts[i]\n\t\t\t\t}, options);\n\t\t\t\tfor await (const message of stream) {\n\t\t\t\t\tif (!response) response = {\n\t\t\t\t\t\tid: message.id,\n\t\t\t\t\t\tobject: message.object,\n\t\t\t\t\t\tcreated: message.created,\n\t\t\t\t\t\tmodel: message.model\n\t\t\t\t\t};\n\t\t\t\t\tfor (const part of message.choices) {\n\t\t\t\t\t\tif (!choices$1[part.index]) choices$1[part.index] = part;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst choice = choices$1[part.index];\n\t\t\t\t\t\t\tchoice.text += part.text;\n\t\t\t\t\t\t\tchoice.finish_reason = part.finish_reason;\n\t\t\t\t\t\t\tchoice.logprobs = part.logprobs;\n\t\t\t\t\t\t}\n\t\t\t\t\t\trunManager?.handleLLMNewToken(part.text, {\n\t\t\t\t\t\t\tprompt: Math.floor(part.index / this.n),\n\t\t\t\t\t\t\tcompletion: part.index % this.n\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (options.signal?.aborted) throw new Error(\"AbortError\");\n\t\t\t\treturn {\n\t\t\t\t\t...response,\n\t\t\t\t\tchoices: choices$1\n\t\t\t\t};\n\t\t\t})() : await this.completionWithRetry({\n\t\t\t\t...params,\n\t\t\t\tstream: false,\n\t\t\t\tprompt: subPrompts[i]\n\t\t\t}, {\n\t\t\t\tsignal: options.signal,\n\t\t\t\t...options.options\n\t\t\t});\n\t\t\tchoices.push(...data.choices);\n\t\t\tconst { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens } = data.usage ? data.usage : {\n\t\t\t\tcompletion_tokens: void 0,\n\t\t\t\tprompt_tokens: void 0,\n\t\t\t\ttotal_tokens: void 0\n\t\t\t};\n\t\t\tif (completionTokens) tokenUsage.completionTokens = (tokenUsage.completionTokens ?? 0) + completionTokens;\n\t\t\tif (promptTokens) tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n\t\t\tif (totalTokens) tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n\t\t}\n\t\tconst generations = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_7__.chunkArray)(choices, this.n).map((promptChoices) => promptChoices.map((choice) => ({\n\t\t\ttext: choice.text ?? \"\",\n\t\t\tgenerationInfo: {\n\t\t\t\tfinishReason: choice.finish_reason,\n\t\t\t\tlogprobs: choice.logprobs\n\t\t\t}\n\t\t})));\n\t\treturn {\n\t\t\tgenerations,\n\t\t\tllmOutput: { tokenUsage }\n\t\t};\n\t}\n\tasync *_streamResponseChunks(input, options, runManager) {\n\t\tconst params = {\n\t\t\t...this.invocationParams(options),\n\t\t\tprompt: input,\n\t\t\tstream: true\n\t\t};\n\t\tconst stream = await this.completionWithRetry(params, options);\n\t\tfor await (const data of stream) {\n\t\t\tconst choice = data?.choices[0];\n\t\t\tif (!choice) continue;\n\t\t\tconst chunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_5__.GenerationChunk({\n\t\t\t\ttext: choice.text,\n\t\t\t\tgenerationInfo: { finishReason: choice.finish_reason }\n\t\t\t});\n\t\t\tyield chunk;\n\t\t\trunManager?.handleLLMNewToken(chunk.text ?? \"\");\n\t\t}\n\t\tif (options.signal?.aborted) throw new Error(\"AbortError\");\n\t}\n\tasync completionWithRetry(request, options) {\n\t\tconst requestOptions = this._getClientOptions(options);\n\t\treturn this.caller.call(async () => {\n\t\t\ttry {\n\t\t\t\tconst res = await this.client.completions.create(request, requestOptions);\n\t\t\t\treturn res;\n\t\t\t} catch (e) {\n\t\t\t\tconst error = (0,_utils_client_js__WEBPACK_IMPORTED_MODULE_1__.wrapOpenAIClientError)(e);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t* Calls the OpenAI API with retry logic in case of failures.\n\t* @param request The request to send to the OpenAI API.\n\t* @param options Optional configuration for the API call.\n\t* @returns The response from the OpenAI API.\n\t*/\n\t_getClientOptions(options) {\n\t\tif (!this.client) {\n\t\t\tconst openAIEndpointConfig = { baseURL: this.clientConfig.baseURL };\n\t\t\tconst endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_0__.getEndpoint)(openAIEndpointConfig);\n\t\t\tconst params = {\n\t\t\t\t...this.clientConfig,\n\t\t\t\tbaseURL: endpoint,\n\t\t\t\ttimeout: this.timeout,\n\t\t\t\tmaxRetries: 0\n\t\t\t};\n\t\t\tif (!params.baseURL) delete params.baseURL;\n\t\t\tthis.client = new openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI(params);\n\t\t}\n\t\tconst requestOptions = {\n\t\t\t...this.clientConfig,\n\t\t\t...options\n\t\t};\n\t\treturn requestOptions;\n\t}\n\t_llmType() {\n\t\treturn \"openai\";\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=llms.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/custom.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/custom.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customTool: () => (/* binding */ customTool)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/runnables/index.js\");\n/* harmony import */ var _langchain_core_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/tools */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/tools/index.js\");\n/* harmony import */ var _langchain_core_singletons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/singletons */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/singletons/index.js\");\n\n\n\n\n//#region src/tools/custom.ts\nfunction customTool(func, fields) {\n\treturn new _langchain_core_tools__WEBPACK_IMPORTED_MODULE_1__.DynamicTool({\n\t\t...fields,\n\t\tdescription: \"\",\n\t\tmetadata: { customTool: fields },\n\t\tfunc: async (input, runManager, config) => new Promise((resolve, reject) => {\n\t\t\tconst childConfig = (0,_langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.patchConfig)(config, { callbacks: runManager?.getChild() });\n\t\t\t_langchain_core_singletons__WEBPACK_IMPORTED_MODULE_2__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_langchain_core_runnables__WEBPACK_IMPORTED_MODULE_0__.pickRunnableConfigKeys)(childConfig), async () => {\n\t\t\t\ttry {\n\t\t\t\t\tresolve(func(input, childConfig));\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t});\n\t\t})\n\t});\n}\n\n//#endregion\n\n//# sourceMappingURL=custom.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdG9vbHMvY3VzdG9tLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBZ0Y7QUFDNUI7QUFDNEI7O0FBRWhGO0FBQ0E7QUFDQSxZQUFZLDhEQUFXO0FBQ3ZCO0FBQ0E7QUFDQSxjQUFjLG9CQUFvQjtBQUNsQztBQUNBLHVCQUF1QixzRUFBVyxXQUFXLG1DQUFtQztBQUNoRixHQUFHLDBGQUFrQyxlQUFlLGlGQUFzQjtBQUMxRTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNILEVBQUU7QUFDRjs7QUFFQTtBQUNzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5yb3V0ZXItbGFuZ2dyYXBoLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsYW5nY2hhaW4rb3BlbmFpQDEuMC4wX0BsYW5nY2hhaW4rY29yZUAxLjAuMV9vcGVuYWlANi43LjBfd3NAOC4xOC4zX3pvZEAzLjI1Ljc2X19fd3NAOC4xOC4zL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3Rvb2xzL2N1c3RvbS5qcz8wYzc3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhdGNoQ29uZmlnLCBwaWNrUnVubmFibGVDb25maWdLZXlzIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS9ydW5uYWJsZXNcIjtcbmltcG9ydCB7IER5bmFtaWNUb29sIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS90b29sc1wiO1xuaW1wb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvc2luZ2xldG9uc1wiO1xuXG4vLyNyZWdpb24gc3JjL3Rvb2xzL2N1c3RvbS50c1xuZnVuY3Rpb24gY3VzdG9tVG9vbChmdW5jLCBmaWVsZHMpIHtcblx0cmV0dXJuIG5ldyBEeW5hbWljVG9vbCh7XG5cdFx0Li4uZmllbGRzLFxuXHRcdGRlc2NyaXB0aW9uOiBcIlwiLFxuXHRcdG1ldGFkYXRhOiB7IGN1c3RvbVRvb2w6IGZpZWxkcyB9LFxuXHRcdGZ1bmM6IGFzeW5jIChpbnB1dCwgcnVuTWFuYWdlciwgY29uZmlnKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRjb25zdCBjaGlsZENvbmZpZyA9IHBhdGNoQ29uZmlnKGNvbmZpZywgeyBjYWxsYmFja3M6IHJ1bk1hbmFnZXI/LmdldENoaWxkKCkgfSk7XG5cdFx0XHRBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uLnJ1bldpdGhDb25maWcocGlja1J1bm5hYmxlQ29uZmlnS2V5cyhjaGlsZENvbmZpZyksIGFzeW5jICgpID0+IHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXNvbHZlKGZ1bmMoaW5wdXQsIGNoaWxkQ29uZmlnKSk7XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRyZWplY3QoZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pXG5cdH0pO1xufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGN1c3RvbVRvb2wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1c3RvbS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/custom.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/dalle.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/dalle.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DallEAPIWrapper: () => (/* binding */ DallEAPIWrapper)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _langchain_core_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/tools */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/tools/index.js\");\n\n\n\n\n//#region src/tools/dalle.ts\n/**\n* A tool for generating images with Open AIs Dall-E 2 or 3 API.\n*/\nvar DallEAPIWrapper = class extends _langchain_core_tools__WEBPACK_IMPORTED_MODULE_2__.Tool {\n\tstatic lc_name() {\n\t\treturn \"DallEAPIWrapper\";\n\t}\n\tname = \"dalle_api_wrapper\";\n\tdescription = \"A wrapper around OpenAI DALL-E API. Useful for when you need to generate images from a text description. Input should be an image description.\";\n\tclient;\n\tstatic toolName = \"dalle_api_wrapper\";\n\tmodel = \"dall-e-3\";\n\tstyle = \"vivid\";\n\tquality = \"standard\";\n\tn = 1;\n\tsize = \"1024x1024\";\n\tdallEResponseFormat = \"url\";\n\tuser;\n\tconstructor(fields) {\n\t\tif (fields?.responseFormat !== void 0 && [\"url\", \"b64_json\"].includes(fields.responseFormat)) {\n\t\t\tfields.dallEResponseFormat = fields.responseFormat;\n\t\t\tfields.responseFormat = \"content\";\n\t\t}\n\t\tsuper(fields);\n\t\tconst openAIApiKey = fields?.apiKey ?? fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n\t\tconst organization = fields?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n\t\tconst clientConfig = {\n\t\t\tapiKey: openAIApiKey,\n\t\t\torganization,\n\t\t\tdangerouslyAllowBrowser: true,\n\t\t\tbaseURL: fields?.baseUrl\n\t\t};\n\t\tthis.client = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI(clientConfig);\n\t\tthis.model = fields?.model ?? fields?.modelName ?? this.model;\n\t\tthis.style = fields?.style ?? this.style;\n\t\tthis.quality = fields?.quality ?? this.quality;\n\t\tthis.n = fields?.n ?? this.n;\n\t\tthis.size = fields?.size ?? this.size;\n\t\tthis.dallEResponseFormat = fields?.dallEResponseFormat ?? this.dallEResponseFormat;\n\t\tthis.user = fields?.user;\n\t}\n\t/**\n\t* Processes the API response if multiple images are generated.\n\t* Returns a list of MessageContentImageUrl objects. If the response\n\t* format is `url`, then the `image_url` field will contain the URL.\n\t* If it is `b64_json`, then the `image_url` field will contain an object\n\t* with a `url` field with the base64 encoded image.\n\t*\n\t* @param {OpenAIClient.Images.ImagesResponse[]} response The API response\n\t* @returns {MessageContentImageUrl[]}\n\t*/\n\tprocessMultipleGeneratedUrls(response) {\n\t\tif (this.dallEResponseFormat === \"url\") return response.flatMap((res) => {\n\t\t\tconst imageUrlContent = res.data?.flatMap((item) => {\n\t\t\t\tif (!item.url) return [];\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"image_url\",\n\t\t\t\t\timage_url: item.url\n\t\t\t\t};\n\t\t\t}).filter((item) => item !== void 0 && item.type === \"image_url\" && typeof item.image_url === \"string\" && item.image_url !== void 0) ?? [];\n\t\t\treturn imageUrlContent;\n\t\t});\n\t\telse return response.flatMap((res) => {\n\t\t\tconst b64Content = res.data?.flatMap((item) => {\n\t\t\t\tif (!item.b64_json) return [];\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"image_url\",\n\t\t\t\t\timage_url: { url: item.b64_json }\n\t\t\t\t};\n\t\t\t}).filter((item) => item !== void 0 && item.type === \"image_url\" && typeof item.image_url === \"object\" && \"url\" in item.image_url && typeof item.image_url.url === \"string\" && item.image_url.url !== void 0) ?? [];\n\t\t\treturn b64Content;\n\t\t});\n\t}\n\t/** @ignore */\n\tasync _call(input) {\n\t\tconst generateImageFields = {\n\t\t\tmodel: this.model,\n\t\t\tprompt: input,\n\t\t\tn: 1,\n\t\t\tsize: this.size,\n\t\t\tresponse_format: this.dallEResponseFormat,\n\t\t\tstyle: this.style,\n\t\t\tquality: this.quality,\n\t\t\tuser: this.user\n\t\t};\n\t\tif (this.n > 1) {\n\t\t\tconst results = await Promise.all(Array.from({ length: this.n }).map(() => this.client.images.generate(generateImageFields)));\n\t\t\treturn this.processMultipleGeneratedUrls(results);\n\t\t}\n\t\tconst response = await this.client.images.generate(generateImageFields);\n\t\tlet data = \"\";\n\t\tif (this.dallEResponseFormat === \"url\") [data] = response.data?.map((item) => item.url).filter((url) => url !== \"undefined\") ?? [];\n\t\telse [data] = response.data?.map((item) => item.b64_json).filter((b64_json) => b64_json !== \"undefined\") ?? [];\n\t\treturn data;\n\t}\n};\n\n//#endregion\n\n//# sourceMappingURL=dalle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdG9vbHMvZGFsbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE0QztBQUN1QjtBQUN0Qjs7QUFFN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsdURBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxpRkFBc0I7QUFDdkYsK0NBQStDLGlGQUFzQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMENBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQ0FBc0M7QUFDakQsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZ0JBQWdCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUMyQjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL29wZW5yb3V0ZXItbGFuZ2dyYXBoLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BsYW5nY2hhaW4rb3BlbmFpQDEuMC4wX0BsYW5nY2hhaW4rY29yZUAxLjAuMV9vcGVuYWlANi43LjBfd3NAOC4xOC4zX3pvZEAzLjI1Ljc2X19fd3NAOC4xOC4zL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3Rvb2xzL2RhbGxlLmpzPzQwOTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BlbkFJIGFzIE9wZW5BSSQxIH0gZnJvbSBcIm9wZW5haVwiO1xuaW1wb3J0IHsgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdXRpbHMvZW52XCI7XG5pbXBvcnQgeyBUb29sIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS90b29sc1wiO1xuXG4vLyNyZWdpb24gc3JjL3Rvb2xzL2RhbGxlLnRzXG4vKipcbiogQSB0b29sIGZvciBnZW5lcmF0aW5nIGltYWdlcyB3aXRoIE9wZW4gQUlzIERhbGwtRSAyIG9yIDMgQVBJLlxuKi9cbnZhciBEYWxsRUFQSVdyYXBwZXIgPSBjbGFzcyBleHRlbmRzIFRvb2wge1xuXHRzdGF0aWMgbGNfbmFtZSgpIHtcblx0XHRyZXR1cm4gXCJEYWxsRUFQSVdyYXBwZXJcIjtcblx0fVxuXHRuYW1lID0gXCJkYWxsZV9hcGlfd3JhcHBlclwiO1xuXHRkZXNjcmlwdGlvbiA9IFwiQSB3cmFwcGVyIGFyb3VuZCBPcGVuQUkgREFMTC1FIEFQSS4gVXNlZnVsIGZvciB3aGVuIHlvdSBuZWVkIHRvIGdlbmVyYXRlIGltYWdlcyBmcm9tIGEgdGV4dCBkZXNjcmlwdGlvbi4gSW5wdXQgc2hvdWxkIGJlIGFuIGltYWdlIGRlc2NyaXB0aW9uLlwiO1xuXHRjbGllbnQ7XG5cdHN0YXRpYyB0b29sTmFtZSA9IFwiZGFsbGVfYXBpX3dyYXBwZXJcIjtcblx0bW9kZWwgPSBcImRhbGwtZS0zXCI7XG5cdHN0eWxlID0gXCJ2aXZpZFwiO1xuXHRxdWFsaXR5ID0gXCJzdGFuZGFyZFwiO1xuXHRuID0gMTtcblx0c2l6ZSA9IFwiMTAyNHgxMDI0XCI7XG5cdGRhbGxFUmVzcG9uc2VGb3JtYXQgPSBcInVybFwiO1xuXHR1c2VyO1xuXHRjb25zdHJ1Y3RvcihmaWVsZHMpIHtcblx0XHRpZiAoZmllbGRzPy5yZXNwb25zZUZvcm1hdCAhPT0gdm9pZCAwICYmIFtcInVybFwiLCBcImI2NF9qc29uXCJdLmluY2x1ZGVzKGZpZWxkcy5yZXNwb25zZUZvcm1hdCkpIHtcblx0XHRcdGZpZWxkcy5kYWxsRVJlc3BvbnNlRm9ybWF0ID0gZmllbGRzLnJlc3BvbnNlRm9ybWF0O1xuXHRcdFx0ZmllbGRzLnJlc3BvbnNlRm9ybWF0ID0gXCJjb250ZW50XCI7XG5cdFx0fVxuXHRcdHN1cGVyKGZpZWxkcyk7XG5cdFx0Y29uc3Qgb3BlbkFJQXBpS2V5ID0gZmllbGRzPy5hcGlLZXkgPz8gZmllbGRzPy5vcGVuQUlBcGlLZXkgPz8gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIk9QRU5BSV9BUElfS0VZXCIpO1xuXHRcdGNvbnN0IG9yZ2FuaXphdGlvbiA9IGZpZWxkcz8ub3JnYW5pemF0aW9uID8/IGdldEVudmlyb25tZW50VmFyaWFibGUoXCJPUEVOQUlfT1JHQU5JWkFUSU9OXCIpO1xuXHRcdGNvbnN0IGNsaWVudENvbmZpZyA9IHtcblx0XHRcdGFwaUtleTogb3BlbkFJQXBpS2V5LFxuXHRcdFx0b3JnYW5pemF0aW9uLFxuXHRcdFx0ZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXI6IHRydWUsXG5cdFx0XHRiYXNlVVJMOiBmaWVsZHM/LmJhc2VVcmxcblx0XHR9O1xuXHRcdHRoaXMuY2xpZW50ID0gbmV3IE9wZW5BSSQxKGNsaWVudENvbmZpZyk7XG5cdFx0dGhpcy5tb2RlbCA9IGZpZWxkcz8ubW9kZWwgPz8gZmllbGRzPy5tb2RlbE5hbWUgPz8gdGhpcy5tb2RlbDtcblx0XHR0aGlzLnN0eWxlID0gZmllbGRzPy5zdHlsZSA/PyB0aGlzLnN0eWxlO1xuXHRcdHRoaXMucXVhbGl0eSA9IGZpZWxkcz8ucXVhbGl0eSA/PyB0aGlzLnF1YWxpdHk7XG5cdFx0dGhpcy5uID0gZmllbGRzPy5uID8/IHRoaXMubjtcblx0XHR0aGlzLnNpemUgPSBmaWVsZHM/LnNpemUgPz8gdGhpcy5zaXplO1xuXHRcdHRoaXMuZGFsbEVSZXNwb25zZUZvcm1hdCA9IGZpZWxkcz8uZGFsbEVSZXNwb25zZUZvcm1hdCA/PyB0aGlzLmRhbGxFUmVzcG9uc2VGb3JtYXQ7XG5cdFx0dGhpcy51c2VyID0gZmllbGRzPy51c2VyO1xuXHR9XG5cdC8qKlxuXHQqIFByb2Nlc3NlcyB0aGUgQVBJIHJlc3BvbnNlIGlmIG11bHRpcGxlIGltYWdlcyBhcmUgZ2VuZXJhdGVkLlxuXHQqIFJldHVybnMgYSBsaXN0IG9mIE1lc3NhZ2VDb250ZW50SW1hZ2VVcmwgb2JqZWN0cy4gSWYgdGhlIHJlc3BvbnNlXG5cdCogZm9ybWF0IGlzIGB1cmxgLCB0aGVuIHRoZSBgaW1hZ2VfdXJsYCBmaWVsZCB3aWxsIGNvbnRhaW4gdGhlIFVSTC5cblx0KiBJZiBpdCBpcyBgYjY0X2pzb25gLCB0aGVuIHRoZSBgaW1hZ2VfdXJsYCBmaWVsZCB3aWxsIGNvbnRhaW4gYW4gb2JqZWN0XG5cdCogd2l0aCBhIGB1cmxgIGZpZWxkIHdpdGggdGhlIGJhc2U2NCBlbmNvZGVkIGltYWdlLlxuXHQqXG5cdCogQHBhcmFtIHtPcGVuQUlDbGllbnQuSW1hZ2VzLkltYWdlc1Jlc3BvbnNlW119IHJlc3BvbnNlIFRoZSBBUEkgcmVzcG9uc2Vcblx0KiBAcmV0dXJucyB7TWVzc2FnZUNvbnRlbnRJbWFnZVVybFtdfVxuXHQqL1xuXHRwcm9jZXNzTXVsdGlwbGVHZW5lcmF0ZWRVcmxzKHJlc3BvbnNlKSB7XG5cdFx0aWYgKHRoaXMuZGFsbEVSZXNwb25zZUZvcm1hdCA9PT0gXCJ1cmxcIikgcmV0dXJuIHJlc3BvbnNlLmZsYXRNYXAoKHJlcykgPT4ge1xuXHRcdFx0Y29uc3QgaW1hZ2VVcmxDb250ZW50ID0gcmVzLmRhdGE/LmZsYXRNYXAoKGl0ZW0pID0+IHtcblx0XHRcdFx0aWYgKCFpdGVtLnVybCkgcmV0dXJuIFtdO1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwiaW1hZ2VfdXJsXCIsXG5cdFx0XHRcdFx0aW1hZ2VfdXJsOiBpdGVtLnVybFxuXHRcdFx0XHR9O1xuXHRcdFx0fSkuZmlsdGVyKChpdGVtKSA9PiBpdGVtICE9PSB2b2lkIDAgJiYgaXRlbS50eXBlID09PSBcImltYWdlX3VybFwiICYmIHR5cGVvZiBpdGVtLmltYWdlX3VybCA9PT0gXCJzdHJpbmdcIiAmJiBpdGVtLmltYWdlX3VybCAhPT0gdm9pZCAwKSA/PyBbXTtcblx0XHRcdHJldHVybiBpbWFnZVVybENvbnRlbnQ7XG5cdFx0fSk7XG5cdFx0ZWxzZSByZXR1cm4gcmVzcG9uc2UuZmxhdE1hcCgocmVzKSA9PiB7XG5cdFx0XHRjb25zdCBiNjRDb250ZW50ID0gcmVzLmRhdGE/LmZsYXRNYXAoKGl0ZW0pID0+IHtcblx0XHRcdFx0aWYgKCFpdGVtLmI2NF9qc29uKSByZXR1cm4gW107XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJpbWFnZV91cmxcIixcblx0XHRcdFx0XHRpbWFnZV91cmw6IHsgdXJsOiBpdGVtLmI2NF9qc29uIH1cblx0XHRcdFx0fTtcblx0XHRcdH0pLmZpbHRlcigoaXRlbSkgPT4gaXRlbSAhPT0gdm9pZCAwICYmIGl0ZW0udHlwZSA9PT0gXCJpbWFnZV91cmxcIiAmJiB0eXBlb2YgaXRlbS5pbWFnZV91cmwgPT09IFwib2JqZWN0XCIgJiYgXCJ1cmxcIiBpbiBpdGVtLmltYWdlX3VybCAmJiB0eXBlb2YgaXRlbS5pbWFnZV91cmwudXJsID09PSBcInN0cmluZ1wiICYmIGl0ZW0uaW1hZ2VfdXJsLnVybCAhPT0gdm9pZCAwKSA/PyBbXTtcblx0XHRcdHJldHVybiBiNjRDb250ZW50O1xuXHRcdH0pO1xuXHR9XG5cdC8qKiBAaWdub3JlICovXG5cdGFzeW5jIF9jYWxsKGlucHV0KSB7XG5cdFx0Y29uc3QgZ2VuZXJhdGVJbWFnZUZpZWxkcyA9IHtcblx0XHRcdG1vZGVsOiB0aGlzLm1vZGVsLFxuXHRcdFx0cHJvbXB0OiBpbnB1dCxcblx0XHRcdG46IDEsXG5cdFx0XHRzaXplOiB0aGlzLnNpemUsXG5cdFx0XHRyZXNwb25zZV9mb3JtYXQ6IHRoaXMuZGFsbEVSZXNwb25zZUZvcm1hdCxcblx0XHRcdHN0eWxlOiB0aGlzLnN0eWxlLFxuXHRcdFx0cXVhbGl0eTogdGhpcy5xdWFsaXR5LFxuXHRcdFx0dXNlcjogdGhpcy51c2VyXG5cdFx0fTtcblx0XHRpZiAodGhpcy5uID4gMSkge1xuXHRcdFx0Y29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKEFycmF5LmZyb20oeyBsZW5ndGg6IHRoaXMubiB9KS5tYXAoKCkgPT4gdGhpcy5jbGllbnQuaW1hZ2VzLmdlbmVyYXRlKGdlbmVyYXRlSW1hZ2VGaWVsZHMpKSk7XG5cdFx0XHRyZXR1cm4gdGhpcy5wcm9jZXNzTXVsdGlwbGVHZW5lcmF0ZWRVcmxzKHJlc3VsdHMpO1xuXHRcdH1cblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LmltYWdlcy5nZW5lcmF0ZShnZW5lcmF0ZUltYWdlRmllbGRzKTtcblx0XHRsZXQgZGF0YSA9IFwiXCI7XG5cdFx0aWYgKHRoaXMuZGFsbEVSZXNwb25zZUZvcm1hdCA9PT0gXCJ1cmxcIikgW2RhdGFdID0gcmVzcG9uc2UuZGF0YT8ubWFwKChpdGVtKSA9PiBpdGVtLnVybCkuZmlsdGVyKCh1cmwpID0+IHVybCAhPT0gXCJ1bmRlZmluZWRcIikgPz8gW107XG5cdFx0ZWxzZSBbZGF0YV0gPSByZXNwb25zZS5kYXRhPy5tYXAoKGl0ZW0pID0+IGl0ZW0uYjY0X2pzb24pLmZpbHRlcigoYjY0X2pzb24pID0+IGI2NF9qc29uICE9PSBcInVuZGVmaW5lZFwiKSA/PyBbXTtcblx0XHRyZXR1cm4gZGF0YTtcblx0fVxufTtcblxuLy8jZW5kcmVnaW9uXG5leHBvcnQgeyBEYWxsRUFQSVdyYXBwZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhbGxlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/dalle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/index.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/index.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dalle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dalle.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/dalle.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdG9vbHMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7QUFBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK29wZW5haUAxLjAuMF9AbGFuZ2NoYWluK2NvcmVAMS4wLjFfb3BlbmFpQDYuNy4wX3dzQDguMTguM196b2RAMy4yNS43Nl9fX3dzQDguMTguMy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC90b29scy9pbmRleC5qcz9lMTIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhbGxFQVBJV3JhcHBlciB9IGZyb20gXCIuL2RhbGxlLmpzXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/tools/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEndpoint: () => (/* binding */ getEndpoint),\n/* harmony export */   isHeaders: () => (/* binding */ isHeaders),\n/* harmony export */   normalizeHeaders: () => (/* binding */ normalizeHeaders)\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js\");\n\n\n//#region src/utils/azure.ts\n/**\n* This function generates an endpoint URL for (Azure) OpenAI\n* based on the configuration parameters provided.\n*\n* @param {OpenAIEndpointConfig} config - The configuration object for the (Azure) endpoint.\n*\n* @property {string} config.azureOpenAIApiDeploymentName - The deployment name of Azure OpenAI.\n* @property {string} config.azureOpenAIApiInstanceName - The instance name of Azure OpenAI, e.g. `example-resource`.\n* @property {string} config.azureOpenAIApiKey - The API Key for Azure OpenAI.\n* @property {string} config.azureOpenAIBasePath - The base path for Azure OpenAI, e.g. `https://example-resource.azure.openai.com/openai/deployments/`.\n* @property {string} config.baseURL - Some other custom base path URL.\n* @property {string} config.azureOpenAIEndpoint - The endpoint for the Azure OpenAI instance, e.g. `https://example-resource.azure.openai.com/`.\n*\n* The function operates as follows:\n* - If both `azureOpenAIBasePath` and `azureOpenAIApiDeploymentName` (plus `azureOpenAIApiKey`) are provided, it returns an URL combining these two parameters (`${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`).\n* - If both `azureOpenAIEndpoint` and `azureOpenAIApiDeploymentName` (plus `azureOpenAIApiKey`) are provided, it returns an URL combining these two parameters (`${azureOpenAIEndpoint}/openai/deployments/${azureOpenAIApiDeploymentName}`).\n* - If `azureOpenAIApiKey` is provided, it checks for `azureOpenAIApiInstanceName` and `azureOpenAIApiDeploymentName` and throws an error if any of these is missing. If both are provided, it generates an URL incorporating these parameters.\n* - If none of the above conditions are met, return any custom `baseURL`.\n* - The function returns the generated URL as a string, or undefined if no custom paths are specified.\n*\n* @throws Will throw an error if the necessary parameters for generating the URL are missing.\n*\n* @returns {string | undefined} The generated (Azure) OpenAI endpoint URL.\n*/\nfunction getEndpoint(config) {\n\tconst { azureOpenAIApiDeploymentName, azureOpenAIApiInstanceName, azureOpenAIApiKey, azureOpenAIBasePath, baseURL, azureADTokenProvider, azureOpenAIEndpoint } = config;\n\tif ((azureOpenAIApiKey || azureADTokenProvider) && azureOpenAIBasePath && azureOpenAIApiDeploymentName) return `${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`;\n\tif ((azureOpenAIApiKey || azureADTokenProvider) && azureOpenAIEndpoint && azureOpenAIApiDeploymentName) return `${azureOpenAIEndpoint}/openai/deployments/${azureOpenAIApiDeploymentName}`;\n\tif (azureOpenAIApiKey || azureADTokenProvider) {\n\t\tif (!azureOpenAIApiInstanceName) throw new Error(\"azureOpenAIApiInstanceName is required when using azureOpenAIApiKey\");\n\t\tif (!azureOpenAIApiDeploymentName) throw new Error(\"azureOpenAIApiDeploymentName is a required parameter when using azureOpenAIApiKey\");\n\t\treturn `https://${azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${azureOpenAIApiDeploymentName}`;\n\t}\n\treturn baseURL;\n}\nfunction isHeaders(headers) {\n\treturn typeof Headers !== \"undefined\" && headers !== null && typeof headers === \"object\" && Object.prototype.toString.call(headers) === \"[object Headers]\";\n}\n/**\n* Normalizes various header formats into a consistent Record format.\n*\n* This function accepts headers in multiple formats and converts them to a\n* Record<string, HeaderValue | readonly HeaderValue[]> for consistent handling.\n*\n* @param headers - The headers to normalize. Can be:\n*   - A Headers instance\n*   - An array of [key, value] pairs\n*   - A plain object with string keys\n*   - A NullableHeaders-like object with a 'values' property containing Headers\n*   - null or undefined\n* @returns A normalized Record containing the header key-value pairs\n*\n* @example\n* ```ts\n* // With Headers instance\n* const headers1 = new Headers([['content-type', 'application/json']]);\n* const normalized1 = normalizeHeaders(headers1);\n*\n* // With plain object\n* const headers2 = { 'content-type': 'application/json' };\n* const normalized2 = normalizeHeaders(headers2);\n*\n* // With array of pairs\n* const headers3 = [['content-type', 'application/json']];\n* const normalized3 = normalizeHeaders(headers3);\n* ```\n*/\nfunction normalizeHeaders(headers) {\n\tconst output = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.iife)(() => {\n\t\tif (isHeaders(headers)) return headers;\n\t\telse if (Array.isArray(headers)) return new Headers(headers);\n\t\telse if (typeof headers === \"object\" && headers !== null && \"values\" in headers && isHeaders(headers.values)) return headers.values;\n\t\telse if (typeof headers === \"object\" && headers !== null) {\n\t\t\tconst entries = Object.entries(headers).filter(([, v]) => typeof v === \"string\").map(([k, v]) => [k, v]);\n\t\t\treturn new Headers(entries);\n\t\t}\n\t\treturn new Headers();\n\t});\n\treturn Object.fromEntries(output.entries());\n}\n\n//#endregion\n\n//# sourceMappingURL=azure.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/azure.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/client.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/client.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapOpenAIClientError: () => (/* binding */ wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/errors.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/index.mjs\");\n\n\n\n//#region src/utils/client.ts\nfunction wrapOpenAIClientError(e) {\n\tif (!e || typeof e !== \"object\") return e;\n\tlet error;\n\tif (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_1__.APIConnectionTimeoutError.name && \"message\" in e && typeof e.message === \"string\") {\n\t\terror = new Error(e.message);\n\t\terror.name = \"TimeoutError\";\n\t} else if (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError.name && \"message\" in e && typeof e.message === \"string\") {\n\t\terror = new Error(e.message);\n\t\terror.name = \"AbortError\";\n\t} else if (\"status\" in e && e.status === 400 && \"message\" in e && typeof e.message === \"string\" && e.message.includes(\"tool_calls\")) error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.addLangChainErrorFields)(e, \"INVALID_TOOL_RESULTS\");\n\telse if (\"status\" in e && e.status === 401) error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.addLangChainErrorFields)(e, \"MODEL_AUTHENTICATION\");\n\telse if (\"status\" in e && e.status === 429) error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.addLangChainErrorFields)(e, \"MODEL_RATE_LIMIT\");\n\telse if (\"status\" in e && e.status === 404) error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.addLangChainErrorFields)(e, \"MODEL_NOT_FOUND\");\n\telse error = e;\n\treturn error;\n}\n\n//#endregion\n\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvY2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRDtBQUNnQjs7QUFFdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNkRBQXlCO0FBQ3JEO0FBQ0E7QUFDQSxHQUFHLGdDQUFnQyxxREFBaUI7QUFDcEQ7QUFDQTtBQUNBLEdBQUcsMklBQTJJLG1FQUF1QjtBQUNySyxxREFBcUQsbUVBQXVCO0FBQzVFLHFEQUFxRCxtRUFBdUI7QUFDNUUscURBQXFELG1FQUF1QjtBQUM1RTtBQUNBO0FBQ0E7O0FBRUE7QUFDaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK29wZW5haUAxLjAuMF9AbGFuZ2NoYWluK2NvcmVAMS4wLjFfb3BlbmFpQDYuNy4wX3dzQDguMTguM196b2RAMy4yNS43Nl9fX3dzQDguMTguMy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9jbGllbnQuanM/NjQ4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyB9IGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuaW1wb3J0IHsgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciwgQVBJVXNlckFib3J0RXJyb3IgfSBmcm9tIFwib3BlbmFpXCI7XG5cbi8vI3JlZ2lvbiBzcmMvdXRpbHMvY2xpZW50LnRzXG5mdW5jdGlvbiB3cmFwT3BlbkFJQ2xpZW50RXJyb3IoZSkge1xuXHRpZiAoIWUgfHwgdHlwZW9mIGUgIT09IFwib2JqZWN0XCIpIHJldHVybiBlO1xuXHRsZXQgZXJyb3I7XG5cdGlmIChlLmNvbnN0cnVjdG9yLm5hbWUgPT09IEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IubmFtZSAmJiBcIm1lc3NhZ2VcIiBpbiBlICYmIHR5cGVvZiBlLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIpIHtcblx0XHRlcnJvciA9IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xuXHRcdGVycm9yLm5hbWUgPSBcIlRpbWVvdXRFcnJvclwiO1xuXHR9IGVsc2UgaWYgKGUuY29uc3RydWN0b3IubmFtZSA9PT0gQVBJVXNlckFib3J0RXJyb3IubmFtZSAmJiBcIm1lc3NhZ2VcIiBpbiBlICYmIHR5cGVvZiBlLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIpIHtcblx0XHRlcnJvciA9IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xuXHRcdGVycm9yLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcblx0fSBlbHNlIGlmIChcInN0YXR1c1wiIGluIGUgJiYgZS5zdGF0dXMgPT09IDQwMCAmJiBcIm1lc3NhZ2VcIiBpbiBlICYmIHR5cGVvZiBlLm1lc3NhZ2UgPT09IFwic3RyaW5nXCIgJiYgZS5tZXNzYWdlLmluY2x1ZGVzKFwidG9vbF9jYWxsc1wiKSkgZXJyb3IgPSBhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyhlLCBcIklOVkFMSURfVE9PTF9SRVNVTFRTXCIpO1xuXHRlbHNlIGlmIChcInN0YXR1c1wiIGluIGUgJiYgZS5zdGF0dXMgPT09IDQwMSkgZXJyb3IgPSBhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyhlLCBcIk1PREVMX0FVVEhFTlRJQ0FUSU9OXCIpO1xuXHRlbHNlIGlmIChcInN0YXR1c1wiIGluIGUgJiYgZS5zdGF0dXMgPT09IDQyOSkgZXJyb3IgPSBhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyhlLCBcIk1PREVMX1JBVEVfTElNSVRcIik7XG5cdGVsc2UgaWYgKFwic3RhdHVzXCIgaW4gZSAmJiBlLnN0YXR1cyA9PT0gNDA0KSBlcnJvciA9IGFkZExhbmdDaGFpbkVycm9yRmllbGRzKGUsIFwiTU9ERUxfTk9UX0ZPVU5EXCIpO1xuXHRlbHNlIGVycm9yID0gZTtcblx0cmV0dXJuIGVycm9yO1xufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IHdyYXBPcGVuQUlDbGllbnRFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/errors.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/errors.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addLangChainErrorFields: () => (/* binding */ addLangChainErrorFields)\n/* harmony export */ });\n//#region src/utils/errors.ts\nfunction addLangChainErrorFields(error, lc_error_code) {\n\terror.lc_error_code = lc_error_code;\n\terror.message = `${error.message}\\n\\nTroubleshooting URL: https://js.langchain.com/docs/troubleshooting/errors/${lc_error_code}/\\n`;\n\treturn error;\n}\n\n//#endregion\n\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYyxnRkFBZ0YsY0FBYztBQUNoSTtBQUNBOztBQUVBO0FBQ21DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnJvdXRlci1sYW5nZ3JhcGgvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvZXJyb3JzLmpzPzAxMDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8jcmVnaW9uIHNyYy91dGlscy9lcnJvcnMudHNcbmZ1bmN0aW9uIGFkZExhbmdDaGFpbkVycm9yRmllbGRzKGVycm9yLCBsY19lcnJvcl9jb2RlKSB7XG5cdGVycm9yLmxjX2Vycm9yX2NvZGUgPSBsY19lcnJvcl9jb2RlO1xuXHRlcnJvci5tZXNzYWdlID0gYCR7ZXJyb3IubWVzc2FnZX1cXG5cXG5Ucm91Ymxlc2hvb3RpbmcgVVJMOiBodHRwczovL2pzLmxhbmdjaGFpbi5jb20vZG9jcy90cm91Ymxlc2hvb3RpbmcvZXJyb3JzLyR7bGNfZXJyb3JfY29kZX0vXFxuYDtcblx0cmV0dXJuIGVycm9yO1xufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGFkZExhbmdDaGFpbkVycm9yRmllbGRzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/message_inputs.js":
/*!*************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/message_inputs.js ***!
  \*************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _convertMessagesToOpenAIParams: () => (/* binding */ _convertMessagesToOpenAIParams),\n/* harmony export */   completionsApiContentBlockConverter: () => (/* binding */ completionsApiContentBlockConverter)\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js\");\n/* harmony import */ var _standard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./standard.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/standard.js\");\n/* harmony import */ var _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/output_parsers/openai_tools */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/output_parsers/openai_tools/index.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n\n\n\n\n\n//#region src/utils/message_inputs.ts\nconst completionsApiContentBlockConverter = {\n\tproviderName: \"ChatOpenAI\",\n\tfromStandardTextBlock(block) {\n\t\treturn {\n\t\t\ttype: \"text\",\n\t\t\ttext: block.text\n\t\t};\n\t},\n\tfromStandardImageBlock(block) {\n\t\tif (block.source_type === \"url\") return {\n\t\t\ttype: \"image_url\",\n\t\t\timage_url: {\n\t\t\t\turl: block.url,\n\t\t\t\t...block.metadata?.detail ? { detail: block.metadata.detail } : {}\n\t\t\t}\n\t\t};\n\t\tif (block.source_type === \"base64\") {\n\t\t\tconst url = `data:${block.mime_type ?? \"\"};base64,${block.data}`;\n\t\t\treturn {\n\t\t\t\ttype: \"image_url\",\n\t\t\t\timage_url: {\n\t\t\t\t\turl,\n\t\t\t\t\t...block.metadata?.detail ? { detail: block.metadata.detail } : {}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tthrow new Error(`Image content blocks with source_type ${block.source_type} are not supported for ChatOpenAI`);\n\t},\n\tfromStandardAudioBlock(block) {\n\t\tif (block.source_type === \"url\") {\n\t\t\tconst data = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_3__.parseBase64DataUrl)({ dataUrl: block.url });\n\t\t\tif (!data) throw new Error(`URL audio blocks with source_type ${block.source_type} must be formatted as a data URL for ChatOpenAI`);\n\t\t\tconst rawMimeType = data.mime_type || block.mime_type || \"\";\n\t\t\tlet mimeType;\n\t\t\ttry {\n\t\t\t\tmimeType = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_3__.parseMimeType)(rawMimeType);\n\t\t\t} catch {\n\t\t\t\tthrow new Error(`Audio blocks with source_type ${block.source_type} must have mime type of audio/wav or audio/mp3`);\n\t\t\t}\n\t\t\tif (mimeType.type !== \"audio\" || mimeType.subtype !== \"wav\" && mimeType.subtype !== \"mp3\") throw new Error(`Audio blocks with source_type ${block.source_type} must have mime type of audio/wav or audio/mp3`);\n\t\t\treturn {\n\t\t\t\ttype: \"input_audio\",\n\t\t\t\tinput_audio: {\n\t\t\t\t\tformat: mimeType.subtype,\n\t\t\t\t\tdata: data.data\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tif (block.source_type === \"base64\") {\n\t\t\tlet mimeType;\n\t\t\ttry {\n\t\t\t\tmimeType = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_3__.parseMimeType)(block.mime_type ?? \"\");\n\t\t\t} catch {\n\t\t\t\tthrow new Error(`Audio blocks with source_type ${block.source_type} must have mime type of audio/wav or audio/mp3`);\n\t\t\t}\n\t\t\tif (mimeType.type !== \"audio\" || mimeType.subtype !== \"wav\" && mimeType.subtype !== \"mp3\") throw new Error(`Audio blocks with source_type ${block.source_type} must have mime type of audio/wav or audio/mp3`);\n\t\t\treturn {\n\t\t\t\ttype: \"input_audio\",\n\t\t\t\tinput_audio: {\n\t\t\t\t\tformat: mimeType.subtype,\n\t\t\t\t\tdata: block.data\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tthrow new Error(`Audio content blocks with source_type ${block.source_type} are not supported for ChatOpenAI`);\n\t},\n\tfromStandardFileBlock(block) {\n\t\tif (block.source_type === \"url\") {\n\t\t\tconst data = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_3__.parseBase64DataUrl)({ dataUrl: block.url });\n\t\t\tif (!data) throw new Error(`URL file blocks with source_type ${block.source_type} must be formatted as a data URL for ChatOpenAI`);\n\t\t\treturn {\n\t\t\t\ttype: \"file\",\n\t\t\t\tfile: {\n\t\t\t\t\tfile_data: block.url,\n\t\t\t\t\t...block.metadata?.filename || block.metadata?.name ? { filename: block.metadata?.filename || block.metadata?.name } : {}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tif (block.source_type === \"base64\") return {\n\t\t\ttype: \"file\",\n\t\t\tfile: {\n\t\t\t\tfile_data: `data:${block.mime_type ?? \"\"};base64,${block.data}`,\n\t\t\t\t...block.metadata?.filename || block.metadata?.name || block.metadata?.title ? { filename: block.metadata?.filename || block.metadata?.name || block.metadata?.title } : {}\n\t\t\t}\n\t\t};\n\t\tif (block.source_type === \"id\") return {\n\t\t\ttype: \"file\",\n\t\t\tfile: { file_id: block.id }\n\t\t};\n\t\tthrow new Error(`File content blocks with source_type ${block.source_type} are not supported for ChatOpenAI`);\n\t}\n};\nfunction _convertMessagesToOpenAIParams(messages, model) {\n\treturn messages.flatMap((message) => {\n\t\tif (\"output_version\" in message.response_metadata && message.response_metadata?.output_version === \"v1\") return (0,_standard_js__WEBPACK_IMPORTED_MODULE_1__._convertToCompletionsMessageFromV1)(message);\n\t\tlet role = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.messageToOpenAIRole)(message);\n\t\tif (role === \"system\" && (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isReasoningModel)(model)) role = \"developer\";\n\t\tconst content = typeof message.content === \"string\" ? message.content : message.content.map((m) => {\n\t\t\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_3__.isDataContentBlock)(m)) return (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_3__.convertToProviderContentBlock)(m, completionsApiContentBlockConverter);\n\t\t\treturn m;\n\t\t});\n\t\tconst completionParam = {\n\t\t\trole,\n\t\t\tcontent\n\t\t};\n\t\tif (message.name != null) completionParam.name = message.name;\n\t\tif (message.additional_kwargs.function_call != null) {\n\t\t\tcompletionParam.function_call = message.additional_kwargs.function_call;\n\t\t\tcompletionParam.content = \"\";\n\t\t}\n\t\tif ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_3__.isAIMessage)(message) && !!message.tool_calls?.length) {\n\t\t\tcompletionParam.tool_calls = message.tool_calls.map(_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_2__.convertLangChainToolCallToOpenAI);\n\t\t\tcompletionParam.content = \"\";\n\t\t} else {\n\t\t\tif (message.additional_kwargs.tool_calls != null) completionParam.tool_calls = message.additional_kwargs.tool_calls;\n\t\t\tif (message.tool_call_id != null) completionParam.tool_call_id = message.tool_call_id;\n\t\t}\n\t\tif (message.additional_kwargs.audio && typeof message.additional_kwargs.audio === \"object\" && \"id\" in message.additional_kwargs.audio) {\n\t\t\tconst audioMessage = {\n\t\t\t\trole: \"assistant\",\n\t\t\t\taudio: { id: message.additional_kwargs.audio.id }\n\t\t\t};\n\t\t\treturn [completionParam, audioMessage];\n\t\t}\n\t\treturn completionParam;\n\t});\n}\n\n//#endregion\n\n//# sourceMappingURL=message_inputs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/message_inputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iife: () => (/* binding */ iife),\n/* harmony export */   isReasoningModel: () => (/* binding */ isReasoningModel),\n/* harmony export */   messageToOpenAIRole: () => (/* binding */ messageToOpenAIRole)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n\n\n//#region src/utils/misc.ts\nconst iife = (fn) => fn();\nfunction isReasoningModel(model) {\n\tif (!model) return false;\n\tif (/^o\\d/.test(model ?? \"\")) return true;\n\tif (model.startsWith(\"gpt-5\") && !model.startsWith(\"gpt-5-chat\")) return true;\n\treturn false;\n}\nfunction extractGenericMessageCustomRole(message) {\n\tif (message.role !== \"system\" && message.role !== \"developer\" && message.role !== \"assistant\" && message.role !== \"user\" && message.role !== \"function\" && message.role !== \"tool\") console.warn(`Unknown message role: ${message.role}`);\n\treturn message.role;\n}\nfunction messageToOpenAIRole(message) {\n\tconst type = message._getType();\n\tswitch (type) {\n\t\tcase \"system\": return \"system\";\n\t\tcase \"ai\": return \"assistant\";\n\t\tcase \"human\": return \"user\";\n\t\tcase \"function\": return \"function\";\n\t\tcase \"tool\": return \"tool\";\n\t\tcase \"generic\":\n\t\t\tif (!_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessage.isInstance(message)) throw new Error(\"Invalid generic chat message\");\n\t\t\treturn extractGenericMessageCustomRole(message);\n\t\tdefault: throw new Error(`Unknown message type: ${type}`);\n\t}\n}\n\n//#endregion\n\n//# sourceMappingURL=misc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvbWlzYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXVEOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyTkFBMk4sYUFBYTtBQUN4TztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBVztBQUNuQjtBQUNBLG9EQUFvRCxLQUFLO0FBQ3pEO0FBQ0E7O0FBRUE7QUFDdUQ7QUFDdkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AbGFuZ2NoYWluK29wZW5haUAxLjAuMF9AbGFuZ2NoYWluK2NvcmVAMS4wLjFfb3BlbmFpQDYuNy4wX3dzQDguMTguM196b2RAMy4yNS43Nl9fX3dzQDguMTguMy9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9taXNjLmpzPzc0OGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhdE1lc3NhZ2UgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzXCI7XG5cbi8vI3JlZ2lvbiBzcmMvdXRpbHMvbWlzYy50c1xuY29uc3QgaWlmZSA9IChmbikgPT4gZm4oKTtcbmZ1bmN0aW9uIGlzUmVhc29uaW5nTW9kZWwobW9kZWwpIHtcblx0aWYgKCFtb2RlbCkgcmV0dXJuIGZhbHNlO1xuXHRpZiAoL15vXFxkLy50ZXN0KG1vZGVsID8/IFwiXCIpKSByZXR1cm4gdHJ1ZTtcblx0aWYgKG1vZGVsLnN0YXJ0c1dpdGgoXCJncHQtNVwiKSAmJiAhbW9kZWwuc3RhcnRzV2l0aChcImdwdC01LWNoYXRcIikpIHJldHVybiB0cnVlO1xuXHRyZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBleHRyYWN0R2VuZXJpY01lc3NhZ2VDdXN0b21Sb2xlKG1lc3NhZ2UpIHtcblx0aWYgKG1lc3NhZ2Uucm9sZSAhPT0gXCJzeXN0ZW1cIiAmJiBtZXNzYWdlLnJvbGUgIT09IFwiZGV2ZWxvcGVyXCIgJiYgbWVzc2FnZS5yb2xlICE9PSBcImFzc2lzdGFudFwiICYmIG1lc3NhZ2Uucm9sZSAhPT0gXCJ1c2VyXCIgJiYgbWVzc2FnZS5yb2xlICE9PSBcImZ1bmN0aW9uXCIgJiYgbWVzc2FnZS5yb2xlICE9PSBcInRvb2xcIikgY29uc29sZS53YXJuKGBVbmtub3duIG1lc3NhZ2Ugcm9sZTogJHttZXNzYWdlLnJvbGV9YCk7XG5cdHJldHVybiBtZXNzYWdlLnJvbGU7XG59XG5mdW5jdGlvbiBtZXNzYWdlVG9PcGVuQUlSb2xlKG1lc3NhZ2UpIHtcblx0Y29uc3QgdHlwZSA9IG1lc3NhZ2UuX2dldFR5cGUoKTtcblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Y2FzZSBcInN5c3RlbVwiOiByZXR1cm4gXCJzeXN0ZW1cIjtcblx0XHRjYXNlIFwiYWlcIjogcmV0dXJuIFwiYXNzaXN0YW50XCI7XG5cdFx0Y2FzZSBcImh1bWFuXCI6IHJldHVybiBcInVzZXJcIjtcblx0XHRjYXNlIFwiZnVuY3Rpb25cIjogcmV0dXJuIFwiZnVuY3Rpb25cIjtcblx0XHRjYXNlIFwidG9vbFwiOiByZXR1cm4gXCJ0b29sXCI7XG5cdFx0Y2FzZSBcImdlbmVyaWNcIjpcblx0XHRcdGlmICghQ2hhdE1lc3NhZ2UuaXNJbnN0YW5jZShtZXNzYWdlKSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBnZW5lcmljIGNoYXQgbWVzc2FnZVwiKTtcblx0XHRcdHJldHVybiBleHRyYWN0R2VuZXJpY01lc3NhZ2VDdXN0b21Sb2xlKG1lc3NhZ2UpO1xuXHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgVW5rbm93biBtZXNzYWdlIHR5cGU6ICR7dHlwZX1gKTtcblx0fVxufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGlpZmUsIGlzUmVhc29uaW5nTW9kZWwsIG1lc3NhZ2VUb09wZW5BSVJvbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pc2MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/output.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/output.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _convertOpenAIResponsesUsageToLangChainUsage: () => (/* binding */ _convertOpenAIResponsesUsageToLangChainUsage),\n/* harmony export */   getStructuredOutputMethod: () => (/* binding */ getStructuredOutputMethod),\n/* harmony export */   handleMultiModalOutput: () => (/* binding */ handleMultiModalOutput),\n/* harmony export */   interopZodResponseFormat: () => (/* binding */ interopZodResponseFormat)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/types/index.js\");\n/* harmony import */ var zod_v4_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/core/to-json-schema.js\");\n/* harmony import */ var zod_v4_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4/core */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/core/parse.js\");\n/* harmony import */ var openai_helpers_zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/helpers/zod */ \"(rsc)/./node_modules/.pnpm/openai@6.7.0_ws@8.18.3_zod@3.25.76/node_modules/openai/helpers/zod.mjs\");\n\n\n\n\n//#region src/utils/output.ts\nconst SUPPORTED_METHODS = [\n\t\"jsonSchema\",\n\t\"functionCalling\",\n\t\"jsonMode\"\n];\n/**\n* Get the structured output method for a given model. By default, it uses\n* `jsonSchema` if the model supports it, otherwise it uses `functionCalling`.\n*\n* @throws if the method is invalid, e.g. is not a string or invalid method is provided.\n* @param model - The model name.\n* @param config - The structured output method options.\n* @returns The structured output method.\n*/\nfunction getStructuredOutputMethod(model, method) {\n\t/**\n\t* If a method is provided, validate it.\n\t*/\n\tif (typeof method !== \"undefined\" && !SUPPORTED_METHODS.includes(method)) throw new Error(`Invalid method: ${method}. Supported methods are: ${SUPPORTED_METHODS.join(\", \")}`);\n\tconst hasSupportForJsonSchema = !model.startsWith(\"gpt-3\") && !model.startsWith(\"gpt-4-\") && model !== \"gpt-4\";\n\t/**\n\t* If the model supports JSON Schema, use it by default.\n\t*/\n\tif (hasSupportForJsonSchema && !method) return \"jsonSchema\";\n\tif (!hasSupportForJsonSchema && method === \"jsonSchema\") throw new Error(`JSON Schema is not supported for model \"${model}\". Please use a different method, e.g. \"functionCalling\" or \"jsonMode\".`);\n\t/**\n\t* If the model does not support JSON Schema, use function calling by default.\n\t*/\n\treturn method ?? \"functionCalling\";\n}\nfunction makeParseableResponseFormat(response_format, parser) {\n\tconst obj = { ...response_format };\n\tObject.defineProperties(obj, {\n\t\t$brand: {\n\t\t\tvalue: \"auto-parseable-response-format\",\n\t\t\tenumerable: false\n\t\t},\n\t\t$parseRaw: {\n\t\t\tvalue: parser,\n\t\t\tenumerable: false\n\t\t}\n\t});\n\treturn obj;\n}\nfunction interopZodResponseFormat(zodSchema, name, props) {\n\tif ((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__.isZodSchemaV3)(zodSchema)) return (0,openai_helpers_zod__WEBPACK_IMPORTED_MODULE_1__.zodResponseFormat)(zodSchema, name, props);\n\tif ((0,_langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__.isZodSchemaV4)(zodSchema)) return makeParseableResponseFormat({\n\t\ttype: \"json_schema\",\n\t\tjson_schema: {\n\t\t\t...props,\n\t\t\tname,\n\t\t\tstrict: true,\n\t\t\tschema: (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_2__.toJSONSchema)(zodSchema, {\n\t\t\t\tcycles: \"ref\",\n\t\t\t\treused: \"ref\",\n\t\t\t\toverride(ctx) {\n\t\t\t\t\tctx.jsonSchema.title = name;\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}, (content) => (0,zod_v4_core__WEBPACK_IMPORTED_MODULE_3__.parse)(zodSchema, JSON.parse(content)));\n\tthrow new Error(\"Unsupported schema response format\");\n}\n/**\n* Handle multi modal response content.\n*\n* @param content The content of the message.\n* @param messages The messages of the response.\n* @returns The new content of the message.\n*/\nfunction handleMultiModalOutput(content, messages) {\n\t/**\n\t* Handle OpenRouter image responses\n\t* @see https://openrouter.ai/docs/features/multimodal/image-generation#api-usage\n\t*/\n\tif (messages && typeof messages === \"object\" && \"images\" in messages && Array.isArray(messages.images)) {\n\t\tconst images = messages.images.filter((image) => typeof image?.image_url?.url === \"string\").map((image) => ({\n\t\t\ttype: \"image\",\n\t\t\turl: image.image_url.url\n\t\t}));\n\t\treturn [{\n\t\t\ttype: \"text\",\n\t\t\ttext: content\n\t\t}, ...images];\n\t}\n\treturn content;\n}\nfunction _convertOpenAIResponsesUsageToLangChainUsage(usage) {\n\tconst inputTokenDetails = { ...usage?.input_tokens_details?.cached_tokens != null && { cache_read: usage?.input_tokens_details?.cached_tokens } };\n\tconst outputTokenDetails = { ...usage?.output_tokens_details?.reasoning_tokens != null && { reasoning: usage?.output_tokens_details?.reasoning_tokens } };\n\treturn {\n\t\tinput_tokens: usage?.input_tokens ?? 0,\n\t\toutput_tokens: usage?.output_tokens ?? 0,\n\t\ttotal_tokens: usage?.total_tokens ?? 0,\n\t\tinput_token_details: inputTokenDetails,\n\t\toutput_token_details: outputTokenDetails\n\t};\n}\n\n//#endregion\n\n//# sourceMappingURL=output.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvb3V0cHV0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQTJFO0FBQ3pCO0FBQ0s7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEdBQThHLE9BQU8sMkJBQTJCLDZCQUE2QjtBQUM3SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUhBQXFILE1BQU07QUFDM0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLEtBQUssMEVBQWEsb0JBQW9CLHFFQUFpQjtBQUN2RCxLQUFLLDBFQUFhO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlEQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFLGVBQWUsa0RBQUs7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QiwyREFBMkQ7QUFDeEYsOEJBQThCLCtEQUErRDtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ3FJO0FBQ3JJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnJvdXRlci1sYW5nZ3JhcGgvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvb3V0cHV0LmpzP2MwZjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNab2RTY2hlbWFWMywgaXNab2RTY2hlbWFWNCB9IGZyb20gXCJAbGFuZ2NoYWluL2NvcmUvdXRpbHMvdHlwZXNcIjtcbmltcG9ydCB7IHBhcnNlLCB0b0pTT05TY2hlbWEgfSBmcm9tIFwiem9kL3Y0L2NvcmVcIjtcbmltcG9ydCB7IHpvZFJlc3BvbnNlRm9ybWF0IH0gZnJvbSBcIm9wZW5haS9oZWxwZXJzL3pvZFwiO1xuXG4vLyNyZWdpb24gc3JjL3V0aWxzL291dHB1dC50c1xuY29uc3QgU1VQUE9SVEVEX01FVEhPRFMgPSBbXG5cdFwianNvblNjaGVtYVwiLFxuXHRcImZ1bmN0aW9uQ2FsbGluZ1wiLFxuXHRcImpzb25Nb2RlXCJcbl07XG4vKipcbiogR2V0IHRoZSBzdHJ1Y3R1cmVkIG91dHB1dCBtZXRob2QgZm9yIGEgZ2l2ZW4gbW9kZWwuIEJ5IGRlZmF1bHQsIGl0IHVzZXNcbiogYGpzb25TY2hlbWFgIGlmIHRoZSBtb2RlbCBzdXBwb3J0cyBpdCwgb3RoZXJ3aXNlIGl0IHVzZXMgYGZ1bmN0aW9uQ2FsbGluZ2AuXG4qXG4qIEB0aHJvd3MgaWYgdGhlIG1ldGhvZCBpcyBpbnZhbGlkLCBlLmcuIGlzIG5vdCBhIHN0cmluZyBvciBpbnZhbGlkIG1ldGhvZCBpcyBwcm92aWRlZC5cbiogQHBhcmFtIG1vZGVsIC0gVGhlIG1vZGVsIG5hbWUuXG4qIEBwYXJhbSBjb25maWcgLSBUaGUgc3RydWN0dXJlZCBvdXRwdXQgbWV0aG9kIG9wdGlvbnMuXG4qIEByZXR1cm5zIFRoZSBzdHJ1Y3R1cmVkIG91dHB1dCBtZXRob2QuXG4qL1xuZnVuY3Rpb24gZ2V0U3RydWN0dXJlZE91dHB1dE1ldGhvZChtb2RlbCwgbWV0aG9kKSB7XG5cdC8qKlxuXHQqIElmIGEgbWV0aG9kIGlzIHByb3ZpZGVkLCB2YWxpZGF0ZSBpdC5cblx0Ki9cblx0aWYgKHR5cGVvZiBtZXRob2QgIT09IFwidW5kZWZpbmVkXCIgJiYgIVNVUFBPUlRFRF9NRVRIT0RTLmluY2x1ZGVzKG1ldGhvZCkpIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtZXRob2Q6ICR7bWV0aG9kfS4gU3VwcG9ydGVkIG1ldGhvZHMgYXJlOiAke1NVUFBPUlRFRF9NRVRIT0RTLmpvaW4oXCIsIFwiKX1gKTtcblx0Y29uc3QgaGFzU3VwcG9ydEZvckpzb25TY2hlbWEgPSAhbW9kZWwuc3RhcnRzV2l0aChcImdwdC0zXCIpICYmICFtb2RlbC5zdGFydHNXaXRoKFwiZ3B0LTQtXCIpICYmIG1vZGVsICE9PSBcImdwdC00XCI7XG5cdC8qKlxuXHQqIElmIHRoZSBtb2RlbCBzdXBwb3J0cyBKU09OIFNjaGVtYSwgdXNlIGl0IGJ5IGRlZmF1bHQuXG5cdCovXG5cdGlmIChoYXNTdXBwb3J0Rm9ySnNvblNjaGVtYSAmJiAhbWV0aG9kKSByZXR1cm4gXCJqc29uU2NoZW1hXCI7XG5cdGlmICghaGFzU3VwcG9ydEZvckpzb25TY2hlbWEgJiYgbWV0aG9kID09PSBcImpzb25TY2hlbWFcIikgdGhyb3cgbmV3IEVycm9yKGBKU09OIFNjaGVtYSBpcyBub3Qgc3VwcG9ydGVkIGZvciBtb2RlbCBcIiR7bW9kZWx9XCIuIFBsZWFzZSB1c2UgYSBkaWZmZXJlbnQgbWV0aG9kLCBlLmcuIFwiZnVuY3Rpb25DYWxsaW5nXCIgb3IgXCJqc29uTW9kZVwiLmApO1xuXHQvKipcblx0KiBJZiB0aGUgbW9kZWwgZG9lcyBub3Qgc3VwcG9ydCBKU09OIFNjaGVtYSwgdXNlIGZ1bmN0aW9uIGNhbGxpbmcgYnkgZGVmYXVsdC5cblx0Ki9cblx0cmV0dXJuIG1ldGhvZCA/PyBcImZ1bmN0aW9uQ2FsbGluZ1wiO1xufVxuZnVuY3Rpb24gbWFrZVBhcnNlYWJsZVJlc3BvbnNlRm9ybWF0KHJlc3BvbnNlX2Zvcm1hdCwgcGFyc2VyKSB7XG5cdGNvbnN0IG9iaiA9IHsgLi4ucmVzcG9uc2VfZm9ybWF0IH07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge1xuXHRcdCRicmFuZDoge1xuXHRcdFx0dmFsdWU6IFwiYXV0by1wYXJzZWFibGUtcmVzcG9uc2UtZm9ybWF0XCIsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZVxuXHRcdH0sXG5cdFx0JHBhcnNlUmF3OiB7XG5cdFx0XHR2YWx1ZTogcGFyc2VyLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2Vcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gaW50ZXJvcFpvZFJlc3BvbnNlRm9ybWF0KHpvZFNjaGVtYSwgbmFtZSwgcHJvcHMpIHtcblx0aWYgKGlzWm9kU2NoZW1hVjMoem9kU2NoZW1hKSkgcmV0dXJuIHpvZFJlc3BvbnNlRm9ybWF0KHpvZFNjaGVtYSwgbmFtZSwgcHJvcHMpO1xuXHRpZiAoaXNab2RTY2hlbWFWNCh6b2RTY2hlbWEpKSByZXR1cm4gbWFrZVBhcnNlYWJsZVJlc3BvbnNlRm9ybWF0KHtcblx0XHR0eXBlOiBcImpzb25fc2NoZW1hXCIsXG5cdFx0anNvbl9zY2hlbWE6IHtcblx0XHRcdC4uLnByb3BzLFxuXHRcdFx0bmFtZSxcblx0XHRcdHN0cmljdDogdHJ1ZSxcblx0XHRcdHNjaGVtYTogdG9KU09OU2NoZW1hKHpvZFNjaGVtYSwge1xuXHRcdFx0XHRjeWNsZXM6IFwicmVmXCIsXG5cdFx0XHRcdHJldXNlZDogXCJyZWZcIixcblx0XHRcdFx0b3ZlcnJpZGUoY3R4KSB7XG5cdFx0XHRcdFx0Y3R4Lmpzb25TY2hlbWEudGl0bGUgPSBuYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHRcdH1cblx0fSwgKGNvbnRlbnQpID0+IHBhcnNlKHpvZFNjaGVtYSwgSlNPTi5wYXJzZShjb250ZW50KSkpO1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBzY2hlbWEgcmVzcG9uc2UgZm9ybWF0XCIpO1xufVxuLyoqXG4qIEhhbmRsZSBtdWx0aSBtb2RhbCByZXNwb25zZSBjb250ZW50LlxuKlxuKiBAcGFyYW0gY29udGVudCBUaGUgY29udGVudCBvZiB0aGUgbWVzc2FnZS5cbiogQHBhcmFtIG1lc3NhZ2VzIFRoZSBtZXNzYWdlcyBvZiB0aGUgcmVzcG9uc2UuXG4qIEByZXR1cm5zIFRoZSBuZXcgY29udGVudCBvZiB0aGUgbWVzc2FnZS5cbiovXG5mdW5jdGlvbiBoYW5kbGVNdWx0aU1vZGFsT3V0cHV0KGNvbnRlbnQsIG1lc3NhZ2VzKSB7XG5cdC8qKlxuXHQqIEhhbmRsZSBPcGVuUm91dGVyIGltYWdlIHJlc3BvbnNlc1xuXHQqIEBzZWUgaHR0cHM6Ly9vcGVucm91dGVyLmFpL2RvY3MvZmVhdHVyZXMvbXVsdGltb2RhbC9pbWFnZS1nZW5lcmF0aW9uI2FwaS11c2FnZVxuXHQqL1xuXHRpZiAobWVzc2FnZXMgJiYgdHlwZW9mIG1lc3NhZ2VzID09PSBcIm9iamVjdFwiICYmIFwiaW1hZ2VzXCIgaW4gbWVzc2FnZXMgJiYgQXJyYXkuaXNBcnJheShtZXNzYWdlcy5pbWFnZXMpKSB7XG5cdFx0Y29uc3QgaW1hZ2VzID0gbWVzc2FnZXMuaW1hZ2VzLmZpbHRlcigoaW1hZ2UpID0+IHR5cGVvZiBpbWFnZT8uaW1hZ2VfdXJsPy51cmwgPT09IFwic3RyaW5nXCIpLm1hcCgoaW1hZ2UpID0+ICh7XG5cdFx0XHR0eXBlOiBcImltYWdlXCIsXG5cdFx0XHR1cmw6IGltYWdlLmltYWdlX3VybC51cmxcblx0XHR9KSk7XG5cdFx0cmV0dXJuIFt7XG5cdFx0XHR0eXBlOiBcInRleHRcIixcblx0XHRcdHRleHQ6IGNvbnRlbnRcblx0XHR9LCAuLi5pbWFnZXNdO1xuXHR9XG5cdHJldHVybiBjb250ZW50O1xufVxuZnVuY3Rpb24gX2NvbnZlcnRPcGVuQUlSZXNwb25zZXNVc2FnZVRvTGFuZ0NoYWluVXNhZ2UodXNhZ2UpIHtcblx0Y29uc3QgaW5wdXRUb2tlbkRldGFpbHMgPSB7IC4uLnVzYWdlPy5pbnB1dF90b2tlbnNfZGV0YWlscz8uY2FjaGVkX3Rva2VucyAhPSBudWxsICYmIHsgY2FjaGVfcmVhZDogdXNhZ2U/LmlucHV0X3Rva2Vuc19kZXRhaWxzPy5jYWNoZWRfdG9rZW5zIH0gfTtcblx0Y29uc3Qgb3V0cHV0VG9rZW5EZXRhaWxzID0geyAuLi51c2FnZT8ub3V0cHV0X3Rva2Vuc19kZXRhaWxzPy5yZWFzb25pbmdfdG9rZW5zICE9IG51bGwgJiYgeyByZWFzb25pbmc6IHVzYWdlPy5vdXRwdXRfdG9rZW5zX2RldGFpbHM/LnJlYXNvbmluZ190b2tlbnMgfSB9O1xuXHRyZXR1cm4ge1xuXHRcdGlucHV0X3Rva2VuczogdXNhZ2U/LmlucHV0X3Rva2VucyA/PyAwLFxuXHRcdG91dHB1dF90b2tlbnM6IHVzYWdlPy5vdXRwdXRfdG9rZW5zID8/IDAsXG5cdFx0dG90YWxfdG9rZW5zOiB1c2FnZT8udG90YWxfdG9rZW5zID8/IDAsXG5cdFx0aW5wdXRfdG9rZW5fZGV0YWlsczogaW5wdXRUb2tlbkRldGFpbHMsXG5cdFx0b3V0cHV0X3Rva2VuX2RldGFpbHM6IG91dHB1dFRva2VuRGV0YWlsc1xuXHR9O1xufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IF9jb252ZXJ0T3BlbkFJUmVzcG9uc2VzVXNhZ2VUb0xhbmdDaGFpblVzYWdlLCBnZXRTdHJ1Y3R1cmVkT3V0cHV0TWV0aG9kLCBoYW5kbGVNdWx0aU1vZGFsT3V0cHV0LCBpbnRlcm9wWm9kUmVzcG9uc2VGb3JtYXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dHB1dC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/output.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/prompts.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/prompts.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertPromptToOpenAI: () => (/* binding */ convertPromptToOpenAI)\n/* harmony export */ });\n/* harmony import */ var _message_inputs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./message_inputs.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/message_inputs.js\");\n\n\n//#region src/utils/prompts.ts\n/**\n* Convert a formatted LangChain prompt (e.g. pulled from the hub) into\n* a format expected by OpenAI's JS SDK.\n*\n* Requires the \"@langchain/openai\" package to be installed in addition\n* to the OpenAI SDK.\n*\n* @example\n* ```ts\n* import { convertPromptToOpenAI } from \"langsmith/utils/hub/openai\";\n* import { pull } from \"langchain/hub\";\n*\n* import OpenAI from 'openai';\n*\n* const prompt = await pull(\"jacob/joke-generator\");\n* const formattedPrompt = await prompt.invoke({\n*   topic: \"cats\",\n* });\n*\n* const { messages } = convertPromptToOpenAI(formattedPrompt);\n*\n* const openAIClient = new OpenAI();\n*\n* const openaiResponse = await openAIClient.chat.completions.create({\n*   model: \"gpt-4o-mini\",\n*   messages,\n* });\n* ```\n* @param formattedPrompt\n* @returns A partial OpenAI payload.\n*/\nfunction convertPromptToOpenAI(formattedPrompt) {\n\tconst messages = formattedPrompt.toChatMessages();\n\treturn { messages: (0,_message_inputs_js__WEBPACK_IMPORTED_MODULE_0__._convertMessagesToOpenAIParams)(messages) };\n}\n\n//#endregion\n\n//# sourceMappingURL=prompts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvcHJvbXB0cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxRTs7QUFFckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHdCQUF3QjtBQUNuQyxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsVUFBVSxXQUFXO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFVBQVUsa0ZBQThCO0FBQ2xEOztBQUVBO0FBQ2lDO0FBQ2pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb3BlbnJvdXRlci1sYW5nZ3JhcGgvLi9ub2RlX21vZHVsZXMvLnBucG0vQGxhbmdjaGFpbitvcGVuYWlAMS4wLjBfQGxhbmdjaGFpbitjb3JlQDEuMC4xX29wZW5haUA2LjcuMF93c0A4LjE4LjNfem9kQDMuMjUuNzZfX193c0A4LjE4LjMvbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvcHJvbXB0cy5qcz80ZmVkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9jb252ZXJ0TWVzc2FnZXNUb09wZW5BSVBhcmFtcyB9IGZyb20gXCIuL21lc3NhZ2VfaW5wdXRzLmpzXCI7XG5cbi8vI3JlZ2lvbiBzcmMvdXRpbHMvcHJvbXB0cy50c1xuLyoqXG4qIENvbnZlcnQgYSBmb3JtYXR0ZWQgTGFuZ0NoYWluIHByb21wdCAoZS5nLiBwdWxsZWQgZnJvbSB0aGUgaHViKSBpbnRvXG4qIGEgZm9ybWF0IGV4cGVjdGVkIGJ5IE9wZW5BSSdzIEpTIFNESy5cbipcbiogUmVxdWlyZXMgdGhlIFwiQGxhbmdjaGFpbi9vcGVuYWlcIiBwYWNrYWdlIHRvIGJlIGluc3RhbGxlZCBpbiBhZGRpdGlvblxuKiB0byB0aGUgT3BlbkFJIFNESy5cbipcbiogQGV4YW1wbGVcbiogYGBgdHNcbiogaW1wb3J0IHsgY29udmVydFByb21wdFRvT3BlbkFJIH0gZnJvbSBcImxhbmdzbWl0aC91dGlscy9odWIvb3BlbmFpXCI7XG4qIGltcG9ydCB7IHB1bGwgfSBmcm9tIFwibGFuZ2NoYWluL2h1YlwiO1xuKlxuKiBpbXBvcnQgT3BlbkFJIGZyb20gJ29wZW5haSc7XG4qXG4qIGNvbnN0IHByb21wdCA9IGF3YWl0IHB1bGwoXCJqYWNvYi9qb2tlLWdlbmVyYXRvclwiKTtcbiogY29uc3QgZm9ybWF0dGVkUHJvbXB0ID0gYXdhaXQgcHJvbXB0Lmludm9rZSh7XG4qICAgdG9waWM6IFwiY2F0c1wiLFxuKiB9KTtcbipcbiogY29uc3QgeyBtZXNzYWdlcyB9ID0gY29udmVydFByb21wdFRvT3BlbkFJKGZvcm1hdHRlZFByb21wdCk7XG4qXG4qIGNvbnN0IG9wZW5BSUNsaWVudCA9IG5ldyBPcGVuQUkoKTtcbipcbiogY29uc3Qgb3BlbmFpUmVzcG9uc2UgPSBhd2FpdCBvcGVuQUlDbGllbnQuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoe1xuKiAgIG1vZGVsOiBcImdwdC00by1taW5pXCIsXG4qICAgbWVzc2FnZXMsXG4qIH0pO1xuKiBgYGBcbiogQHBhcmFtIGZvcm1hdHRlZFByb21wdFxuKiBAcmV0dXJucyBBIHBhcnRpYWwgT3BlbkFJIHBheWxvYWQuXG4qL1xuZnVuY3Rpb24gY29udmVydFByb21wdFRvT3BlbkFJKGZvcm1hdHRlZFByb21wdCkge1xuXHRjb25zdCBtZXNzYWdlcyA9IGZvcm1hdHRlZFByb21wdC50b0NoYXRNZXNzYWdlcygpO1xuXHRyZXR1cm4geyBtZXNzYWdlczogX2NvbnZlcnRNZXNzYWdlc1RvT3BlbkFJUGFyYW1zKG1lc3NhZ2VzKSB9O1xufVxuXG4vLyNlbmRyZWdpb25cbmV4cG9ydCB7IGNvbnZlcnRQcm9tcHRUb09wZW5BSSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbXB0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/standard.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/standard.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _convertToCompletionsMessageFromV1: () => (/* binding */ _convertToCompletionsMessageFromV1),\n/* harmony export */   _convertToResponsesMessageFromV1: () => (/* binding */ _convertToResponsesMessageFromV1)\n/* harmony export */ });\n/* harmony import */ var _misc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc.js */ \"(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/misc.js\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/messages/index.js\");\n\n\n\n//#region src/utils/standard.ts\nfunction _convertToChatCompletionsData(block) {\n\tif (block.type === \"image\") {\n\t\tif (block.url) return {\n\t\t\ttype: \"image_url\",\n\t\t\timage_url: { url: block.url }\n\t\t};\n\t\telse if (block.data) return {\n\t\t\ttype: \"image_url\",\n\t\t\timage_url: { url: `data:${block.mimeType};base64,${block.data}` }\n\t\t};\n\t}\n\tif (block.type === \"audio\") {\n\t\tif (block.data) {\n\t\t\tconst format = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.iife)(() => {\n\t\t\t\tconst [, format$1] = block.mimeType.split(\"/\");\n\t\t\t\tif (format$1 === \"wav\" || format$1 === \"mp3\") return format$1;\n\t\t\t\treturn \"wav\";\n\t\t\t});\n\t\t\treturn {\n\t\t\t\ttype: \"input_audio\",\n\t\t\t\tinput_audio: {\n\t\t\t\t\tdata: block.data.toString(),\n\t\t\t\t\tformat\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\tif (block.type === \"file\") {\n\t\tif (block.data) return {\n\t\t\ttype: \"file\",\n\t\t\tfile: { file_data: block.data.toString() }\n\t\t};\n\t\tif (block.fileId) return {\n\t\t\ttype: \"file\",\n\t\t\tfile: { file_id: block.fileId }\n\t\t};\n\t}\n\treturn void 0;\n}\nfunction _convertToCompletionsMessageFromV1(message, model) {\n\tlet role = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.messageToOpenAIRole)(message);\n\tif (role === \"system\" && (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.isReasoningModel)(model)) role = \"developer\";\n\tif (role === \"developer\") return {\n\t\trole: \"developer\",\n\t\tcontent: message.contentBlocks.filter((block) => block.type === \"text\")\n\t};\n\telse if (role === \"system\") return {\n\t\trole: \"system\",\n\t\tcontent: message.contentBlocks.filter((block) => block.type === \"text\")\n\t};\n\telse if (role === \"assistant\") return {\n\t\trole: \"assistant\",\n\t\tcontent: message.contentBlocks.filter((block) => block.type === \"text\")\n\t};\n\telse if (role === \"tool\" && _langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.ToolMessage.isInstance(message)) return {\n\t\trole: \"tool\",\n\t\ttool_call_id: message.tool_call_id,\n\t\tcontent: message.contentBlocks.filter((block) => block.type === \"text\")\n\t};\n\telse if (role === \"function\") return {\n\t\trole: \"function\",\n\t\tname: message.name ?? \"\",\n\t\tcontent: message.contentBlocks.filter((block) => block.type === \"text\").join(\"\")\n\t};\n\tfunction* iterateUserContent(blocks) {\n\t\tfor (const block of blocks) {\n\t\t\tif (block.type === \"text\") yield {\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: block.text\n\t\t\t};\n\t\t\tconst data = _convertToChatCompletionsData(block);\n\t\t\tif (data) yield data;\n\t\t}\n\t}\n\treturn {\n\t\trole: \"user\",\n\t\tcontent: Array.from(iterateUserContent(message.contentBlocks))\n\t};\n}\nfunction _convertToResponsesMessageFromV1(message) {\n\tconst isResponsesMessage = (0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_1__.isAIMessage)(message) && message.response_metadata?.model_provider === \"openai\";\n\tfunction* iterateItems() {\n\t\tconst messageRole = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.iife)(() => {\n\t\t\ttry {\n\t\t\t\tconst role = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.messageToOpenAIRole)(message);\n\t\t\t\tif (role === \"system\" || role === \"developer\" || role === \"assistant\" || role === \"user\") return role;\n\t\t\t\treturn \"assistant\";\n\t\t\t} catch {\n\t\t\t\treturn \"assistant\";\n\t\t\t}\n\t\t});\n\t\tlet currentMessage = void 0;\n\t\tconst functionCallIdsWithBlocks = /* @__PURE__ */ new Set();\n\t\tconst serverFunctionCallIdsWithBlocks = /* @__PURE__ */ new Set();\n\t\tconst pendingFunctionChunks = /* @__PURE__ */ new Map();\n\t\tconst pendingServerFunctionChunks = /* @__PURE__ */ new Map();\n\t\tfunction* flushMessage() {\n\t\t\tif (!currentMessage) return;\n\t\t\tconst content = currentMessage.content;\n\t\t\tif (typeof content === \"string\" && content.length > 0 || Array.isArray(content) && content.length > 0) yield currentMessage;\n\t\t\tcurrentMessage = void 0;\n\t\t}\n\t\tconst pushMessageContent = (content) => {\n\t\t\tif (!currentMessage) currentMessage = {\n\t\t\t\ttype: \"message\",\n\t\t\t\trole: messageRole,\n\t\t\t\tcontent: []\n\t\t\t};\n\t\t\tif (typeof currentMessage.content === \"string\") currentMessage.content = currentMessage.content.length > 0 ? [{\n\t\t\t\ttype: \"input_text\",\n\t\t\t\ttext: currentMessage.content\n\t\t\t}, ...content] : [...content];\n\t\t\telse currentMessage.content.push(...content);\n\t\t};\n\t\tconst toJsonString = (value) => {\n\t\t\tif (typeof value === \"string\") return value;\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(value ?? {});\n\t\t\t} catch {\n\t\t\t\treturn \"{}\";\n\t\t\t}\n\t\t};\n\t\tconst resolveImageItem = (block) => {\n\t\t\tconst detail = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.iife)(() => {\n\t\t\t\tconst raw = block.metadata?.detail;\n\t\t\t\tif (raw === \"low\" || raw === \"high\" || raw === \"auto\") return raw;\n\t\t\t\treturn \"auto\";\n\t\t\t});\n\t\t\tif (block.fileId) return {\n\t\t\t\ttype: \"input_image\",\n\t\t\t\tdetail,\n\t\t\t\tfile_id: block.fileId\n\t\t\t};\n\t\t\tif (block.url) return {\n\t\t\t\ttype: \"input_image\",\n\t\t\t\tdetail,\n\t\t\t\timage_url: block.url\n\t\t\t};\n\t\t\tif (block.data) {\n\t\t\t\tconst base64Data = typeof block.data === \"string\" ? block.data : Buffer.from(block.data).toString(\"base64\");\n\t\t\t\tconst mimeType = block.mimeType ?? \"image/png\";\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"input_image\",\n\t\t\t\t\tdetail,\n\t\t\t\t\timage_url: `data:${mimeType};base64,${base64Data}`\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn void 0;\n\t\t};\n\t\tconst resolveFileItem = (block) => {\n\t\t\tconst filename = block.metadata?.filename ?? block.metadata?.name ?? block.metadata?.title;\n\t\t\tif (block.fileId && typeof filename === \"string\") return {\n\t\t\t\ttype: \"input_file\",\n\t\t\t\tfile_id: block.fileId,\n\t\t\t\t...filename ? { filename } : {}\n\t\t\t};\n\t\t\tif (block.url && typeof filename === \"string\") return {\n\t\t\t\ttype: \"input_file\",\n\t\t\t\tfile_url: block.url,\n\t\t\t\t...filename ? { filename } : {}\n\t\t\t};\n\t\t\tif (block.data && typeof filename === \"string\") {\n\t\t\t\tconst encoded = typeof block.data === \"string\" ? block.data : Buffer.from(block.data).toString(\"base64\");\n\t\t\t\tconst mimeType = block.mimeType ?? \"application/octet-stream\";\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"input_file\",\n\t\t\t\t\tfile_data: `data:${mimeType};base64,${encoded}`,\n\t\t\t\t\t...filename ? { filename } : {}\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn void 0;\n\t\t};\n\t\tconst convertReasoningBlock = (block) => {\n\t\t\tconst summaryEntries = (0,_misc_js__WEBPACK_IMPORTED_MODULE_0__.iife)(() => {\n\t\t\t\tif (Array.isArray(block.summary)) {\n\t\t\t\t\tconst candidate = block.summary;\n\t\t\t\t\tconst mapped = candidate?.map((item) => item?.text).filter((text) => typeof text === \"string\") ?? [];\n\t\t\t\t\tif (mapped.length > 0) return mapped;\n\t\t\t\t}\n\t\t\t\treturn block.reasoning ? [block.reasoning] : [];\n\t\t\t});\n\t\t\tconst summary = summaryEntries.length > 0 ? summaryEntries.map((text) => ({\n\t\t\t\ttype: \"summary_text\",\n\t\t\t\ttext\n\t\t\t})) : [{\n\t\t\t\ttype: \"summary_text\",\n\t\t\t\ttext: \"\"\n\t\t\t}];\n\t\t\tconst reasoningItem = {\n\t\t\t\ttype: \"reasoning\",\n\t\t\t\tid: block.id ?? \"\",\n\t\t\t\tsummary\n\t\t\t};\n\t\t\tif (block.reasoning) reasoningItem.content = [{\n\t\t\t\ttype: \"reasoning_text\",\n\t\t\t\ttext: block.reasoning\n\t\t\t}];\n\t\t\treturn reasoningItem;\n\t\t};\n\t\tconst convertFunctionCall = (block) => ({\n\t\t\ttype: \"function_call\",\n\t\t\tname: block.name ?? \"\",\n\t\t\tcall_id: block.id ?? \"\",\n\t\t\targuments: toJsonString(block.args)\n\t\t});\n\t\tconst convertFunctionCallOutput = (block) => {\n\t\t\tconst output = toJsonString(block.output);\n\t\t\tconst status = block.status === \"success\" ? \"completed\" : block.status === \"error\" ? \"incomplete\" : void 0;\n\t\t\treturn {\n\t\t\t\ttype: \"function_call_output\",\n\t\t\t\tcall_id: block.toolCallId ?? \"\",\n\t\t\t\toutput,\n\t\t\t\t...status ? { status } : {}\n\t\t\t};\n\t\t};\n\t\tfor (const block of message.contentBlocks) if (block.type === \"text\") pushMessageContent([{\n\t\t\ttype: \"input_text\",\n\t\t\ttext: block.text\n\t\t}]);\n\t\telse if (block.type === \"invalid_tool_call\") {} else if (block.type === \"reasoning\") {\n\t\t\tyield* flushMessage();\n\t\t\tyield convertReasoningBlock(block);\n\t\t} else if (block.type === \"tool_call\") {\n\t\t\tyield* flushMessage();\n\t\t\tconst id = block.id ?? \"\";\n\t\t\tif (id) {\n\t\t\t\tfunctionCallIdsWithBlocks.add(id);\n\t\t\t\tpendingFunctionChunks.delete(id);\n\t\t\t}\n\t\t\tyield convertFunctionCall(block);\n\t\t} else if (block.type === \"tool_call_chunk\") {\n\t\t\tif (block.id) {\n\t\t\t\tconst existing = pendingFunctionChunks.get(block.id) ?? {\n\t\t\t\t\tname: block.name,\n\t\t\t\t\targs: []\n\t\t\t\t};\n\t\t\t\tif (block.name) existing.name = block.name;\n\t\t\t\tif (block.args) existing.args.push(block.args);\n\t\t\t\tpendingFunctionChunks.set(block.id, existing);\n\t\t\t}\n\t\t} else if (block.type === \"server_tool_call\") {\n\t\t\tyield* flushMessage();\n\t\t\tconst id = block.id ?? \"\";\n\t\t\tif (id) {\n\t\t\t\tserverFunctionCallIdsWithBlocks.add(id);\n\t\t\t\tpendingServerFunctionChunks.delete(id);\n\t\t\t}\n\t\t\tyield convertFunctionCall(block);\n\t\t} else if (block.type === \"server_tool_call_chunk\") {\n\t\t\tif (block.id) {\n\t\t\t\tconst existing = pendingServerFunctionChunks.get(block.id) ?? {\n\t\t\t\t\tname: block.name,\n\t\t\t\t\targs: []\n\t\t\t\t};\n\t\t\t\tif (block.name) existing.name = block.name;\n\t\t\t\tif (block.args) existing.args.push(block.args);\n\t\t\t\tpendingServerFunctionChunks.set(block.id, existing);\n\t\t\t}\n\t\t} else if (block.type === \"server_tool_call_result\") {\n\t\t\tyield* flushMessage();\n\t\t\tyield convertFunctionCallOutput(block);\n\t\t} else if (block.type === \"audio\") {} else if (block.type === \"file\") {\n\t\t\tconst fileItem = resolveFileItem(block);\n\t\t\tif (fileItem) pushMessageContent([fileItem]);\n\t\t} else if (block.type === \"image\") {\n\t\t\tconst imageItem = resolveImageItem(block);\n\t\t\tif (imageItem) pushMessageContent([imageItem]);\n\t\t} else if (block.type === \"video\") {\n\t\t\tconst videoItem = resolveFileItem(block);\n\t\t\tif (videoItem) pushMessageContent([videoItem]);\n\t\t} else if (block.type === \"text-plain\") {\n\t\t\tif (block.text) pushMessageContent([{\n\t\t\t\ttype: \"input_text\",\n\t\t\t\ttext: block.text\n\t\t\t}]);\n\t\t} else if (block.type === \"non_standard\" && isResponsesMessage) {\n\t\t\tyield* flushMessage();\n\t\t\tyield block.value;\n\t\t}\n\t\tyield* flushMessage();\n\t\tfor (const [id, chunk] of pendingFunctionChunks) {\n\t\t\tif (!id || functionCallIdsWithBlocks.has(id)) continue;\n\t\t\tconst args = chunk.args.join(\"\");\n\t\t\tif (!chunk.name && !args) continue;\n\t\t\tyield {\n\t\t\t\ttype: \"function_call\",\n\t\t\t\tcall_id: id,\n\t\t\t\tname: chunk.name ?? \"\",\n\t\t\t\targuments: args\n\t\t\t};\n\t\t}\n\t\tfor (const [id, chunk] of pendingServerFunctionChunks) {\n\t\t\tif (!id || serverFunctionCallIdsWithBlocks.has(id)) continue;\n\t\t\tconst args = chunk.args.join(\"\");\n\t\t\tif (!chunk.name && !args) continue;\n\t\t\tyield {\n\t\t\t\ttype: \"function_call\",\n\t\t\t\tcall_id: id,\n\t\t\t\tname: chunk.name ?? \"\",\n\t\t\t\targuments: args\n\t\t\t};\n\t\t}\n\t}\n\treturn Array.from(iterateItems());\n}\n\n//#endregion\n\n//# sourceMappingURL=standard.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/standard.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/tools.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/tools.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _convertToOpenAITool: () => (/* binding */ _convertToOpenAITool),\n/* harmony export */   convertCompletionsCustomTool: () => (/* binding */ convertCompletionsCustomTool),\n/* harmony export */   convertResponsesCustomTool: () => (/* binding */ convertResponsesCustomTool),\n/* harmony export */   formatFunctionDefinitions: () => (/* binding */ formatFunctionDefinitions),\n/* harmony export */   formatToOpenAIToolChoice: () => (/* binding */ formatToOpenAIToolChoice),\n/* harmony export */   isBuiltInTool: () => (/* binding */ isBuiltInTool),\n/* harmony export */   isBuiltInToolChoice: () => (/* binding */ isBuiltInToolChoice),\n/* harmony export */   isCustomTool: () => (/* binding */ isCustomTool),\n/* harmony export */   isCustomToolCall: () => (/* binding */ isCustomToolCall),\n/* harmony export */   isOpenAICustomTool: () => (/* binding */ isOpenAICustomTool),\n/* harmony export */   parseCustomToolCall: () => (/* binding */ parseCustomToolCall)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/types */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/types/index.js\");\n/* harmony import */ var _langchain_core_utils_json_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/json_schema */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/json_schema.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/.pnpm/@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76_/node_modules/@langchain/core/dist/utils/function_calling.js\");\n\n\n\n\n//#region src/utils/tools.ts\n/**\n* Formats a tool in either OpenAI format, or LangChain structured tool format\n* into an OpenAI tool format. If the tool is already in OpenAI format, return without\n* any changes. If it is in LangChain structured tool format, convert it to OpenAI tool format\n* using OpenAI's `zodFunction` util, falling back to `convertToOpenAIFunction` if the parameters\n* returned from the `zodFunction` util are not defined.\n*\n* @param {BindToolsInput} tool The tool to convert to an OpenAI tool.\n* @param {Object} [fields] Additional fields to add to the OpenAI tool.\n* @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n*/\nfunction _convertToOpenAITool(tool, fields) {\n\tlet toolDef;\n\tif ((0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_2__.isLangChainTool)(tool)) toolDef = (0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_2__.convertToOpenAITool)(tool);\n\telse toolDef = tool;\n\tif (fields?.strict !== void 0) toolDef.function.strict = fields.strict;\n\treturn toolDef;\n}\nfunction isAnyOfProp(prop) {\n\treturn prop.anyOf !== void 0 && Array.isArray(prop.anyOf);\n}\nfunction formatFunctionDefinitions(functions) {\n\tconst lines = [\"namespace functions {\", \"\"];\n\tfor (const f of functions) {\n\t\tif (f.description) lines.push(`// ${f.description}`);\n\t\tif (Object.keys(f.parameters.properties ?? {}).length > 0) {\n\t\t\tlines.push(`type ${f.name} = (_: {`);\n\t\t\tlines.push(formatObjectProperties(f.parameters, 0));\n\t\t\tlines.push(\"}) => any;\");\n\t\t} else lines.push(`type ${f.name} = () => any;`);\n\t\tlines.push(\"\");\n\t}\n\tlines.push(\"} // namespace functions\");\n\treturn lines.join(\"\\n\");\n}\nfunction formatObjectProperties(obj, indent) {\n\tconst lines = [];\n\tfor (const [name, param] of Object.entries(obj.properties ?? {})) {\n\t\tif (param.description && indent < 2) lines.push(`// ${param.description}`);\n\t\tif (obj.required?.includes(name)) lines.push(`${name}: ${formatType(param, indent)},`);\n\t\telse lines.push(`${name}?: ${formatType(param, indent)},`);\n\t}\n\treturn lines.map((line) => \" \".repeat(indent) + line).join(\"\\n\");\n}\nfunction formatType(param, indent) {\n\tif (isAnyOfProp(param)) return param.anyOf.map((v) => formatType(v, indent)).join(\" | \");\n\tswitch (param.type) {\n\t\tcase \"string\":\n\t\t\tif (param.enum) return param.enum.map((v) => `\"${v}\"`).join(\" | \");\n\t\t\treturn \"string\";\n\t\tcase \"number\":\n\t\t\tif (param.enum) return param.enum.map((v) => `${v}`).join(\" | \");\n\t\t\treturn \"number\";\n\t\tcase \"integer\":\n\t\t\tif (param.enum) return param.enum.map((v) => `${v}`).join(\" | \");\n\t\t\treturn \"number\";\n\t\tcase \"boolean\": return \"boolean\";\n\t\tcase \"null\": return \"null\";\n\t\tcase \"object\": return [\n\t\t\t\"{\",\n\t\t\tformatObjectProperties(param, indent + 2),\n\t\t\t\"}\"\n\t\t].join(\"\\n\");\n\t\tcase \"array\":\n\t\t\tif (param.items) return `${formatType(param.items, indent)}[]`;\n\t\t\treturn \"any[]\";\n\t\tdefault: return \"\";\n\t}\n}\nfunction formatToOpenAIToolChoice(toolChoice) {\n\tif (!toolChoice) return void 0;\n\telse if (toolChoice === \"any\" || toolChoice === \"required\") return \"required\";\n\telse if (toolChoice === \"auto\") return \"auto\";\n\telse if (toolChoice === \"none\") return \"none\";\n\telse if (typeof toolChoice === \"string\") return {\n\t\ttype: \"function\",\n\t\tfunction: { name: toolChoice }\n\t};\n\telse return toolChoice;\n}\nfunction isBuiltInTool(tool) {\n\treturn \"type\" in tool && tool.type !== \"function\";\n}\nfunction isBuiltInToolChoice(tool_choice) {\n\treturn tool_choice != null && typeof tool_choice === \"object\" && \"type\" in tool_choice && tool_choice.type !== \"function\";\n}\nfunction isCustomTool(tool) {\n\treturn typeof tool === \"object\" && tool !== null && \"metadata\" in tool && typeof tool.metadata === \"object\" && tool.metadata !== null && \"customTool\" in tool.metadata && typeof tool.metadata.customTool === \"object\" && tool.metadata.customTool !== null;\n}\nfunction isOpenAICustomTool(tool) {\n\treturn \"type\" in tool && tool.type === \"custom\" && \"custom\" in tool && typeof tool.custom === \"object\" && tool.custom !== null;\n}\nfunction parseCustomToolCall(rawToolCall) {\n\tif (rawToolCall.type !== \"custom_tool_call\") return void 0;\n\treturn {\n\t\t...rawToolCall,\n\t\ttype: \"tool_call\",\n\t\tcall_id: rawToolCall.id,\n\t\tid: rawToolCall.call_id,\n\t\tname: rawToolCall.name,\n\t\tisCustomTool: true,\n\t\targs: { input: rawToolCall.input }\n\t};\n}\nfunction isCustomToolCall(toolCall) {\n\treturn toolCall.type === \"tool_call\" && \"isCustomTool\" in toolCall && toolCall.isCustomTool === true;\n}\nfunction convertCompletionsCustomTool(tool) {\n\tconst getFormat = () => {\n\t\tif (!tool.custom.format) return void 0;\n\t\tif (tool.custom.format.type === \"grammar\") return {\n\t\t\ttype: \"grammar\",\n\t\t\tdefinition: tool.custom.format.grammar.definition,\n\t\t\tsyntax: tool.custom.format.grammar.syntax\n\t\t};\n\t\tif (tool.custom.format.type === \"text\") return { type: \"text\" };\n\t\treturn void 0;\n\t};\n\treturn {\n\t\ttype: \"custom\",\n\t\tname: tool.custom.name,\n\t\tdescription: tool.custom.description,\n\t\tformat: getFormat()\n\t};\n}\nfunction convertResponsesCustomTool(tool) {\n\tconst getFormat = () => {\n\t\tif (!tool.format) return void 0;\n\t\tif (tool.format.type === \"grammar\") return {\n\t\t\ttype: \"grammar\",\n\t\t\tgrammar: {\n\t\t\t\tdefinition: tool.format.definition,\n\t\t\t\tsyntax: tool.format.syntax\n\t\t\t}\n\t\t};\n\t\tif (tool.format.type === \"text\") return { type: \"text\" };\n\t\treturn void 0;\n\t};\n\treturn {\n\t\ttype: \"custom\",\n\t\tcustom: {\n\t\t\tname: tool.name,\n\t\t\tdescription: tool.description,\n\t\t\tformat: getFormat()\n\t\t}\n\t};\n}\n\n//#endregion\n\n//# sourceMappingURL=tools.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@langchain+openai@1.0.0_@langchain+core@1.0.1_openai@6.7.0_ws@8.18.3_zod@3.25.76___ws@8.18.3/node_modules/@langchain/openai/dist/utils/tools.js\n");

/***/ })

};
;