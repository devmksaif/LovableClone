"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/chromadb@3.0.17";
exports.ids = ["vendor-chunks/chromadb@3.0.17"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/chromadb@3.0.17/node_modules/chromadb/dist/chromadb.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/chromadb@3.0.17/node_modules/chromadb/dist/chromadb.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdminClient: () => (/* binding */ AdminClient),\n/* harmony export */   AdminCloudClient: () => (/* binding */ AdminCloudClient),\n/* harmony export */   ChromaClient: () => (/* binding */ ChromaClient),\n/* harmony export */   ChromaClientError: () => (/* binding */ ChromaClientError),\n/* harmony export */   ChromaConnectionError: () => (/* binding */ ChromaConnectionError),\n/* harmony export */   ChromaError: () => (/* binding */ ChromaError),\n/* harmony export */   ChromaForbiddenError: () => (/* binding */ ChromaForbiddenError),\n/* harmony export */   ChromaNotFoundError: () => (/* binding */ ChromaNotFoundError),\n/* harmony export */   ChromaQuotaExceededError: () => (/* binding */ ChromaQuotaExceededError),\n/* harmony export */   ChromaRateLimitError: () => (/* binding */ ChromaRateLimitError),\n/* harmony export */   ChromaServerError: () => (/* binding */ ChromaServerError),\n/* harmony export */   ChromaUnauthorizedError: () => (/* binding */ ChromaUnauthorizedError),\n/* harmony export */   ChromaUniqueError: () => (/* binding */ ChromaUniqueError),\n/* harmony export */   ChromaValueError: () => (/* binding */ ChromaValueError),\n/* harmony export */   CloudClient: () => (/* binding */ CloudClient),\n/* harmony export */   GetResult: () => (/* binding */ GetResult),\n/* harmony export */   IncludeEnum: () => (/* binding */ IncludeEnum),\n/* harmony export */   InvalidArgumentError: () => (/* binding */ InvalidArgumentError),\n/* harmony export */   InvalidCollectionError: () => (/* binding */ InvalidCollectionError),\n/* harmony export */   QueryResult: () => (/* binding */ QueryResult),\n/* harmony export */   baseRecordSetFields: () => (/* binding */ baseRecordSetFields),\n/* harmony export */   createErrorByType: () => (/* binding */ createErrorByType),\n/* harmony export */   getDefaultEFConfig: () => (/* binding */ getDefaultEFConfig),\n/* harmony export */   getEmbeddingFunction: () => (/* binding */ getEmbeddingFunction),\n/* harmony export */   knownEmbeddingFunctions: () => (/* binding */ knownEmbeddingFunctions),\n/* harmony export */   processCreateCollectionConfig: () => (/* binding */ processCreateCollectionConfig),\n/* harmony export */   processUpdateCollectionConfig: () => (/* binding */ processUpdateCollectionConfig),\n/* harmony export */   recordSetFields: () => (/* binding */ recordSetFields),\n/* harmony export */   registerEmbeddingFunction: () => (/* binding */ registerEmbeddingFunction),\n/* harmony export */   serializeEmbeddingFunction: () => (/* binding */ serializeEmbeddingFunction),\n/* harmony export */   withChroma: () => (/* binding */ withChroma)\n/* harmony export */ });\n/* harmony import */ var _chunk_NSSMTXJJ_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-NSSMTXJJ.mjs */ \"(rsc)/./node_modules/.pnpm/chromadb@3.0.17/node_modules/chromadb/dist/chunk-NSSMTXJJ.mjs\");\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:process */ \"node:process\");\n\n\n// src/deno.ts\nif (typeof globalThis.Deno !== \"undefined\") {\n  const OriginalRequest = globalThis.Request;\n  const PatchedRequest = function(input, init) {\n    if (init && typeof init === \"object\") {\n      const cleanInit = { ...init };\n      if (\"client\" in cleanInit) {\n        delete cleanInit.client;\n      }\n      return new OriginalRequest(input, cleanInit);\n    }\n    return new OriginalRequest(input, init);\n  };\n  Object.setPrototypeOf(PatchedRequest, OriginalRequest);\n  Object.defineProperty(PatchedRequest, \"prototype\", {\n    value: OriginalRequest.prototype,\n    writable: false\n  });\n  globalThis.Request = PatchedRequest;\n}\n\n// src/types.ts\nvar baseRecordSetFields = [\n  \"ids\",\n  \"embeddings\",\n  \"metadatas\",\n  \"documents\",\n  \"uris\"\n];\nvar recordSetFields = [...baseRecordSetFields, \"ids\"];\nvar IncludeEnum = /* @__PURE__ */ ((IncludeEnum2) => {\n  IncludeEnum2[\"distances\"] = \"distances\";\n  IncludeEnum2[\"documents\"] = \"documents\";\n  IncludeEnum2[\"embeddings\"] = \"embeddings\";\n  IncludeEnum2[\"metadatas\"] = \"metadatas\";\n  IncludeEnum2[\"uris\"] = \"uris\";\n  return IncludeEnum2;\n})(IncludeEnum || {});\nvar GetResult = class {\n  /**\n   * Creates a new GetResult instance.\n   * @param data - The result data containing all fields\n   */\n  constructor({\n    documents,\n    embeddings,\n    ids,\n    include,\n    metadatas,\n    uris\n  }) {\n    this.documents = documents;\n    this.embeddings = embeddings;\n    this.ids = ids;\n    this.include = include;\n    this.metadatas = metadatas;\n    this.uris = uris;\n  }\n  /**\n   * Converts the result to a row-based format for easier iteration.\n   * @returns Object containing include fields and array of record objects\n   */\n  rows() {\n    return this.ids.map((id, index) => {\n      return {\n        id,\n        document: this.include.includes(\"documents\") ? this.documents[index] : void 0,\n        embedding: this.include.includes(\"embeddings\") ? this.embeddings[index] : void 0,\n        metadata: this.include.includes(\"metadatas\") ? this.metadatas[index] : void 0,\n        uri: this.include.includes(\"uris\") ? this.uris[index] : void 0\n      };\n    });\n  }\n};\nvar QueryResult = class {\n  /**\n   * Creates a new QueryResult instance.\n   * @param data - The query result data containing all fields\n   */\n  constructor({\n    distances,\n    documents,\n    embeddings,\n    ids,\n    include,\n    metadatas,\n    uris\n  }) {\n    this.distances = distances;\n    this.documents = documents;\n    this.embeddings = embeddings;\n    this.ids = ids;\n    this.include = include;\n    this.metadatas = metadatas;\n    this.uris = uris;\n  }\n  /**\n   * Converts the query result to a row-based format for easier iteration.\n   * @returns Object containing include fields and structured query results\n   */\n  rows() {\n    const queries = [];\n    for (let q2 = 0; q2 < this.ids.length; q2++) {\n      const records = this.ids[q2].map((id, index) => {\n        return {\n          id,\n          document: this.include.includes(\"documents\") ? this.documents[q2][index] : void 0,\n          embedding: this.include.includes(\"embeddings\") ? this.embeddings[q2][index] : void 0,\n          metadata: this.include.includes(\"metadatas\") ? this.metadatas[q2][index] : void 0,\n          uri: this.include.includes(\"uris\") ? this.uris[q2][index] : void 0,\n          distance: this.include.includes(\"distances\") ? this.distances[q2][index] : void 0\n        };\n      });\n      queries.push(records);\n    }\n    return queries;\n  }\n};\n\n// ../../node_modules/.pnpm/@hey-api+client-fetch@0.10.0_@hey-api+openapi-ts@0.67.3_typescript@5.8.3_/node_modules/@hey-api/client-fetch/dist/index.js\nvar A = async (t, r) => {\n  let e = typeof r == \"function\" ? await r(t) : r;\n  if (e) return t.scheme === \"bearer\" ? `Bearer ${e}` : t.scheme === \"basic\" ? `Basic ${btoa(e)}` : e;\n};\nvar R = { bodySerializer: (t) => JSON.stringify(t, (r, e) => typeof e == \"bigint\" ? e.toString() : e) };\nvar U = (t) => {\n  switch (t) {\n    case \"label\":\n      return \".\";\n    case \"matrix\":\n      return \";\";\n    case \"simple\":\n      return \",\";\n    default:\n      return \"&\";\n  }\n};\nvar _ = (t) => {\n  switch (t) {\n    case \"form\":\n      return \",\";\n    case \"pipeDelimited\":\n      return \"|\";\n    case \"spaceDelimited\":\n      return \"%20\";\n    default:\n      return \",\";\n  }\n};\nvar D = (t) => {\n  switch (t) {\n    case \"label\":\n      return \".\";\n    case \"matrix\":\n      return \";\";\n    case \"simple\":\n      return \",\";\n    default:\n      return \"&\";\n  }\n};\nvar O = ({ allowReserved: t, explode: r, name: e, style: a, value: i }) => {\n  if (!r) {\n    let s = (t ? i : i.map((l) => encodeURIComponent(l))).join(_(a));\n    switch (a) {\n      case \"label\":\n        return `.${s}`;\n      case \"matrix\":\n        return `;${e}=${s}`;\n      case \"simple\":\n        return s;\n      default:\n        return `${e}=${s}`;\n    }\n  }\n  let o = U(a), n = i.map((s) => a === \"label\" || a === \"simple\" ? t ? s : encodeURIComponent(s) : y({ allowReserved: t, name: e, value: s })).join(o);\n  return a === \"label\" || a === \"matrix\" ? o + n : n;\n};\nvar y = ({ allowReserved: t, name: r, value: e }) => {\n  if (e == null) return \"\";\n  if (typeof e == \"object\") throw new Error(\"Deeply-nested arrays/objects aren\\u2019t supported. Provide your own `querySerializer()` to handle these.\");\n  return `${r}=${t ? e : encodeURIComponent(e)}`;\n};\nvar q = ({ allowReserved: t, explode: r, name: e, style: a, value: i }) => {\n  if (i instanceof Date) return `${e}=${i.toISOString()}`;\n  if (a !== \"deepObject\" && !r) {\n    let s = [];\n    Object.entries(i).forEach(([f, u]) => {\n      s = [...s, f, t ? u : encodeURIComponent(u)];\n    });\n    let l = s.join(\",\");\n    switch (a) {\n      case \"form\":\n        return `${e}=${l}`;\n      case \"label\":\n        return `.${l}`;\n      case \"matrix\":\n        return `;${e}=${l}`;\n      default:\n        return l;\n    }\n  }\n  let o = D(a), n = Object.entries(i).map(([s, l]) => y({ allowReserved: t, name: a === \"deepObject\" ? `${e}[${s}]` : s, value: l })).join(o);\n  return a === \"label\" || a === \"matrix\" ? o + n : n;\n};\nvar H = /\\{[^{}]+\\}/g;\nvar B = ({ path: t, url: r }) => {\n  let e = r, a = r.match(H);\n  if (a) for (let i of a) {\n    let o = false, n = i.substring(1, i.length - 1), s = \"simple\";\n    n.endsWith(\"*\") && (o = true, n = n.substring(0, n.length - 1)), n.startsWith(\".\") ? (n = n.substring(1), s = \"label\") : n.startsWith(\";\") && (n = n.substring(1), s = \"matrix\");\n    let l = t[n];\n    if (l == null) continue;\n    if (Array.isArray(l)) {\n      e = e.replace(i, O({ explode: o, name: n, style: s, value: l }));\n      continue;\n    }\n    if (typeof l == \"object\") {\n      e = e.replace(i, q({ explode: o, name: n, style: s, value: l }));\n      continue;\n    }\n    if (s === \"matrix\") {\n      e = e.replace(i, `;${y({ name: n, value: l })}`);\n      continue;\n    }\n    let f = encodeURIComponent(s === \"label\" ? `.${l}` : l);\n    e = e.replace(i, f);\n  }\n  return e;\n};\nvar E = ({ allowReserved: t, array: r, object: e } = {}) => (i) => {\n  let o = [];\n  if (i && typeof i == \"object\") for (let n in i) {\n    let s = i[n];\n    if (s != null) {\n      if (Array.isArray(s)) {\n        o = [...o, O({ allowReserved: t, explode: true, name: n, style: \"form\", value: s, ...r })];\n        continue;\n      }\n      if (typeof s == \"object\") {\n        o = [...o, q({ allowReserved: t, explode: true, name: n, style: \"deepObject\", value: s, ...e })];\n        continue;\n      }\n      o = [...o, y({ allowReserved: t, name: n, value: s })];\n    }\n  }\n  return o.join(\"&\");\n};\nvar P = (t) => {\n  if (!t) return \"stream\";\n  let r = t.split(\";\")[0]?.trim();\n  if (r) {\n    if (r.startsWith(\"application/json\") || r.endsWith(\"+json\")) return \"json\";\n    if (r === \"multipart/form-data\") return \"formData\";\n    if ([\"application/\", \"audio/\", \"image/\", \"video/\"].some((e) => r.startsWith(e))) return \"blob\";\n    if (r.startsWith(\"text/\")) return \"text\";\n  }\n};\nvar I = async ({ security: t, ...r }) => {\n  for (let e of t) {\n    let a = await A(e, r.auth);\n    if (!a) continue;\n    let i = e.name ?? \"Authorization\";\n    switch (e.in) {\n      case \"query\":\n        r.query || (r.query = {}), r.query[i] = a;\n        break;\n      case \"cookie\":\n        r.headers.append(\"Cookie\", `${i}=${a}`);\n        break;\n      case \"header\":\n      default:\n        r.headers.set(i, a);\n        break;\n    }\n    return;\n  }\n};\nvar S = (t) => W({ baseUrl: t.baseUrl, path: t.path, query: t.query, querySerializer: typeof t.querySerializer == \"function\" ? t.querySerializer : E(t.querySerializer), url: t.url });\nvar W = ({ baseUrl: t, path: r, query: e, querySerializer: a, url: i }) => {\n  let o = i.startsWith(\"/\") ? i : `/${i}`, n = (t ?? \"\") + o;\n  r && (n = B({ path: r, url: n }));\n  let s = e ? a(e) : \"\";\n  return s.startsWith(\"?\") && (s = s.substring(1)), s && (n += `?${s}`), n;\n};\nvar C = (t, r) => {\n  let e = { ...t, ...r };\n  return e.baseUrl?.endsWith(\"/\") && (e.baseUrl = e.baseUrl.substring(0, e.baseUrl.length - 1)), e.headers = x(t.headers, r.headers), e;\n};\nvar x = (...t) => {\n  let r = new Headers();\n  for (let e of t) {\n    if (!e || typeof e != \"object\") continue;\n    let a = e instanceof Headers ? e.entries() : Object.entries(e);\n    for (let [i, o] of a) if (o === null) r.delete(i);\n    else if (Array.isArray(o)) for (let n of o) r.append(i, n);\n    else o !== void 0 && r.set(i, typeof o == \"object\" ? JSON.stringify(o) : o);\n  }\n  return r;\n};\nvar h = class {\n  constructor() {\n    (0,_chunk_NSSMTXJJ_mjs__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"_fns\");\n    this._fns = [];\n  }\n  clear() {\n    this._fns = [];\n  }\n  exists(r) {\n    return this._fns.indexOf(r) !== -1;\n  }\n  eject(r) {\n    let e = this._fns.indexOf(r);\n    e !== -1 && (this._fns = [...this._fns.slice(0, e), ...this._fns.slice(e + 1)]);\n  }\n  use(r) {\n    this._fns = [...this._fns, r];\n  }\n};\nvar T = () => ({ error: new h(), request: new h(), response: new h() });\nvar N = E({ allowReserved: false, array: { explode: true, style: \"form\" }, object: { explode: true, style: \"deepObject\" } });\nvar Q = { \"Content-Type\": \"application/json\" };\nvar w = (t = {}) => ({ ...R, headers: Q, parseAs: \"auto\", querySerializer: N, ...t });\nvar J = (t = {}) => {\n  let r = C(w(), t), e = () => ({ ...r }), a = (n) => (r = C(r, n), e()), i = T(), o = async (n) => {\n    let s = { ...r, ...n, fetch: n.fetch ?? r.fetch ?? globalThis.fetch, headers: x(r.headers, n.headers) };\n    s.security && await I({ ...s, security: s.security }), s.body && s.bodySerializer && (s.body = s.bodySerializer(s.body)), (s.body === void 0 || s.body === \"\") && s.headers.delete(\"Content-Type\");\n    let l = S(s), f = { redirect: \"follow\", ...s }, u = new Request(l, f);\n    for (let p of i.request._fns) u = await p(u, s);\n    let k = s.fetch, c = await k(u);\n    for (let p of i.response._fns) c = await p(c, u, s);\n    let m = { request: u, response: c };\n    if (c.ok) {\n      if (c.status === 204 || c.headers.get(\"Content-Length\") === \"0\") return { data: {}, ...m };\n      let p = (s.parseAs === \"auto\" ? P(c.headers.get(\"Content-Type\")) : s.parseAs) ?? \"json\";\n      if (p === \"stream\") return { data: c.body, ...m };\n      let b = await c[p]();\n      return p === \"json\" && (s.responseValidator && await s.responseValidator(b), s.responseTransformer && (b = await s.responseTransformer(b))), { data: b, ...m };\n    }\n    let g = await c.text();\n    try {\n      g = JSON.parse(g);\n    } catch {\n    }\n    let d = g;\n    for (let p of i.error._fns) d = await p(g, c, u, s);\n    if (d = d || {}, s.throwOnError) throw d;\n    return { error: d, ...m };\n  };\n  return { buildUrl: S, connect: (n) => o({ ...n, method: \"CONNECT\" }), delete: (n) => o({ ...n, method: \"DELETE\" }), get: (n) => o({ ...n, method: \"GET\" }), getConfig: e, head: (n) => o({ ...n, method: \"HEAD\" }), interceptors: i, options: (n) => o({ ...n, method: \"OPTIONS\" }), patch: (n) => o({ ...n, method: \"PATCH\" }), post: (n) => o({ ...n, method: \"POST\" }), put: (n) => o({ ...n, method: \"PUT\" }), request: o, setConfig: a, trace: (n) => o({ ...n, method: \"TRACE\" }) };\n};\n\n// src/api/client.gen.ts\nvar client = J(w({\n  baseUrl: \"http://localhost:8000\",\n  throwOnError: true\n}));\n\n// src/api/sdk.gen.ts\nvar DefaultService = class {\n  /**\n   * Retrieves the current user's identity, tenant, and databases.\n   */\n  static getUserIdentity(options) {\n    return (options?.client ?? client).get({\n      url: \"/api/v2/auth/identity\",\n      ...options\n    });\n  }\n  /**\n   * Retrieves a collection by Chroma Resource Name.\n   */\n  static getCollectionByCrn(options) {\n    return (options.client ?? client).get({\n      url: \"/api/v2/collections/{crn}\",\n      ...options\n    });\n  }\n  /**\n   * Health check endpoint that returns 200 if the server and executor are ready\n   */\n  static healthcheck(options) {\n    return (options?.client ?? client).get({\n      url: \"/api/v2/healthcheck\",\n      ...options\n    });\n  }\n  /**\n   * Heartbeat endpoint that returns a nanosecond timestamp of the current time.\n   */\n  static heartbeat(options) {\n    return (options?.client ?? client).get({\n      url: \"/api/v2/heartbeat\",\n      ...options\n    });\n  }\n  /**\n   * Pre-flight checks endpoint reporting basic readiness info.\n   */\n  static preFlightChecks(options) {\n    return (options?.client ?? client).get({\n      url: \"/api/v2/pre-flight-checks\",\n      ...options\n    });\n  }\n  /**\n   * Reset endpoint allowing authorized users to reset the database.\n   */\n  static reset(options) {\n    return (options?.client ?? client).post({\n      url: \"/api/v2/reset\",\n      ...options\n    });\n  }\n  /**\n   * Creates a new tenant.\n   */\n  static createTenant(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Returns an existing tenant by name.\n   */\n  static getTenant(options) {\n    return (options.client ?? client).get({\n      url: \"/api/v2/tenants/{tenant_name}\",\n      ...options\n    });\n  }\n  /**\n   * Updates an existing tenant by name.\n   */\n  static updateTenant(options) {\n    return (options.client ?? client).patch({\n      url: \"/api/v2/tenants/{tenant_name}\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Lists all databases for a given tenant.\n   */\n  static listDatabases(options) {\n    return (options.client ?? client).get({\n      url: \"/api/v2/tenants/{tenant}/databases\",\n      ...options\n    });\n  }\n  /**\n   * Creates a new database for a given tenant.\n   */\n  static createDatabase(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Deletes a specific database.\n   */\n  static deleteDatabase(options) {\n    return (options.client ?? client).delete({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}\",\n      ...options\n    });\n  }\n  /**\n   * Retrieves a specific database by name.\n   */\n  static getDatabase(options) {\n    return (options.client ?? client).get({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}\",\n      ...options\n    });\n  }\n  /**\n   * Lists all collections in the specified database.\n   */\n  static listCollections(options) {\n    return (options.client ?? client).get({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections\",\n      ...options\n    });\n  }\n  /**\n   * Creates a new collection under the specified database.\n   */\n  static createCollection(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Deletes a collection in a given database.\n   */\n  static deleteCollection(options) {\n    return (options.client ?? client).delete({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}\",\n      ...options\n    });\n  }\n  /**\n   * Retrieves a collection by ID or name.\n   */\n  static getCollection(options) {\n    return (options.client ?? client).get({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}\",\n      ...options\n    });\n  }\n  /**\n   * Updates an existing collection's name or metadata.\n   */\n  static updateCollection(options) {\n    return (options.client ?? client).put({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Adds records to a collection.\n   */\n  static collectionAdd(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/add\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves the number of records in a collection.\n   */\n  static collectionCount(options) {\n    return (options.client ?? client).get({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/count\",\n      ...options\n    });\n  }\n  /**\n   * Deletes records in a collection. Can filter by IDs or metadata.\n   */\n  static collectionDelete(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/delete\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Forks an existing collection.\n   */\n  static forkCollection(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/fork\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves records from a collection by ID or metadata filter.\n   */\n  static collectionGet(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/get\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Query a collection in a variety of ways, including vector search, metadata filtering, and full-text search\n   */\n  static collectionQuery(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/query\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Search records from a collection with hybrid criterias.\n   */\n  static collectionSearch(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/search\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Updates records in a collection by ID.\n   */\n  static collectionUpdate(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/update\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Upserts records in a collection (create if not exists, otherwise update).\n   */\n  static collectionUpsert(options) {\n    return (options.client ?? client).post({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/upsert\",\n      ...options,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...options?.headers\n      }\n    });\n  }\n  /**\n   * Retrieves the total number of collections in a given database.\n   */\n  static countCollections(options) {\n    return (options.client ?? client).get({\n      url: \"/api/v2/tenants/{tenant}/databases/{database}/collections_count\",\n      ...options\n    });\n  }\n  /**\n   * Returns the version of the server.\n   */\n  static version(options) {\n    return (options?.client ?? client).get({\n      url: \"/api/v2/version\",\n      ...options\n    });\n  }\n};\n\n// src/errors.ts\nvar ChromaError = class extends Error {\n  constructor(name, message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = name;\n  }\n};\nvar ChromaConnectionError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaConnectionError\";\n  }\n};\nvar ChromaServerError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaServerError\";\n  }\n};\nvar ChromaClientError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaClientError\";\n  }\n};\nvar ChromaUnauthorizedError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaAuthError\";\n  }\n};\nvar ChromaForbiddenError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaForbiddenError\";\n  }\n};\nvar ChromaNotFoundError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaNotFoundError\";\n  }\n};\nvar ChromaValueError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaValueError\";\n  }\n};\nvar InvalidCollectionError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"InvalidCollectionError\";\n  }\n};\nvar InvalidArgumentError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"InvalidArgumentError\";\n  }\n};\nvar ChromaUniqueError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaUniqueError\";\n  }\n};\nvar ChromaQuotaExceededError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaQuotaExceededError\";\n  }\n};\nvar ChromaRateLimitError = class extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    this.name = \"ChromaRateLimitError\";\n  }\n};\nfunction createErrorByType(type, message) {\n  switch (type) {\n    case \"InvalidCollection\":\n      return new InvalidCollectionError(message);\n    case \"InvalidArgumentError\":\n      return new InvalidArgumentError(message);\n    default:\n      return void 0;\n  }\n}\n\n// src/utils.ts\nvar DEFAULT_TENANT = \"default_tenant\";\nvar DEFAULT_DATABASE = \"default_database\";\nvar defaultAdminClientArgs = {\n  host: \"localhost\",\n  port: 8e3,\n  ssl: false\n};\nvar defaultChromaClientArgs = {\n  ...defaultAdminClientArgs,\n  tenant: DEFAULT_TENANT,\n  database: DEFAULT_DATABASE\n};\nvar normalizeMethod = (method) => {\n  if (method) {\n    switch (method.toUpperCase()) {\n      case \"GET\":\n        return \"GET\";\n      case \"POST\":\n        return \"POST\";\n      case \"PUT\":\n        return \"PUT\";\n      case \"DELETE\":\n        return \"DELETE\";\n      case \"HEAD\":\n        return \"HEAD\";\n      case \"CONNECT\":\n        return \"CONNECT\";\n      case \"OPTIONS\":\n        return \"OPTIONS\";\n      case \"PATCH\":\n        return \"PATCH\";\n      case \"TRACE\":\n        return \"TRACE\";\n      default:\n        return void 0;\n    }\n  }\n  return void 0;\n};\nvar validateRecordSetLengthConsistency = (recordSet) => {\n  const lengths = Object.entries(recordSet).filter(\n    ([field, value]) => recordSetFields.includes(field) && value !== void 0\n  ).map(([field, value]) => [field, value.length]);\n  if (lengths.length === 0) {\n    throw new ChromaValueError(\n      `At least one of ${recordSetFields.join(\", \")} must be provided`\n    );\n  }\n  const zeroLength = lengths.filter(([_2, length]) => length === 0).map(([field, _2]) => field);\n  if (zeroLength.length > 0) {\n    throw new ChromaValueError(\n      `Non-empty lists are required for ${zeroLength.join(\", \")}`\n    );\n  }\n  if (new Set(lengths.map(([_2, length]) => length)).size > 1) {\n    throw new ChromaValueError(\n      `Unequal lengths for fields ${lengths.map(([field, _2]) => field).join(\", \")}`\n    );\n  }\n};\nvar validateEmbeddings = ({\n  embeddings,\n  fieldName = \"embeddings\"\n}) => {\n  if (!Array.isArray(embeddings)) {\n    throw new ChromaValueError(\n      `Expected '${fieldName}' to be an array, but got ${typeof embeddings}`\n    );\n  }\n  if (embeddings.length === 0) {\n    throw new ChromaValueError(\n      \"Expected embeddings to be an array with at least one item\"\n    );\n  }\n  if (!embeddings.filter((e) => e.every((n) => typeof n === \"number\"))) {\n    throw new ChromaValueError(\n      \"Expected each embedding to be an array of numbers\"\n    );\n  }\n  embeddings.forEach((embedding, i) => {\n    if (embedding.length === 0) {\n      throw new ChromaValueError(\n        `Expected each embedding to be a non-empty array of numbers, but got an empty array at index ${i}`\n      );\n    }\n  });\n};\nvar validateDocuments = ({\n  documents,\n  nullable = false,\n  fieldName = \"documents\"\n}) => {\n  if (!Array.isArray(documents)) {\n    throw new ChromaValueError(\n      `Expected '${fieldName}' to be an array, but got ${typeof documents}`\n    );\n  }\n  if (documents.length === 0) {\n    throw new ChromaValueError(\n      `Expected '${fieldName}' to be a non-empty list`\n    );\n  }\n  documents.forEach((document) => {\n    if (!nullable && typeof document !== \"string\" && !document) {\n      throw new ChromaValueError(\n        `Expected each document to be a string, but got ${typeof document}`\n      );\n    }\n  });\n};\nvar validateIDs = (ids) => {\n  if (!Array.isArray(ids)) {\n    throw new ChromaValueError(\n      `Expected 'ids' to be an array, but got ${typeof ids}`\n    );\n  }\n  if (ids.length === 0) {\n    throw new ChromaValueError(\"Expected 'ids' to be a non-empty list\");\n  }\n  const nonStrings = ids.map((id, i) => [id, i]).filter(([id, _2]) => typeof id !== \"string\").map(([_2, i]) => i);\n  if (nonStrings.length > 0) {\n    throw new ChromaValueError(\n      `Found non-string IDs at ${nonStrings.join(\", \")}`\n    );\n  }\n  const seen = /* @__PURE__ */ new Set();\n  const duplicates = ids.filter((id) => {\n    if (seen.has(id)) {\n      return id;\n    }\n    seen.add(id);\n  });\n  let message = \"Expected IDs to be unique, but found duplicates of\";\n  if (duplicates.length > 0 && duplicates.length <= 5) {\n    throw new ChromaValueError(`${message} ${duplicates.join(\", \")}`);\n  }\n  if (duplicates.length > 0) {\n    throw new ChromaValueError(\n      `${message} ${duplicates.slice(0, 5).join(\", \")}, ..., ${duplicates.slice(duplicates.length - 5).join(\", \")}`\n    );\n  }\n};\nvar validateSparseVector = (v) => {\n  return typeof v === \"object\" && v !== null && \"indices\" in v && \"values\" in v && Array.isArray(v.indices) && v.indices.every((e) => typeof e === \"number\") && Array.isArray(v.values) && v.values.every((e) => typeof e === \"number\");\n};\nvar validateMetadata = (metadata) => {\n  if (!metadata) {\n    return;\n  }\n  if (Object.keys(metadata).length === 0) {\n    throw new ChromaValueError(\"Expected metadata to be non-empty\");\n  }\n  if (!Object.values(metadata).every(\n    (v) => v === null || v === void 0 || typeof v === \"string\" || typeof v === \"number\" || typeof v === \"boolean\" || validateSparseVector(v)\n  )) {\n    throw new ChromaValueError(\n      \"Expected metadata to be a string, number, boolean, SparseVector, or nullable\"\n    );\n  }\n};\nvar validateMetadatas = (metadatas) => {\n  if (!Array.isArray(metadatas)) {\n    throw new ChromaValueError(\n      `Expected metadatas to be an array, but got ${typeof metadatas}`\n    );\n  }\n  metadatas.forEach((metadata) => validateMetadata(metadata));\n};\nvar validateBaseRecordSet = ({\n  recordSet,\n  update = false,\n  embeddingsField = \"embeddings\",\n  documentsField = \"documents\"\n}) => {\n  if (!recordSet.embeddings && !recordSet.documents && !update) {\n    throw new ChromaValueError(\n      `At least one of '${embeddingsField}' and '${documentsField}' must be provided`\n    );\n  }\n  if (recordSet.embeddings) {\n    validateEmbeddings({\n      embeddings: recordSet.embeddings,\n      fieldName: embeddingsField\n    });\n  }\n  if (recordSet.documents) {\n    validateDocuments({\n      documents: recordSet.documents,\n      fieldName: documentsField\n    });\n  }\n  if (recordSet.metadatas) {\n    validateMetadatas(recordSet.metadatas);\n  }\n};\nvar validateMaxBatchSize = (recordSetLength, maxBatchSize) => {\n  if (recordSetLength > maxBatchSize) {\n    throw new ChromaValueError(\n      `Record set length ${recordSetLength} exceeds max batch size ${maxBatchSize}`\n    );\n  }\n};\nvar validateWhere = (where) => {\n  if (typeof where !== \"object\") {\n    throw new ChromaValueError(\"Expected where to be a non-empty object\");\n  }\n  if (Object.keys(where).length != 1) {\n    throw new ChromaValueError(\n      `Expected 'where' to have exactly one operator, but got ${Object.keys(where).length}`\n    );\n  }\n  Object.entries(where).forEach(([key, value]) => {\n    if (key !== \"$and\" && key !== \"$or\" && key !== \"$in\" && key !== \"$nin\" && ![\"string\", \"number\", \"boolean\", \"object\"].includes(typeof value)) {\n      throw new ChromaValueError(\n        `Expected 'where' value to be a string, number, boolean, or an operator expression, but got ${value}`\n      );\n    }\n    if (key === \"$and\" || key === \"$or\") {\n      if (Object.keys(value).length <= 1) {\n        throw new ChromaValueError(\n          `Expected 'where' value for $and or $or to be a list of 'where' expressions, but got ${value}`\n        );\n      }\n      value.forEach((w2) => validateWhere(w2));\n      return;\n    }\n    if (typeof value === \"object\") {\n      if (Object.keys(value).length != 1) {\n        throw new ChromaValueError(\n          `Expected operator expression to have one operator, but got ${value}`\n        );\n      }\n      const [operator, operand] = Object.entries(value)[0];\n      if ([\"$gt\", \"$gte\", \"$lt\", \"$lte\"].includes(operator) && typeof operand !== \"number\") {\n        throw new ChromaValueError(\n          `Expected operand value to be a number for ${operator}, but got ${typeof operand}`\n        );\n      }\n      if ([\"$in\", \"$nin\"].includes(operator) && !Array.isArray(operand)) {\n        throw new ChromaValueError(\n          `Expected operand value to be an array for ${operator}, but got ${operand}`\n        );\n      }\n      if (![\"$gt\", \"$gte\", \"$lt\", \"$lte\", \"$ne\", \"$eq\", \"$in\", \"$nin\"].includes(\n        operator\n      )) {\n        throw new ChromaValueError(\n          `Expected operator to be one of $gt, $gte, $lt, $lte, $ne, $eq, $in, $nin, but got ${operator}`\n        );\n      }\n      if (![\"string\", \"number\", \"boolean\"].includes(typeof operand) && !Array.isArray(operand)) {\n        throw new ChromaValueError(\n          \"Expected operand value to be a string, number, boolean, or a list of those types\"\n        );\n      }\n      if (Array.isArray(operand) && (operand.length === 0 || !operand.every((item) => typeof item === typeof operand[0]))) {\n        throw new ChromaValueError(\n          \"Expected 'where' operand value to be a non-empty list and all values to be of the same type\"\n        );\n      }\n    }\n  });\n};\nvar validateWhereDocument = (whereDocument) => {\n  if (typeof whereDocument !== \"object\") {\n    throw new ChromaValueError(\n      \"Expected 'whereDocument' to be a non-empty object\"\n    );\n  }\n  if (Object.keys(whereDocument).length != 1) {\n    throw new ChromaValueError(\n      `Expected 'whereDocument' to have exactly one operator, but got ${whereDocument}`\n    );\n  }\n  const [operator, operand] = Object.entries(whereDocument)[0];\n  if (![\n    \"$contains\",\n    \"$not_contains\",\n    \"$matches\",\n    \"$not_matches\",\n    \"$regex\",\n    \"$not_regex\",\n    \"$and\",\n    \"$or\"\n  ].includes(operator)) {\n    throw new ChromaValueError(\n      `Expected 'whereDocument' operator to be one of $contains, $not_contains, $matches, $not_matches, $regex, $not_regex, $and, or $or, but got ${operator}`\n    );\n  }\n  if (operator === \"$and\" || operator === \"$or\") {\n    if (!Array.isArray(operand)) {\n      throw new ChromaValueError(\n        `Expected operand for ${operator} to be a list of 'whereDocument' expressions, but got ${operand}`\n      );\n    }\n    if (operand.length <= 1) {\n      throw new ChromaValueError(\n        `Expected 'whereDocument' operand for ${operator} to be a list with at least two 'whereDocument' expressions`\n      );\n    }\n    operand.forEach((item) => validateWhereDocument(item));\n  }\n  if ((operand === \"$contains\" || operand === \"$not_contains\" || operand === \"$regex\" || operand === \"$not_regex\") && (typeof operator !== \"string\" || operator.length === 0)) {\n    throw new ChromaValueError(\n      `Expected operand for ${operator} to be a non empty string, but got ${operand}`\n    );\n  }\n};\nvar validateInclude = ({\n  include,\n  exclude\n}) => {\n  if (!Array.isArray(include)) {\n    throw new ChromaValueError(\"Expected 'include' to be a non-empty array\");\n  }\n  const validValues = Object.keys(IncludeEnum);\n  include.forEach((item) => {\n    if (typeof item !== \"string\") {\n      throw new ChromaValueError(\"Expected 'include' items to be strings\");\n    }\n    if (!validValues.includes(item)) {\n      throw new ChromaValueError(\n        `Expected 'include' items to be one of ${validValues.join(\n          \", \"\n        )}, but got ${item}`\n      );\n    }\n    if (exclude?.includes(item)) {\n      throw new ChromaValueError(`${item} is not allowed for this operation`);\n    }\n  });\n};\nvar validateNResults = (nResults) => {\n  if (typeof nResults !== \"number\") {\n    throw new ChromaValueError(\n      `Expected 'nResults' to be a number, but got ${typeof nResults}`\n    );\n  }\n  if (nResults <= 0) {\n    throw new ChromaValueError(\"Number of requested results has to positive\");\n  }\n};\nvar parseConnectionPath = (path) => {\n  try {\n    const url = new URL(path);\n    const ssl = url.protocol === \"https:\";\n    const host = url.hostname;\n    const port = url.port;\n    return {\n      ssl,\n      host,\n      port: Number(port)\n    };\n  } catch {\n    throw new ChromaValueError(`Invalid URL: ${path}`);\n  }\n};\nvar packEmbedding = (embedding) => {\n  const buffer = new ArrayBuffer(embedding.length * 4);\n  const view = new Float32Array(buffer);\n  for (let i = 0; i < embedding.length; i++) {\n    view[i] = embedding[i];\n  }\n  return buffer;\n};\nvar embeddingsToBase64Bytes = (embeddings) => {\n  return embeddings.map((embedding) => {\n    const buffer = packEmbedding(embedding);\n    const uint8Array = new Uint8Array(buffer);\n    const binaryString = Array.from(\n      uint8Array,\n      (byte) => String.fromCharCode(byte)\n    ).join(\"\");\n    return btoa(binaryString);\n  });\n};\n\n// src/embedding-function.ts\nvar knownEmbeddingFunctions = /* @__PURE__ */ new Map();\nvar registerEmbeddingFunction = (name, fn) => {\n  if (knownEmbeddingFunctions.has(name)) {\n    throw new ChromaValueError(\n      `Embedding function with name ${name} is already registered.`\n    );\n  }\n  knownEmbeddingFunctions.set(name, fn);\n};\nvar getEmbeddingFunction = async (collectionName, efConfig) => {\n  if (!efConfig) {\n    console.warn(\n      `No embedding function configuration found for collection ${collectionName}. 'add' and 'query' will fail unless you provide them embeddings directly.`\n    );\n    return void 0;\n  }\n  if (efConfig.type === \"legacy\") {\n    console.warn(\n      `No embedding function configuration found for collection ${collectionName}. 'add' and 'query' will fail unless you provide them embeddings directly.`\n    );\n    return void 0;\n  }\n  const name = efConfig.name;\n  const embeddingFunction = knownEmbeddingFunctions.get(name);\n  if (!embeddingFunction) {\n    console.warn(\n      `Collection ${collectionName} was created with the ${embeddingFunction} embedding function. However, the @chroma-core/${embeddingFunction} package is not install. 'add' and 'query' will fail unless you provide them embeddings directly, or install the @chroma-core/${embeddingFunction} package.`\n    );\n    return void 0;\n  }\n  let constructorConfig = efConfig.type === \"known\" ? efConfig.config : {};\n  try {\n    if (embeddingFunction.buildFromConfig) {\n      return embeddingFunction.buildFromConfig(constructorConfig);\n    }\n    console.warn(\n      `Embedding function ${name} does not define a 'buildFromConfig' function. 'add' and 'query' will fail unless you provide them embeddings directly.`\n    );\n    return void 0;\n  } catch (e) {\n    console.warn(\n      `Embedding function ${name} failed to build with config: ${constructorConfig}. 'add' and 'query' will fail unless you provide them embeddings directly. Error: ${e}`\n    );\n    return void 0;\n  }\n};\nvar serializeEmbeddingFunction = ({\n  embeddingFunction,\n  configEmbeddingFunction\n}) => {\n  if (embeddingFunction && configEmbeddingFunction) {\n    throw new ChromaValueError(\n      \"Embedding function provided when already defined in the collection configuration\"\n    );\n  }\n  if (!embeddingFunction && !configEmbeddingFunction) {\n    return void 0;\n  }\n  const ef = embeddingFunction || configEmbeddingFunction;\n  if (!ef.getConfig || !ef.name || !ef.constructor.buildFromConfig) {\n    return { type: \"legacy\" };\n  }\n  if (ef.validateConfig) ef.validateConfig(ef.getConfig());\n  return {\n    name: ef.name,\n    type: \"known\",\n    config: ef.getConfig()\n  };\n};\nvar getDefaultEFConfig = async () => {\n  try {\n    const { DefaultEmbeddingFunction } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/ajv@8.17.1\"), __webpack_require__.e(\"vendor-chunks/onnxruntime-common@1.21.0\"), __webpack_require__.e(\"vendor-chunks/sharp@0.34.4\"), __webpack_require__.e(\"vendor-chunks/detect-libc@2.1.2\"), __webpack_require__.e(\"vendor-chunks/fast-uri@3.1.0\"), __webpack_require__.e(\"vendor-chunks/@img+sharp-libvips-darwin-arm64@1.2.3\"), __webpack_require__.e(\"vendor-chunks/@img+colour@1.0.0\"), __webpack_require__.e(\"vendor-chunks/@huggingface+transformers@3.7.6\"), __webpack_require__.e(\"vendor-chunks/@chroma-core+default-embed@0.1.8\"), __webpack_require__.e(\"vendor-chunks/@chroma-core+ai-embeddings-common@0.1.7\"), __webpack_require__.e(\"vendor-chunks/json-schema-traverse@1.0.0\"), __webpack_require__.e(\"vendor-chunks/fast-deep-equal@3.1.3\"), __webpack_require__.e(\"_rsc_node_modules_pnpm_sharp_0_34_4_node_modules_img_node_modules_pnpm_node_modules_img_node_-431891\")]).then(__webpack_require__.bind(__webpack_require__, /*! @chroma-core/default-embed */ \"(rsc)/./node_modules/.pnpm/@chroma-core+default-embed@0.1.8/node_modules/@chroma-core/default-embed/dist/default-embed.mjs\"));\n    if (!knownEmbeddingFunctions.has(new DefaultEmbeddingFunction().name)) {\n      registerEmbeddingFunction(\"default\", DefaultEmbeddingFunction);\n    }\n  } catch (e) {\n    console.error(e);\n    throw new Error(\n      \"Cannot instantiate a collection with the DefaultEmbeddingFunction. Please install @chroma-core/default-embed, or provide a different embedding function\"\n    );\n  }\n  return {\n    name: \"default\",\n    type: \"known\",\n    config: {}\n  };\n};\n\n// src/collection-configuration.ts\nvar processCreateCollectionConfig = async ({\n  configuration,\n  embeddingFunction,\n  metadata\n}) => {\n  if (configuration?.hnsw && configuration?.spann) {\n    throw new ChromaValueError(\n      \"Cannot specify both HNSW and SPANN configurations\"\n    );\n  }\n  let embeddingFunctionConfiguration = serializeEmbeddingFunction({\n    embeddingFunction: embeddingFunction ?? void 0,\n    configEmbeddingFunction: configuration?.embeddingFunction\n  });\n  if (!embeddingFunctionConfiguration && embeddingFunction !== null) {\n    embeddingFunctionConfiguration = await getDefaultEFConfig();\n  }\n  const overallEf = embeddingFunction || configuration?.embeddingFunction;\n  if (overallEf && overallEf.defaultSpace && overallEf.supportedSpaces) {\n    if (configuration?.hnsw === void 0 && configuration?.spann === void 0) {\n      if (metadata === void 0 || metadata?.[\"hnsw:space\"] === void 0) {\n        if (!configuration) configuration = {};\n        configuration.hnsw = { space: overallEf.defaultSpace() };\n      }\n    }\n    if (configuration?.hnsw && !configuration.hnsw.space && overallEf.defaultSpace) {\n      configuration.hnsw.space = overallEf.defaultSpace();\n    }\n    if (configuration?.spann && !configuration.spann.space && overallEf.defaultSpace) {\n      configuration.spann.space = overallEf.defaultSpace();\n    }\n    if (overallEf.supportedSpaces) {\n      const supportedSpaces = overallEf.supportedSpaces();\n      if (configuration?.hnsw?.space && !supportedSpaces.includes(configuration.hnsw.space)) {\n        console.warn(\n          `Space '${configuration.hnsw.space}' is not supported by embedding function '${overallEf.name || \"unknown\"}'. Supported spaces: ${supportedSpaces.join(\", \")}`\n        );\n      }\n      if (configuration?.spann?.space && !supportedSpaces.includes(configuration.spann.space)) {\n        console.warn(\n          `Space '${configuration.spann.space}' is not supported by embedding function '${overallEf.name || \"unknown\"}'. Supported spaces: ${supportedSpaces.join(\", \")}`\n        );\n      }\n      if (!configuration?.hnsw && !configuration?.spann && metadata && typeof metadata[\"hnsw:space\"] === \"string\" && !supportedSpaces.includes(metadata[\"hnsw:space\"])) {\n        console.warn(\n          `Space '${metadata[\"hnsw:space\"]}' from metadata is not supported by embedding function '${overallEf.name || \"unknown\"}'. Supported spaces: ${supportedSpaces.join(\", \")}`\n        );\n      }\n    }\n  }\n  return {\n    ...configuration || {},\n    embedding_function: embeddingFunctionConfiguration\n  };\n};\nvar processUpdateCollectionConfig = async ({\n  collectionName,\n  currentConfiguration,\n  currentEmbeddingFunction,\n  newConfiguration\n}) => {\n  if (newConfiguration.hnsw && typeof newConfiguration.hnsw !== \"object\") {\n    throw new ChromaValueError(\n      \"Invalid HNSW config provided in UpdateCollectionConfiguration\"\n    );\n  }\n  if (newConfiguration.spann && typeof newConfiguration.spann !== \"object\") {\n    throw new ChromaValueError(\n      \"Invalid SPANN config provided in UpdateCollectionConfiguration\"\n    );\n  }\n  const embeddingFunction = currentEmbeddingFunction || await getEmbeddingFunction(\n    collectionName,\n    currentConfiguration.embeddingFunction ?? void 0\n  );\n  const newEmbeddingFunction = newConfiguration.embeddingFunction;\n  if (embeddingFunction && embeddingFunction.validateConfigUpdate && newEmbeddingFunction && newEmbeddingFunction.getConfig) {\n    embeddingFunction.validateConfigUpdate(newEmbeddingFunction.getConfig());\n  }\n  return {\n    updateConfiguration: {\n      hnsw: newConfiguration.hnsw,\n      spann: newConfiguration.spann,\n      embedding_function: newEmbeddingFunction && serializeEmbeddingFunction({ embeddingFunction: newEmbeddingFunction })\n    },\n    updateEmbeddingFunction: newEmbeddingFunction\n  };\n};\n\n// src/collection.ts\nvar CollectionImpl = class _CollectionImpl {\n  /**\n   * Creates a new CollectionAPIImpl instance.\n   * @param options - Configuration for the collection API\n   */\n  constructor({\n    chromaClient,\n    apiClient,\n    id,\n    name,\n    metadata,\n    configuration,\n    embeddingFunction\n  }) {\n    this.chromaClient = chromaClient;\n    this.apiClient = apiClient;\n    this.id = id;\n    this._name = name;\n    this._metadata = metadata;\n    this._configuration = configuration;\n    this._embeddingFunction = embeddingFunction;\n  }\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._name = name;\n  }\n  get configuration() {\n    return this._configuration;\n  }\n  set configuration(configuration) {\n    this._configuration = configuration;\n  }\n  get metadata() {\n    return this._metadata;\n  }\n  set metadata(metadata) {\n    this._metadata = metadata;\n  }\n  get embeddingFunction() {\n    return this._embeddingFunction;\n  }\n  set embeddingFunction(embeddingFunction) {\n    this._embeddingFunction = embeddingFunction;\n  }\n  async path() {\n    const clientPath = await this.chromaClient._path();\n    return {\n      ...clientPath,\n      collection_id: this.id\n    };\n  }\n  async embed(documents) {\n    if (!this._embeddingFunction) {\n      throw new ChromaValueError(\n        \"Embedding function must be defined for operations requiring embeddings.\"\n      );\n    }\n    return await this._embeddingFunction.generate(documents);\n  }\n  async prepareRecords({\n    recordSet,\n    update = false\n  }) {\n    const maxBatchSize = await this.chromaClient.getMaxBatchSize();\n    validateRecordSetLengthConsistency(recordSet);\n    validateIDs(recordSet.ids);\n    validateBaseRecordSet({ recordSet, update });\n    validateMaxBatchSize(recordSet.ids.length, maxBatchSize);\n    if (!recordSet.embeddings && recordSet.documents) {\n      recordSet.embeddings = await this.embed(recordSet.documents);\n    }\n    const preparedRecordSet = { ...recordSet };\n    const base64Supported = await this.chromaClient.supportsBase64Encoding();\n    if (base64Supported && recordSet.embeddings) {\n      preparedRecordSet.embeddings = embeddingsToBase64Bytes(\n        recordSet.embeddings\n      );\n    }\n    return preparedRecordSet;\n  }\n  validateGet(include, ids, where, whereDocument) {\n    validateInclude({ include, exclude: [\"distances\"] });\n    if (ids) validateIDs(ids);\n    if (where) validateWhere(where);\n    if (whereDocument) validateWhereDocument(whereDocument);\n  }\n  async prepareQuery(recordSet, include, ids, where, whereDocument, nResults) {\n    validateBaseRecordSet({\n      recordSet,\n      embeddingsField: \"queryEmbeddings\",\n      documentsField: \"queryTexts\"\n    });\n    validateInclude({ include });\n    if (ids) validateIDs(ids);\n    if (where) validateWhere(where);\n    if (whereDocument) validateWhereDocument(whereDocument);\n    if (nResults) validateNResults(nResults);\n    let embeddings;\n    if (!recordSet.embeddings) {\n      embeddings = await this.embed(recordSet.documents);\n    } else {\n      embeddings = recordSet.embeddings;\n    }\n    return {\n      ...recordSet,\n      ids,\n      embeddings\n    };\n  }\n  validateDelete(ids, where, whereDocument) {\n    if (ids) validateIDs(ids);\n    if (where) validateWhere(where);\n    if (whereDocument) validateWhereDocument(whereDocument);\n  }\n  async count() {\n    const { data } = await DefaultService.collectionCount({\n      client: this.apiClient,\n      path: await this.path()\n    });\n    return data;\n  }\n  async add({\n    ids,\n    embeddings,\n    metadatas,\n    documents,\n    uris\n  }) {\n    const recordSet = {\n      ids,\n      embeddings,\n      documents,\n      metadatas,\n      uris\n    };\n    const preparedRecordSet = await this.prepareRecords({ recordSet });\n    await DefaultService.collectionAdd({\n      client: this.apiClient,\n      path: await this.path(),\n      body: {\n        ids: preparedRecordSet.ids,\n        embeddings: preparedRecordSet.embeddings,\n        documents: preparedRecordSet.documents,\n        metadatas: preparedRecordSet.metadatas,\n        uris: preparedRecordSet.uris\n      }\n    });\n  }\n  async get(args = {}) {\n    const {\n      ids,\n      where,\n      limit,\n      offset,\n      whereDocument,\n      include = [\"documents\", \"metadatas\"]\n    } = args;\n    this.validateGet(include, ids, where, whereDocument);\n    const { data } = await DefaultService.collectionGet({\n      client: this.apiClient,\n      path: await this.path(),\n      body: {\n        ids,\n        where,\n        limit,\n        offset,\n        where_document: whereDocument,\n        include\n      }\n    });\n    return new GetResult({\n      documents: data.documents ?? [],\n      embeddings: data.embeddings ?? [],\n      ids: data.ids,\n      include: data.include,\n      metadatas: data.metadatas ?? [],\n      uris: data.uris ?? []\n    });\n  }\n  async peek({ limit = 10 }) {\n    return this.get({ limit });\n  }\n  async query({\n    queryEmbeddings,\n    queryTexts,\n    queryURIs,\n    ids,\n    nResults = 10,\n    where,\n    whereDocument,\n    include = [\"metadatas\", \"documents\", \"distances\"]\n  }) {\n    const recordSet = {\n      embeddings: queryEmbeddings,\n      documents: queryTexts,\n      uris: queryURIs\n    };\n    const queryRecordSet = await this.prepareQuery(\n      recordSet,\n      include,\n      ids,\n      where,\n      whereDocument,\n      nResults\n    );\n    const { data } = await DefaultService.collectionQuery({\n      client: this.apiClient,\n      path: await this.path(),\n      body: {\n        ids: queryRecordSet.ids,\n        include,\n        n_results: nResults,\n        query_embeddings: queryRecordSet.embeddings,\n        where,\n        where_document: whereDocument\n      }\n    });\n    return new QueryResult({\n      distances: data.distances ?? [],\n      documents: data.documents ?? [],\n      embeddings: data.embeddings ?? [],\n      ids: data.ids ?? [],\n      include: data.include,\n      metadatas: data.metadatas ?? [],\n      uris: data.uris ?? []\n    });\n  }\n  async modify({\n    name,\n    metadata,\n    configuration\n  }) {\n    if (name) this.name = name;\n    if (metadata) {\n      validateMetadata(metadata);\n      this.metadata = metadata;\n    }\n    const { updateConfiguration, updateEmbeddingFunction } = configuration ? await processUpdateCollectionConfig({\n      collectionName: this.name,\n      currentConfiguration: this.configuration,\n      newConfiguration: configuration,\n      currentEmbeddingFunction: this.embeddingFunction\n    }) : {};\n    if (updateEmbeddingFunction) {\n      this.embeddingFunction = updateEmbeddingFunction;\n    }\n    if (updateConfiguration) {\n      this.configuration = {\n        hnsw: { ...this.configuration.hnsw, ...updateConfiguration.hnsw },\n        spann: { ...this.configuration.spann, ...updateConfiguration.spann },\n        embeddingFunction: updateConfiguration.embedding_function\n      };\n    }\n    await DefaultService.updateCollection({\n      client: this.apiClient,\n      path: await this.path(),\n      body: {\n        new_name: name,\n        new_metadata: metadata,\n        new_configuration: updateConfiguration\n      }\n    });\n  }\n  async fork({ name }) {\n    const { data } = await DefaultService.forkCollection({\n      client: this.apiClient,\n      path: await this.path(),\n      body: { new_name: name }\n    });\n    return new _CollectionImpl({\n      chromaClient: this.chromaClient,\n      apiClient: this.apiClient,\n      name: data.name,\n      id: data.id,\n      embeddingFunction: this._embeddingFunction,\n      metadata: data.metadata ?? void 0,\n      configuration: data.configuration_json\n    });\n  }\n  async update({\n    ids,\n    embeddings,\n    metadatas,\n    documents,\n    uris\n  }) {\n    const recordSet = {\n      ids,\n      embeddings,\n      documents,\n      metadatas,\n      uris\n    };\n    const preparedRecordSet = await this.prepareRecords({\n      recordSet,\n      update: true\n    });\n    await DefaultService.collectionUpdate({\n      client: this.apiClient,\n      path: await this.path(),\n      body: {\n        ids: preparedRecordSet.ids,\n        embeddings: preparedRecordSet.embeddings,\n        metadatas: preparedRecordSet.metadatas,\n        uris: preparedRecordSet.uris,\n        documents: preparedRecordSet.documents\n      }\n    });\n  }\n  async upsert({\n    ids,\n    embeddings,\n    metadatas,\n    documents,\n    uris\n  }) {\n    const recordSet = {\n      ids,\n      embeddings,\n      documents,\n      metadatas,\n      uris\n    };\n    const preparedRecordSet = await this.prepareRecords({\n      recordSet\n    });\n    await DefaultService.collectionUpsert({\n      client: this.apiClient,\n      path: await this.path(),\n      body: {\n        ids: preparedRecordSet.ids,\n        embeddings: preparedRecordSet.embeddings,\n        metadatas: preparedRecordSet.metadatas,\n        uris: preparedRecordSet.uris,\n        documents: preparedRecordSet.documents\n      }\n    });\n  }\n  async delete({\n    ids,\n    where,\n    whereDocument\n  }) {\n    this.validateDelete(ids, where, whereDocument);\n    await DefaultService.collectionDelete({\n      client: this.apiClient,\n      path: await this.path(),\n      body: {\n        ids,\n        where,\n        where_document: whereDocument\n      }\n    });\n  }\n};\n\n// src/next.ts\nfunction withChroma(userNextConfig = {}) {\n  const originalWebpackFunction = userNextConfig.webpack;\n  const newWebpackFunction = (config, options) => {\n    if (!Array.isArray(config.externals)) {\n      config.externals = [];\n    }\n    const externalsToAdd = [\"@huggingface/transformers\", \"chromadb\"];\n    for (const ext of externalsToAdd) {\n      if (!config.externals.includes(ext)) {\n        config.externals.push(ext);\n      }\n    }\n    if (typeof originalWebpackFunction === \"function\") {\n      return originalWebpackFunction(config, options);\n    }\n    return config;\n  };\n  return {\n    ...userNextConfig,\n    webpack: newWebpackFunction\n  };\n}\n\n// src/chroma-fetch.ts\nvar offlineError = (error) => {\n  return Boolean(\n    (error?.name === \"TypeError\" || error?.name === \"FetchError\") && (error.message?.includes(\"fetch failed\") || error.message?.includes(\"Failed to fetch\") || error.message?.includes(\"ENOTFOUND\"))\n  );\n};\nvar chromaFetch = async (input, init) => {\n  let response;\n  try {\n    response = await fetch(input, init);\n  } catch (err) {\n    if (offlineError(err)) {\n      throw new ChromaConnectionError(\n        \"Failed to connect to chromadb. Make sure your server is running and try again. If you are running from a browser, make sure that your chromadb instance is configured to allow requests from the current origin using the CHROMA_SERVER_CORS_ALLOW_ORIGINS environment variable.\"\n      );\n    }\n    throw new ChromaConnectionError(\"Failed to connect to Chroma\");\n  }\n  if (response.ok) {\n    return response;\n  }\n  switch (response.status) {\n    case 400:\n      let status = \"Bad Request\";\n      try {\n        const responseBody = await response.json();\n        status = responseBody.message || status;\n      } catch {\n      }\n      throw new ChromaClientError(\n        `Bad request to ${input.url || \"Chroma\"} with status: ${status}`\n      );\n    case 401:\n      throw new ChromaUnauthorizedError(`Unauthorized`);\n    case 403:\n      throw new ChromaForbiddenError(\n        `You do not have permission to access the requested resource.`\n      );\n    case 404:\n      throw new ChromaNotFoundError(\n        `The requested resource could not be found`\n      );\n    case 409:\n      throw new ChromaUniqueError(\"The resource already exists\");\n    case 422:\n      const body = await response.json();\n      if (body && body.message && (body.message.startsWith(\"Quota exceeded\") || body.message.startsWith(\"Billing limit exceeded\"))) {\n        throw new ChromaQuotaExceededError(body?.message);\n      }\n      break;\n    case 429:\n      throw new ChromaRateLimitError(\"Rate limit exceeded\");\n  }\n  throw new ChromaConnectionError(\n    `Unable to connect to the chromadb server (status: ${response.status}). Please try again later.`\n  );\n};\n\n// src/admin-client.ts\nvar AdminClient = class {\n  /**\n   * Creates a new AdminClient instance.\n   * @param args - Optional configuration for the admin client\n   */\n  constructor(args) {\n    const { host, port, ssl, headers, fetchOptions } = args || defaultAdminClientArgs;\n    const baseUrl = `${ssl ? \"https\" : \"http\"}://${host}:${port}`;\n    const configOptions = {\n      ...fetchOptions,\n      method: normalizeMethod(fetchOptions?.method),\n      baseUrl,\n      headers\n    };\n    this.apiClient = J(w(configOptions));\n    this.apiClient.setConfig({ fetch: chromaFetch });\n  }\n  /**\n   * Creates a new database within a tenant.\n   * @param options - Database creation options\n   * @param options.name - Name of the database to create\n   * @param options.tenant - Tenant that will own the database\n   */\n  async createDatabase({\n    name,\n    tenant\n  }) {\n    await DefaultService.createDatabase({\n      client: this.apiClient,\n      path: { tenant },\n      body: { name }\n    });\n  }\n  /**\n   * Retrieves information about a specific database.\n   * @param options - Database retrieval options\n   * @param options.name - Name of the database to retrieve\n   * @param options.tenant - Tenant that owns the database\n   * @returns Promise resolving to database information\n   */\n  async getDatabase({\n    name,\n    tenant\n  }) {\n    const { data } = await DefaultService.getDatabase({\n      client: this.apiClient,\n      path: { tenant, database: name }\n    });\n    return data;\n  }\n  /**\n   * Deletes a database and all its data.\n   * @param options - Database deletion options\n   * @param options.name - Name of the database to delete\n   * @param options.tenant - Tenant that owns the database\n   * @warning This operation is irreversible and will delete all data\n   */\n  async deleteDatabase({\n    name,\n    tenant\n  }) {\n    await DefaultService.deleteDatabase({\n      client: this.apiClient,\n      path: { tenant, database: name }\n    });\n  }\n  /**\n   * Lists all databases within a tenant.\n   * @param args - Listing parameters including tenant and pagination\n   * @returns Promise resolving to an array of database information\n   */\n  async listDatabases(args) {\n    const { limit = 100, offset = 0, tenant } = args;\n    const { data } = await DefaultService.listDatabases({\n      client: this.apiClient,\n      path: { tenant },\n      query: { limit, offset }\n    });\n    return data;\n  }\n  /**\n   * Creates a new tenant.\n   * @param options - Tenant creation options\n   * @param options.name - Name of the tenant to create\n   */\n  async createTenant({ name }) {\n    await DefaultService.createTenant({\n      client: this.apiClient,\n      body: { name }\n    });\n  }\n  /**\n   * Retrieves information about a specific tenant.\n   * @param options - Tenant retrieval options\n   * @param options.name - Name of the tenant to retrieve\n   * @returns Promise resolving to the tenant name\n   */\n  async getTenant({ name }) {\n    const { data } = await DefaultService.getTenant({\n      client: this.apiClient,\n      path: { tenant_name: name }\n    });\n    return data.name;\n  }\n};\n\n// src/chroma-client.ts\n\nvar ChromaClient = class {\n  /**\n   * Creates a new ChromaClient instance.\n   * @param args - Configuration options for the client\n   */\n  constructor(args = {}) {\n    let {\n      host = defaultChromaClientArgs.host,\n      port = defaultChromaClientArgs.port,\n      ssl = defaultChromaClientArgs.ssl,\n      tenant = defaultChromaClientArgs.tenant,\n      database = defaultChromaClientArgs.database,\n      headers = defaultChromaClientArgs.headers,\n      fetchOptions = defaultChromaClientArgs.fetchOptions\n    } = args;\n    if (args.path) {\n      console.warn(\n        \"The 'path' argument is deprecated. Please use 'ssl', 'host', and 'port' instead\"\n      );\n      const parsedPath = parseConnectionPath(args.path);\n      ssl = parsedPath.ssl;\n      host = parsedPath.host;\n      port = parsedPath.port;\n    }\n    if (args.auth) {\n      console.warn(\n        \"The 'auth' argument is deprecated. Please use 'headers' instead\"\n      );\n      if (!headers) {\n        headers = {};\n      }\n      if (!headers[\"x-chroma-token\"] && args.auth.tokenHeaderType === \"X_CHROMA_TOKEN\" && args.auth.credentials) {\n        headers[\"x-chroma-token\"] = args.auth.credentials;\n      }\n    }\n    const baseUrl = `${ssl ? \"https\" : \"http\"}://${host}:${port}`;\n    this._tenant = tenant || node_process__WEBPACK_IMPORTED_MODULE_1__.env.CHROMA_TENANT;\n    this._database = database || node_process__WEBPACK_IMPORTED_MODULE_1__.env.CHROMA_DATABASE;\n    const configOptions = {\n      ...fetchOptions,\n      method: normalizeMethod(fetchOptions?.method),\n      baseUrl,\n      headers\n    };\n    this.apiClient = J(w(configOptions));\n    this.apiClient.setConfig({ fetch: chromaFetch });\n  }\n  /**\n   * Gets the current tenant name.\n   * @returns The tenant name or undefined if not set\n   */\n  get tenant() {\n    return this._tenant;\n  }\n  set tenant(tenant) {\n    this._tenant = tenant;\n  }\n  /**\n   * Gets the current database name.\n   * @returns The database name or undefined if not set\n   */\n  get database() {\n    return this._database;\n  }\n  set database(database) {\n    this._database = database;\n  }\n  /**\n   * Gets the preflight checks\n   * @returns The preflight checks or undefined if not set\n   */\n  get preflightChecks() {\n    return this._preflightChecks;\n  }\n  set preflightChecks(preflightChecks) {\n    this._preflightChecks = preflightChecks;\n  }\n  /** @ignore */\n  async _path() {\n    if (!this._tenant || !this._database) {\n      const { tenant, databases } = await this.getUserIdentity();\n      const uniqueDBs = [...new Set(databases)];\n      this._tenant = tenant;\n      if (uniqueDBs.length === 0) {\n        throw new ChromaUnauthorizedError(\n          `Your API key does not have access to any DBs for tenant ${this.tenant}`\n        );\n      }\n      if (uniqueDBs.length > 1 || uniqueDBs[0] === \"*\") {\n        throw new ChromaValueError(\n          \"Your API key is scoped to more than 1 DB. Please provide a DB name to the CloudClient constructor\"\n        );\n      }\n      this._database = uniqueDBs[0];\n    }\n    return { tenant: this._tenant, database: this._database };\n  }\n  /**\n   * Gets the user identity information including tenant and accessible databases.\n   * @returns Promise resolving to user identity data\n   */\n  async getUserIdentity() {\n    const { data } = await DefaultService.getUserIdentity({\n      client: this.apiClient\n    });\n    return data;\n  }\n  /**\n   * Sends a heartbeat request to check server connectivity.\n   * @returns Promise resolving to the server's nanosecond heartbeat timestamp\n   */\n  async heartbeat() {\n    const { data } = await DefaultService.heartbeat({\n      client: this.apiClient\n    });\n    return data[\"nanosecond heartbeat\"];\n  }\n  /**\n   * Lists all collections in the current database.\n   * @param args - Optional pagination parameters\n   * @param args.limit - Maximum number of collections to return (default: 100)\n   * @param args.offset - Number of collections to skip (default: 0)\n   * @returns Promise resolving to an array of Collection instances\n   */\n  async listCollections(args) {\n    const { limit = 100, offset = 0 } = args || {};\n    const { data } = await DefaultService.listCollections({\n      client: this.apiClient,\n      path: await this._path(),\n      query: { limit, offset }\n    });\n    return Promise.all(\n      data.map(\n        async (collection) => new CollectionImpl({\n          chromaClient: this,\n          apiClient: this.apiClient,\n          name: collection.name,\n          id: collection.id,\n          embeddingFunction: await getEmbeddingFunction(\n            collection.name,\n            collection.configuration_json.embedding_function ?? void 0\n          ),\n          configuration: collection.configuration_json,\n          metadata: collection.metadata ?? void 0\n        })\n      )\n    );\n  }\n  /**\n   * Gets the total number of collections in the current database.\n   * @returns Promise resolving to the collection count\n   */\n  async countCollections() {\n    const { data } = await DefaultService.countCollections({\n      client: this.apiClient,\n      path: await this._path()\n    });\n    return data;\n  }\n  /**\n   * Creates a new collection with the specified configuration.\n   * @param options - Collection creation options\n   * @param options.name - The name of the collection\n   * @param options.configuration - Optional collection configuration\n   * @param options.metadata - Optional metadata for the collection\n   * @param options.embeddingFunction - Optional embedding function to use. Defaults to `DefaultEmbeddingFunction` from @chroma-core/default-embed\n   * @returns Promise resolving to the created Collection instance\n   * @throws Error if a collection with the same name already exists\n   */\n  async createCollection({\n    name,\n    configuration,\n    metadata,\n    embeddingFunction\n  }) {\n    const collectionConfig = await processCreateCollectionConfig({\n      configuration,\n      embeddingFunction,\n      metadata\n    });\n    const { data } = await DefaultService.createCollection({\n      client: this.apiClient,\n      path: await this._path(),\n      body: {\n        name,\n        configuration: collectionConfig,\n        metadata,\n        get_or_create: false\n      }\n    });\n    return new CollectionImpl({\n      chromaClient: this,\n      apiClient: this.apiClient,\n      name,\n      configuration: data.configuration_json,\n      metadata,\n      embeddingFunction: embeddingFunction ?? await getEmbeddingFunction(\n        data.name,\n        data.configuration_json.embedding_function ?? void 0\n      ),\n      id: data.id\n    });\n  }\n  /**\n   * Retrieves an existing collection by name.\n   * @param options - Collection retrieval options\n   * @param options.name - The name of the collection to retrieve\n   * @param options.embeddingFunction - Optional embedding function. Should match the one used to create the collection.\n   * @returns Promise resolving to the Collection instance\n   * @throws Error if the collection does not exist\n   */\n  async getCollection({\n    name,\n    embeddingFunction\n  }) {\n    const { data } = await DefaultService.getCollection({\n      client: this.apiClient,\n      path: { ...await this._path(), collection_id: name }\n    });\n    return new CollectionImpl({\n      chromaClient: this,\n      apiClient: this.apiClient,\n      name,\n      configuration: data.configuration_json,\n      metadata: data.metadata ?? void 0,\n      embeddingFunction: embeddingFunction ? embeddingFunction : await getEmbeddingFunction(\n        data.name,\n        data.configuration_json.embedding_function ?? void 0\n      ),\n      id: data.id\n    });\n  }\n  /**\n   * Retrieves multiple collections by name.\n   * @param items - Array of collection names or objects with name and optional embedding function (should match the ones used to create the collections)\n   * @returns Promise resolving to an array of Collection instances\n   */\n  async getCollections(items) {\n    if (items.length === 0) return [];\n    let requestedCollections = items;\n    if (typeof items[0] === \"string\") {\n      requestedCollections = items.map((item) => {\n        return { name: item, embeddingFunction: void 0 };\n      });\n    }\n    let collections = requestedCollections;\n    return Promise.all(\n      collections.map(async (collection) => {\n        return this.getCollection({ ...collection });\n      })\n    );\n  }\n  /**\n   * Gets an existing collection or creates it if it doesn't exist.\n   * @param options - Collection options\n   * @param options.name - The name of the collection\n   * @param options.configuration - Optional collection configuration (used only if creating)\n   * @param options.metadata - Optional metadata for the collection (used only if creating)\n   * @param options.embeddingFunction - Optional embedding function to use\n   * @returns Promise resolving to the Collection instance\n   */\n  async getOrCreateCollection({\n    name,\n    configuration,\n    metadata,\n    embeddingFunction\n  }) {\n    const collectionConfig = await processCreateCollectionConfig({\n      configuration,\n      embeddingFunction,\n      metadata\n    });\n    const { data } = await DefaultService.createCollection({\n      client: this.apiClient,\n      path: await this._path(),\n      body: {\n        name,\n        configuration: collectionConfig,\n        metadata,\n        get_or_create: true\n      }\n    });\n    return new CollectionImpl({\n      chromaClient: this,\n      apiClient: this.apiClient,\n      name,\n      configuration: data.configuration_json,\n      metadata: data.metadata ?? void 0,\n      embeddingFunction: embeddingFunction ?? await getEmbeddingFunction(\n        name,\n        data.configuration_json.embedding_function ?? void 0\n      ),\n      id: data.id\n    });\n  }\n  /**\n   * Deletes a collection and all its data.\n   * @param options - Deletion options\n   * @param options.name - The name of the collection to delete\n   */\n  async deleteCollection({ name }) {\n    await DefaultService.deleteCollection({\n      client: this.apiClient,\n      path: { ...await this._path(), collection_id: name }\n    });\n  }\n  /**\n   * Resets the entire database, deleting all collections and data.\n   * @returns Promise that resolves when the reset is complete\n   * @warning This operation is irreversible and will delete all data\n   */\n  async reset() {\n    await DefaultService.reset({\n      client: this.apiClient\n    });\n  }\n  /**\n   * Gets the version of the Chroma server.\n   * @returns Promise resolving to the server version string\n   */\n  async version() {\n    const { data } = await DefaultService.version({\n      client: this.apiClient\n    });\n    return data;\n  }\n  /**\n   * Gets the preflight checks\n   * @returns Promise resolving to the preflight checks\n   */\n  async getPreflightChecks() {\n    if (!this.preflightChecks) {\n      const { data } = await DefaultService.preFlightChecks({\n        client: this.apiClient\n      });\n      this.preflightChecks = data;\n      return this.preflightChecks;\n    }\n    return this.preflightChecks;\n  }\n  /**\n   * Gets the max batch size\n   * @returns Promise resolving to the max batch size\n   */\n  async getMaxBatchSize() {\n    const preflightChecks = await this.getPreflightChecks();\n    return preflightChecks.max_batch_size ?? -1;\n  }\n  /**\n   * Gets whether base64_encoding is supported by the connected server\n   * @returns Promise resolving to whether base64_encoding is supported\n   */\n  async supportsBase64Encoding() {\n    const preflightChecks = await this.getPreflightChecks();\n    return preflightChecks.supports_base64_encoding ?? false;\n  }\n};\n\n// src/cloud-client.ts\n\nvar CloudClient = class extends ChromaClient {\n  /**\n   * Creates a new CloudClient instance for Chroma Cloud.\n   * @param args - Cloud client configuration options\n   */\n  constructor(args = {}) {\n    const apiKey = args.apiKey || node_process__WEBPACK_IMPORTED_MODULE_1__.env.CHROMA_API_KEY;\n    if (!apiKey) {\n      throw new ChromaValueError(\n        \"Missing API key. Please provide it to the CloudClient constructor or set your CHROMA_API_KEY environment variable\"\n      );\n    }\n    const tenant = args.tenant || node_process__WEBPACK_IMPORTED_MODULE_1__.env.CHROMA_TENANT;\n    const database = args.database || node_process__WEBPACK_IMPORTED_MODULE_1__.env.CHROMA_DATABASE;\n    super({\n      host: \"api.trychroma.com\",\n      port: 8e3,\n      ssl: true,\n      tenant,\n      database,\n      headers: { \"x-chroma-token\": apiKey },\n      fetchOptions: args.fetchOptions\n    });\n    this.tenant = tenant;\n    this.database = database;\n  }\n};\nvar AdminCloudClient = class extends AdminClient {\n  /**\n   * Creates a new AdminCloudClient instance for cloud admin operations.\n   * @param args - Admin cloud client configuration options\n   */\n  constructor(args = {}) {\n    const apiKey = args.apiKey || node_process__WEBPACK_IMPORTED_MODULE_1__.env.CHROMA_API_KEY;\n    if (!apiKey) {\n      throw new ChromaValueError(\n        \"Missing API key. Please provide it to the CloudClient constructor or set your CHROMA_API_KEY environment variable\"\n      );\n    }\n    super({\n      host: \"api.trychroma.com\",\n      port: 8e3,\n      ssl: true,\n      headers: { \"x-chroma-token\": apiKey },\n      fetchOptions: args.fetchOptions\n    });\n  }\n};\n\n//# sourceMappingURL=chromadb.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/chromadb@3.0.17/node_modules/chromadb/dist/chromadb.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/chromadb@3.0.17/node_modules/chromadb/dist/chunk-NSSMTXJJ.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/chromadb@3.0.17/node_modules/chromadb/dist/chunk-NSSMTXJJ.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __publicField: () => (/* binding */ __publicField)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n//# sourceMappingURL=chunk-NSSMTXJJ.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vY2hyb21hZGJAMy4wLjE3L25vZGVfbW9kdWxlcy9jaHJvbWFkYi9kaXN0L2NodW5rLU5TU01UWEpKLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQSw4RUFBOEUsNkRBQTZEO0FBQzNJOztBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9jaHJvbWFkYkAzLjAuMTcvbm9kZV9tb2R1bGVzL2Nocm9tYWRiL2Rpc3QvY2h1bmstTlNTTVRYSkoubWpzP2E5YjEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcblxuZXhwb3J0IHtcbiAgX19wdWJsaWNGaWVsZFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLU5TU01UWEpKLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/chromadb@3.0.17/node_modules/chromadb/dist/chunk-NSSMTXJJ.mjs\n");

/***/ })

};
;