/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@img+colour@1.0.0";
exports.ids = ["vendor-chunks/@img+colour@1.0.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@img+colour@1.0.0/node_modules/@img/colour/color.cjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/@img+colour@1.0.0/node_modules/@img/colour/color.cjs ***!
  \*********************************************************************************/
/***/ ((module) => {

eval("var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// node_modules/color/index.js\nvar index_exports = {};\n__export(index_exports, {\n  default: () => index_default\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// node_modules/color-name/index.js\nvar color_name_default = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 134, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 250, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  grey: [128, 128, 128],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 221],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  rebeccapurple: [102, 51, 153],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [112, 128, 144],\n  slategrey: [112, 128, 144],\n  snow: [255, 250, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 50]\n};\n\n// node_modules/color-string/index.js\nvar reverseNames = /* @__PURE__ */ Object.create(null);\nfor (const name in color_name_default) {\n  if (Object.hasOwn(color_name_default, name)) {\n    reverseNames[color_name_default[name]] = name;\n  }\n}\nvar cs = {\n  to: {},\n  get: {}\n};\ncs.get = function(string) {\n  const prefix = string.slice(0, 3).toLowerCase();\n  let value;\n  let model;\n  switch (prefix) {\n    case \"hsl\": {\n      value = cs.get.hsl(string);\n      model = \"hsl\";\n      break;\n    }\n    case \"hwb\": {\n      value = cs.get.hwb(string);\n      model = \"hwb\";\n      break;\n    }\n    default: {\n      value = cs.get.rgb(string);\n      model = \"rgb\";\n      break;\n    }\n  }\n  if (!value) {\n    return null;\n  }\n  return { model, value };\n};\ncs.get.rgb = function(string) {\n  if (!string) {\n    return null;\n  }\n  const abbr = /^#([a-f\\d]{3,4})$/i;\n  const hex = /^#([a-f\\d]{6})([a-f\\d]{2})?$/i;\n  const rgba = /^rgba?\\(\\s*([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)\\s*(?:[\\s,|/]\\s*([+-]?[\\d.]+)(%?)\\s*)?\\)$/;\n  const per = /^rgba?\\(\\s*([+-]?[\\d.]+)%\\s*,?\\s*([+-]?[\\d.]+)%\\s*,?\\s*([+-]?[\\d.]+)%\\s*(?:[\\s,|/]\\s*([+-]?[\\d.]+)(%?)\\s*)?\\)$/;\n  const keyword = /^(\\w+)$/;\n  let rgb = [0, 0, 0, 1];\n  let match;\n  let i;\n  let hexAlpha;\n  if (match = string.match(hex)) {\n    hexAlpha = match[2];\n    match = match[1];\n    for (i = 0; i < 3; i++) {\n      const i2 = i * 2;\n      rgb[i] = Number.parseInt(match.slice(i2, i2 + 2), 16);\n    }\n    if (hexAlpha) {\n      rgb[3] = Number.parseInt(hexAlpha, 16) / 255;\n    }\n  } else if (match = string.match(abbr)) {\n    match = match[1];\n    hexAlpha = match[3];\n    for (i = 0; i < 3; i++) {\n      rgb[i] = Number.parseInt(match[i] + match[i], 16);\n    }\n    if (hexAlpha) {\n      rgb[3] = Number.parseInt(hexAlpha + hexAlpha, 16) / 255;\n    }\n  } else if (match = string.match(rgba)) {\n    for (i = 0; i < 3; i++) {\n      rgb[i] = Number.parseInt(match[i + 1], 10);\n    }\n    if (match[4]) {\n      rgb[3] = match[5] ? Number.parseFloat(match[4]) * 0.01 : Number.parseFloat(match[4]);\n    }\n  } else if (match = string.match(per)) {\n    for (i = 0; i < 3; i++) {\n      rgb[i] = Math.round(Number.parseFloat(match[i + 1]) * 2.55);\n    }\n    if (match[4]) {\n      rgb[3] = match[5] ? Number.parseFloat(match[4]) * 0.01 : Number.parseFloat(match[4]);\n    }\n  } else if (match = string.match(keyword)) {\n    if (match[1] === \"transparent\") {\n      return [0, 0, 0, 0];\n    }\n    if (!Object.hasOwn(color_name_default, match[1])) {\n      return null;\n    }\n    rgb = color_name_default[match[1]];\n    rgb[3] = 1;\n    return rgb;\n  } else {\n    return null;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] = clamp(rgb[i], 0, 255);\n  }\n  rgb[3] = clamp(rgb[3], 0, 1);\n  return rgb;\n};\ncs.get.hsl = function(string) {\n  if (!string) {\n    return null;\n  }\n  const hsl = /^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,?\\s*([+-]?[\\d.]+)%\\s*,?\\s*([+-]?[\\d.]+)%\\s*(?:[,|/]\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n  const match = string.match(hsl);\n  if (match) {\n    const alpha = Number.parseFloat(match[4]);\n    const h = (Number.parseFloat(match[1]) % 360 + 360) % 360;\n    const s = clamp(Number.parseFloat(match[2]), 0, 100);\n    const l = clamp(Number.parseFloat(match[3]), 0, 100);\n    const a = clamp(Number.isNaN(alpha) ? 1 : alpha, 0, 1);\n    return [h, s, l, a];\n  }\n  return null;\n};\ncs.get.hwb = function(string) {\n  if (!string) {\n    return null;\n  }\n  const hwb = /^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*[\\s,]\\s*([+-]?[\\d.]+)%\\s*[\\s,]\\s*([+-]?[\\d.]+)%\\s*(?:[\\s,]\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n  const match = string.match(hwb);\n  if (match) {\n    const alpha = Number.parseFloat(match[4]);\n    const h = (Number.parseFloat(match[1]) % 360 + 360) % 360;\n    const w = clamp(Number.parseFloat(match[2]), 0, 100);\n    const b = clamp(Number.parseFloat(match[3]), 0, 100);\n    const a = clamp(Number.isNaN(alpha) ? 1 : alpha, 0, 1);\n    return [h, w, b, a];\n  }\n  return null;\n};\ncs.to.hex = function(...rgba) {\n  return \"#\" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : \"\");\n};\ncs.to.rgb = function(...rgba) {\n  return rgba.length < 4 || rgba[3] === 1 ? \"rgb(\" + Math.round(rgba[0]) + \", \" + Math.round(rgba[1]) + \", \" + Math.round(rgba[2]) + \")\" : \"rgba(\" + Math.round(rgba[0]) + \", \" + Math.round(rgba[1]) + \", \" + Math.round(rgba[2]) + \", \" + rgba[3] + \")\";\n};\ncs.to.rgb.percent = function(...rgba) {\n  const r = Math.round(rgba[0] / 255 * 100);\n  const g = Math.round(rgba[1] / 255 * 100);\n  const b = Math.round(rgba[2] / 255 * 100);\n  return rgba.length < 4 || rgba[3] === 1 ? \"rgb(\" + r + \"%, \" + g + \"%, \" + b + \"%)\" : \"rgba(\" + r + \"%, \" + g + \"%, \" + b + \"%, \" + rgba[3] + \")\";\n};\ncs.to.hsl = function(...hsla) {\n  return hsla.length < 4 || hsla[3] === 1 ? \"hsl(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%)\" : \"hsla(\" + hsla[0] + \", \" + hsla[1] + \"%, \" + hsla[2] + \"%, \" + hsla[3] + \")\";\n};\ncs.to.hwb = function(...hwba) {\n  let a = \"\";\n  if (hwba.length >= 4 && hwba[3] !== 1) {\n    a = \", \" + hwba[3];\n  }\n  return \"hwb(\" + hwba[0] + \", \" + hwba[1] + \"%, \" + hwba[2] + \"%\" + a + \")\";\n};\ncs.to.keyword = function(...rgb) {\n  return reverseNames[rgb.slice(0, 3)];\n};\nfunction clamp(number_, min, max) {\n  return Math.min(Math.max(min, number_), max);\n}\nfunction hexDouble(number_) {\n  const string_ = Math.round(number_).toString(16).toUpperCase();\n  return string_.length < 2 ? \"0\" + string_ : string_;\n}\nvar color_string_default = cs;\n\n// node_modules/color-convert/conversions.js\nvar reverseKeywords = {};\nfor (const key of Object.keys(color_name_default)) {\n  reverseKeywords[color_name_default[key]] = key;\n}\nvar convert = {\n  rgb: { channels: 3, labels: \"rgb\" },\n  hsl: { channels: 3, labels: \"hsl\" },\n  hsv: { channels: 3, labels: \"hsv\" },\n  hwb: { channels: 3, labels: \"hwb\" },\n  cmyk: { channels: 4, labels: \"cmyk\" },\n  xyz: { channels: 3, labels: \"xyz\" },\n  lab: { channels: 3, labels: \"lab\" },\n  oklab: { channels: 3, labels: [\"okl\", \"oka\", \"okb\"] },\n  lch: { channels: 3, labels: \"lch\" },\n  oklch: { channels: 3, labels: [\"okl\", \"okc\", \"okh\"] },\n  hex: { channels: 1, labels: [\"hex\"] },\n  keyword: { channels: 1, labels: [\"keyword\"] },\n  ansi16: { channels: 1, labels: [\"ansi16\"] },\n  ansi256: { channels: 1, labels: [\"ansi256\"] },\n  hcg: { channels: 3, labels: [\"h\", \"c\", \"g\"] },\n  apple: { channels: 3, labels: [\"r16\", \"g16\", \"b16\"] },\n  gray: { channels: 1, labels: [\"gray\"] }\n};\nvar conversions_default = convert;\nvar LAB_FT = (6 / 29) ** 3;\nfunction srgbNonlinearTransform(c) {\n  const cc = c > 31308e-7 ? 1.055 * c ** (1 / 2.4) - 0.055 : c * 12.92;\n  return Math.min(Math.max(0, cc), 1);\n}\nfunction srgbNonlinearTransformInv(c) {\n  return c > 0.04045 ? ((c + 0.055) / 1.055) ** 2.4 : c / 12.92;\n}\nfor (const model of Object.keys(convert)) {\n  if (!(\"channels\" in convert[model])) {\n    throw new Error(\"missing channels property: \" + model);\n  }\n  if (!(\"labels\" in convert[model])) {\n    throw new Error(\"missing channel labels property: \" + model);\n  }\n  if (convert[model].labels.length !== convert[model].channels) {\n    throw new Error(\"channel and label counts mismatch: \" + model);\n  }\n  const { channels, labels } = convert[model];\n  delete convert[model].channels;\n  delete convert[model].labels;\n  Object.defineProperty(convert[model], \"channels\", { value: channels });\n  Object.defineProperty(convert[model], \"labels\", { value: labels });\n}\nconvert.rgb.hsl = function(rgb) {\n  const r = rgb[0] / 255;\n  const g = rgb[1] / 255;\n  const b = rgb[2] / 255;\n  const min = Math.min(r, g, b);\n  const max = Math.max(r, g, b);\n  const delta = max - min;\n  let h;\n  let s;\n  switch (max) {\n    case min: {\n      h = 0;\n      break;\n    }\n    case r: {\n      h = (g - b) / delta;\n      break;\n    }\n    case g: {\n      h = 2 + (b - r) / delta;\n      break;\n    }\n    case b: {\n      h = 4 + (r - g) / delta;\n      break;\n    }\n  }\n  h = Math.min(h * 60, 360);\n  if (h < 0) {\n    h += 360;\n  }\n  const l = (min + max) / 2;\n  if (max === min) {\n    s = 0;\n  } else if (l <= 0.5) {\n    s = delta / (max + min);\n  } else {\n    s = delta / (2 - max - min);\n  }\n  return [h, s * 100, l * 100];\n};\nconvert.rgb.hsv = function(rgb) {\n  let rdif;\n  let gdif;\n  let bdif;\n  let h;\n  let s;\n  const r = rgb[0] / 255;\n  const g = rgb[1] / 255;\n  const b = rgb[2] / 255;\n  const v = Math.max(r, g, b);\n  const diff = v - Math.min(r, g, b);\n  const diffc = function(c) {\n    return (v - c) / 6 / diff + 1 / 2;\n  };\n  if (diff === 0) {\n    h = 0;\n    s = 0;\n  } else {\n    s = diff / v;\n    rdif = diffc(r);\n    gdif = diffc(g);\n    bdif = diffc(b);\n    switch (v) {\n      case r: {\n        h = bdif - gdif;\n        break;\n      }\n      case g: {\n        h = 1 / 3 + rdif - bdif;\n        break;\n      }\n      case b: {\n        h = 2 / 3 + gdif - rdif;\n        break;\n      }\n    }\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n  }\n  return [\n    h * 360,\n    s * 100,\n    v * 100\n  ];\n};\nconvert.rgb.hwb = function(rgb) {\n  const r = rgb[0];\n  const g = rgb[1];\n  let b = rgb[2];\n  const h = convert.rgb.hsl(rgb)[0];\n  const w = 1 / 255 * Math.min(r, Math.min(g, b));\n  b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n  return [h, w * 100, b * 100];\n};\nconvert.rgb.oklab = function(rgb) {\n  const r = srgbNonlinearTransformInv(rgb[0] / 255);\n  const g = srgbNonlinearTransformInv(rgb[1] / 255);\n  const b = srgbNonlinearTransformInv(rgb[2] / 255);\n  const lp = Math.cbrt(0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b);\n  const mp = Math.cbrt(0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b);\n  const sp = Math.cbrt(0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b);\n  const l = 0.2104542553 * lp + 0.793617785 * mp - 0.0040720468 * sp;\n  const aa = 1.9779984951 * lp - 2.428592205 * mp + 0.4505937099 * sp;\n  const bb = 0.0259040371 * lp + 0.7827717662 * mp - 0.808675766 * sp;\n  return [l * 100, aa * 100, bb * 100];\n};\nconvert.rgb.cmyk = function(rgb) {\n  const r = rgb[0] / 255;\n  const g = rgb[1] / 255;\n  const b = rgb[2] / 255;\n  const k = Math.min(1 - r, 1 - g, 1 - b);\n  const c = (1 - r - k) / (1 - k) || 0;\n  const m = (1 - g - k) / (1 - k) || 0;\n  const y = (1 - b - k) / (1 - k) || 0;\n  return [c * 100, m * 100, y * 100, k * 100];\n};\nfunction comparativeDistance(x, y) {\n  return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;\n}\nconvert.rgb.keyword = function(rgb) {\n  const reversed = reverseKeywords[rgb];\n  if (reversed) {\n    return reversed;\n  }\n  let currentClosestDistance = Number.POSITIVE_INFINITY;\n  let currentClosestKeyword;\n  for (const keyword of Object.keys(color_name_default)) {\n    const value = color_name_default[keyword];\n    const distance = comparativeDistance(rgb, value);\n    if (distance < currentClosestDistance) {\n      currentClosestDistance = distance;\n      currentClosestKeyword = keyword;\n    }\n  }\n  return currentClosestKeyword;\n};\nconvert.keyword.rgb = function(keyword) {\n  return color_name_default[keyword];\n};\nconvert.rgb.xyz = function(rgb) {\n  const r = srgbNonlinearTransformInv(rgb[0] / 255);\n  const g = srgbNonlinearTransformInv(rgb[1] / 255);\n  const b = srgbNonlinearTransformInv(rgb[2] / 255);\n  const x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375;\n  const y = r * 0.2126729 + g * 0.7151522 + b * 0.072175;\n  const z = r * 0.0193339 + g * 0.119192 + b * 0.9503041;\n  return [x * 100, y * 100, z * 100];\n};\nconvert.rgb.lab = function(rgb) {\n  const xyz = convert.rgb.xyz(rgb);\n  let x = xyz[0];\n  let y = xyz[1];\n  let z = xyz[2];\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n  x = x > LAB_FT ? x ** (1 / 3) : 7.787 * x + 16 / 116;\n  y = y > LAB_FT ? y ** (1 / 3) : 7.787 * y + 16 / 116;\n  z = z > LAB_FT ? z ** (1 / 3) : 7.787 * z + 16 / 116;\n  const l = 116 * y - 16;\n  const a = 500 * (x - y);\n  const b = 200 * (y - z);\n  return [l, a, b];\n};\nconvert.hsl.rgb = function(hsl) {\n  const h = hsl[0] / 360;\n  const s = hsl[1] / 100;\n  const l = hsl[2] / 100;\n  let t3;\n  let value;\n  if (s === 0) {\n    value = l * 255;\n    return [value, value, value];\n  }\n  const t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const t1 = 2 * l - t2;\n  const rgb = [0, 0, 0];\n  for (let i = 0; i < 3; i++) {\n    t3 = h + 1 / 3 * -(i - 1);\n    if (t3 < 0) {\n      t3++;\n    }\n    if (t3 > 1) {\n      t3--;\n    }\n    if (6 * t3 < 1) {\n      value = t1 + (t2 - t1) * 6 * t3;\n    } else if (2 * t3 < 1) {\n      value = t2;\n    } else if (3 * t3 < 2) {\n      value = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n    } else {\n      value = t1;\n    }\n    rgb[i] = value * 255;\n  }\n  return rgb;\n};\nconvert.hsl.hsv = function(hsl) {\n  const h = hsl[0];\n  let s = hsl[1] / 100;\n  let l = hsl[2] / 100;\n  let smin = s;\n  const lmin = Math.max(l, 0.01);\n  l *= 2;\n  s *= l <= 1 ? l : 2 - l;\n  smin *= lmin <= 1 ? lmin : 2 - lmin;\n  const v = (l + s) / 2;\n  const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\n  return [h, sv * 100, v * 100];\n};\nconvert.hsv.rgb = function(hsv) {\n  const h = hsv[0] / 60;\n  const s = hsv[1] / 100;\n  let v = hsv[2] / 100;\n  const hi = Math.floor(h) % 6;\n  const f = h - Math.floor(h);\n  const p = 255 * v * (1 - s);\n  const q = 255 * v * (1 - s * f);\n  const t = 255 * v * (1 - s * (1 - f));\n  v *= 255;\n  switch (hi) {\n    case 0: {\n      return [v, t, p];\n    }\n    case 1: {\n      return [q, v, p];\n    }\n    case 2: {\n      return [p, v, t];\n    }\n    case 3: {\n      return [p, q, v];\n    }\n    case 4: {\n      return [t, p, v];\n    }\n    case 5: {\n      return [v, p, q];\n    }\n  }\n};\nconvert.hsv.hsl = function(hsv) {\n  const h = hsv[0];\n  const s = hsv[1] / 100;\n  const v = hsv[2] / 100;\n  const vmin = Math.max(v, 0.01);\n  let sl;\n  let l;\n  l = (2 - s) * v;\n  const lmin = (2 - s) * vmin;\n  sl = s * vmin;\n  sl /= lmin <= 1 ? lmin : 2 - lmin;\n  sl = sl || 0;\n  l /= 2;\n  return [h, sl * 100, l * 100];\n};\nconvert.hwb.rgb = function(hwb) {\n  const h = hwb[0] / 360;\n  let wh = hwb[1] / 100;\n  let bl = hwb[2] / 100;\n  const ratio = wh + bl;\n  let f;\n  if (ratio > 1) {\n    wh /= ratio;\n    bl /= ratio;\n  }\n  const i = Math.floor(6 * h);\n  const v = 1 - bl;\n  f = 6 * h - i;\n  if ((i & 1) !== 0) {\n    f = 1 - f;\n  }\n  const n = wh + f * (v - wh);\n  let r;\n  let g;\n  let b;\n  switch (i) {\n    default:\n    case 6:\n    case 0: {\n      r = v;\n      g = n;\n      b = wh;\n      break;\n    }\n    case 1: {\n      r = n;\n      g = v;\n      b = wh;\n      break;\n    }\n    case 2: {\n      r = wh;\n      g = v;\n      b = n;\n      break;\n    }\n    case 3: {\n      r = wh;\n      g = n;\n      b = v;\n      break;\n    }\n    case 4: {\n      r = n;\n      g = wh;\n      b = v;\n      break;\n    }\n    case 5: {\n      r = v;\n      g = wh;\n      b = n;\n      break;\n    }\n  }\n  return [r * 255, g * 255, b * 255];\n};\nconvert.cmyk.rgb = function(cmyk) {\n  const c = cmyk[0] / 100;\n  const m = cmyk[1] / 100;\n  const y = cmyk[2] / 100;\n  const k = cmyk[3] / 100;\n  const r = 1 - Math.min(1, c * (1 - k) + k);\n  const g = 1 - Math.min(1, m * (1 - k) + k);\n  const b = 1 - Math.min(1, y * (1 - k) + k);\n  return [r * 255, g * 255, b * 255];\n};\nconvert.xyz.rgb = function(xyz) {\n  const x = xyz[0] / 100;\n  const y = xyz[1] / 100;\n  const z = xyz[2] / 100;\n  let r;\n  let g;\n  let b;\n  r = x * 3.2404542 + y * -1.5371385 + z * -0.4985314;\n  g = x * -0.969266 + y * 1.8760108 + z * 0.041556;\n  b = x * 0.0556434 + y * -0.2040259 + z * 1.0572252;\n  r = srgbNonlinearTransform(r);\n  g = srgbNonlinearTransform(g);\n  b = srgbNonlinearTransform(b);\n  return [r * 255, g * 255, b * 255];\n};\nconvert.xyz.lab = function(xyz) {\n  let x = xyz[0];\n  let y = xyz[1];\n  let z = xyz[2];\n  x /= 95.047;\n  y /= 100;\n  z /= 108.883;\n  x = x > LAB_FT ? x ** (1 / 3) : 7.787 * x + 16 / 116;\n  y = y > LAB_FT ? y ** (1 / 3) : 7.787 * y + 16 / 116;\n  z = z > LAB_FT ? z ** (1 / 3) : 7.787 * z + 16 / 116;\n  const l = 116 * y - 16;\n  const a = 500 * (x - y);\n  const b = 200 * (y - z);\n  return [l, a, b];\n};\nconvert.xyz.oklab = function(xyz) {\n  const x = xyz[0] / 100;\n  const y = xyz[1] / 100;\n  const z = xyz[2] / 100;\n  const lp = Math.cbrt(0.8189330101 * x + 0.3618667424 * y - 0.1288597137 * z);\n  const mp = Math.cbrt(0.0329845436 * x + 0.9293118715 * y + 0.0361456387 * z);\n  const sp = Math.cbrt(0.0482003018 * x + 0.2643662691 * y + 0.633851707 * z);\n  const l = 0.2104542553 * lp + 0.793617785 * mp - 0.0040720468 * sp;\n  const a = 1.9779984951 * lp - 2.428592205 * mp + 0.4505937099 * sp;\n  const b = 0.0259040371 * lp + 0.7827717662 * mp - 0.808675766 * sp;\n  return [l * 100, a * 100, b * 100];\n};\nconvert.oklab.oklch = function(oklab) {\n  return convert.lab.lch(oklab);\n};\nconvert.oklab.xyz = function(oklab) {\n  const ll = oklab[0] / 100;\n  const a = oklab[1] / 100;\n  const b = oklab[2] / 100;\n  const l = (0.999999998 * ll + 0.396337792 * a + 0.215803758 * b) ** 3;\n  const m = (1.000000008 * ll - 0.105561342 * a - 0.063854175 * b) ** 3;\n  const s = (1.000000055 * ll - 0.089484182 * a - 1.291485538 * b) ** 3;\n  const x = 1.227013851 * l - 0.55779998 * m + 0.281256149 * s;\n  const y = -0.040580178 * l + 1.11225687 * m - 0.071676679 * s;\n  const z = -0.076381285 * l - 0.421481978 * m + 1.58616322 * s;\n  return [x * 100, y * 100, z * 100];\n};\nconvert.oklab.rgb = function(oklab) {\n  const ll = oklab[0] / 100;\n  const aa = oklab[1] / 100;\n  const bb = oklab[2] / 100;\n  const l = (ll + 0.3963377774 * aa + 0.2158037573 * bb) ** 3;\n  const m = (ll - 0.1055613458 * aa - 0.0638541728 * bb) ** 3;\n  const s = (ll - 0.0894841775 * aa - 1.291485548 * bb) ** 3;\n  const r = srgbNonlinearTransform(4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s);\n  const g = srgbNonlinearTransform(-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s);\n  const b = srgbNonlinearTransform(-0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s);\n  return [r * 255, g * 255, b * 255];\n};\nconvert.oklch.oklab = function(oklch) {\n  return convert.lch.lab(oklch);\n};\nconvert.lab.xyz = function(lab) {\n  const l = lab[0];\n  const a = lab[1];\n  const b = lab[2];\n  let x;\n  let y;\n  let z;\n  y = (l + 16) / 116;\n  x = a / 500 + y;\n  z = y - b / 200;\n  const y2 = y ** 3;\n  const x2 = x ** 3;\n  const z2 = z ** 3;\n  y = y2 > LAB_FT ? y2 : (y - 16 / 116) / 7.787;\n  x = x2 > LAB_FT ? x2 : (x - 16 / 116) / 7.787;\n  z = z2 > LAB_FT ? z2 : (z - 16 / 116) / 7.787;\n  x *= 95.047;\n  y *= 100;\n  z *= 108.883;\n  return [x, y, z];\n};\nconvert.lab.lch = function(lab) {\n  const l = lab[0];\n  const a = lab[1];\n  const b = lab[2];\n  let h;\n  const hr = Math.atan2(b, a);\n  h = hr * 360 / 2 / Math.PI;\n  if (h < 0) {\n    h += 360;\n  }\n  const c = Math.sqrt(a * a + b * b);\n  return [l, c, h];\n};\nconvert.lch.lab = function(lch) {\n  const l = lch[0];\n  const c = lch[1];\n  const h = lch[2];\n  const hr = h / 360 * 2 * Math.PI;\n  const a = c * Math.cos(hr);\n  const b = c * Math.sin(hr);\n  return [l, a, b];\n};\nconvert.rgb.ansi16 = function(args, saturation = null) {\n  const [r, g, b] = args;\n  let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;\n  value = Math.round(value / 50);\n  if (value === 0) {\n    return 30;\n  }\n  let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\n  if (value === 2) {\n    ansi += 60;\n  }\n  return ansi;\n};\nconvert.hsv.ansi16 = function(args) {\n  return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\nconvert.rgb.ansi256 = function(args) {\n  const r = args[0];\n  const g = args[1];\n  const b = args[2];\n  if (r >> 4 === g >> 4 && g >> 4 === b >> 4) {\n    if (r < 8) {\n      return 16;\n    }\n    if (r > 248) {\n      return 231;\n    }\n    return Math.round((r - 8) / 247 * 24) + 232;\n  }\n  const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\n  return ansi;\n};\nconvert.ansi16.rgb = function(args) {\n  args = args[0];\n  let color = args % 10;\n  if (color === 0 || color === 7) {\n    if (args > 50) {\n      color += 3.5;\n    }\n    color = color / 10.5 * 255;\n    return [color, color, color];\n  }\n  const mult = (Math.trunc(args > 50) + 1) * 0.5;\n  const r = (color & 1) * mult * 255;\n  const g = (color >> 1 & 1) * mult * 255;\n  const b = (color >> 2 & 1) * mult * 255;\n  return [r, g, b];\n};\nconvert.ansi256.rgb = function(args) {\n  args = args[0];\n  if (args >= 232) {\n    const c = (args - 232) * 10 + 8;\n    return [c, c, c];\n  }\n  args -= 16;\n  let rem;\n  const r = Math.floor(args / 36) / 5 * 255;\n  const g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n  const b = rem % 6 / 5 * 255;\n  return [r, g, b];\n};\nconvert.rgb.hex = function(args) {\n  const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);\n  const string = integer.toString(16).toUpperCase();\n  return \"000000\".slice(string.length) + string;\n};\nconvert.hex.rgb = function(args) {\n  const match = args.toString(16).match(/[a-f\\d]{6}|[a-f\\d]{3}/i);\n  if (!match) {\n    return [0, 0, 0];\n  }\n  let colorString = match[0];\n  if (match[0].length === 3) {\n    colorString = [...colorString].map((char) => char + char).join(\"\");\n  }\n  const integer = Number.parseInt(colorString, 16);\n  const r = integer >> 16 & 255;\n  const g = integer >> 8 & 255;\n  const b = integer & 255;\n  return [r, g, b];\n};\nconvert.rgb.hcg = function(rgb) {\n  const r = rgb[0] / 255;\n  const g = rgb[1] / 255;\n  const b = rgb[2] / 255;\n  const max = Math.max(Math.max(r, g), b);\n  const min = Math.min(Math.min(r, g), b);\n  const chroma = max - min;\n  let hue;\n  const grayscale = chroma < 1 ? min / (1 - chroma) : 0;\n  if (chroma <= 0) {\n    hue = 0;\n  } else if (max === r) {\n    hue = (g - b) / chroma % 6;\n  } else if (max === g) {\n    hue = 2 + (b - r) / chroma;\n  } else {\n    hue = 4 + (r - g) / chroma;\n  }\n  hue /= 6;\n  hue %= 1;\n  return [hue * 360, chroma * 100, grayscale * 100];\n};\nconvert.hsl.hcg = function(hsl) {\n  const s = hsl[1] / 100;\n  const l = hsl[2] / 100;\n  const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);\n  let f = 0;\n  if (c < 1) {\n    f = (l - 0.5 * c) / (1 - c);\n  }\n  return [hsl[0], c * 100, f * 100];\n};\nconvert.hsv.hcg = function(hsv) {\n  const s = hsv[1] / 100;\n  const v = hsv[2] / 100;\n  const c = s * v;\n  let f = 0;\n  if (c < 1) {\n    f = (v - c) / (1 - c);\n  }\n  return [hsv[0], c * 100, f * 100];\n};\nconvert.hcg.rgb = function(hcg) {\n  const h = hcg[0] / 360;\n  const c = hcg[1] / 100;\n  const g = hcg[2] / 100;\n  if (c === 0) {\n    return [g * 255, g * 255, g * 255];\n  }\n  const pure = [0, 0, 0];\n  const hi = h % 1 * 6;\n  const v = hi % 1;\n  const w = 1 - v;\n  let mg = 0;\n  switch (Math.floor(hi)) {\n    case 0: {\n      pure[0] = 1;\n      pure[1] = v;\n      pure[2] = 0;\n      break;\n    }\n    case 1: {\n      pure[0] = w;\n      pure[1] = 1;\n      pure[2] = 0;\n      break;\n    }\n    case 2: {\n      pure[0] = 0;\n      pure[1] = 1;\n      pure[2] = v;\n      break;\n    }\n    case 3: {\n      pure[0] = 0;\n      pure[1] = w;\n      pure[2] = 1;\n      break;\n    }\n    case 4: {\n      pure[0] = v;\n      pure[1] = 0;\n      pure[2] = 1;\n      break;\n    }\n    default: {\n      pure[0] = 1;\n      pure[1] = 0;\n      pure[2] = w;\n    }\n  }\n  mg = (1 - c) * g;\n  return [\n    (c * pure[0] + mg) * 255,\n    (c * pure[1] + mg) * 255,\n    (c * pure[2] + mg) * 255\n  ];\n};\nconvert.hcg.hsv = function(hcg) {\n  const c = hcg[1] / 100;\n  const g = hcg[2] / 100;\n  const v = c + g * (1 - c);\n  let f = 0;\n  if (v > 0) {\n    f = c / v;\n  }\n  return [hcg[0], f * 100, v * 100];\n};\nconvert.hcg.hsl = function(hcg) {\n  const c = hcg[1] / 100;\n  const g = hcg[2] / 100;\n  const l = g * (1 - c) + 0.5 * c;\n  let s = 0;\n  if (l > 0 && l < 0.5) {\n    s = c / (2 * l);\n  } else if (l >= 0.5 && l < 1) {\n    s = c / (2 * (1 - l));\n  }\n  return [hcg[0], s * 100, l * 100];\n};\nconvert.hcg.hwb = function(hcg) {\n  const c = hcg[1] / 100;\n  const g = hcg[2] / 100;\n  const v = c + g * (1 - c);\n  return [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\nconvert.hwb.hcg = function(hwb) {\n  const w = hwb[1] / 100;\n  const b = hwb[2] / 100;\n  const v = 1 - b;\n  const c = v - w;\n  let g = 0;\n  if (c < 1) {\n    g = (v - c) / (1 - c);\n  }\n  return [hwb[0], c * 100, g * 100];\n};\nconvert.apple.rgb = function(apple) {\n  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];\n};\nconvert.rgb.apple = function(rgb) {\n  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];\n};\nconvert.gray.rgb = function(args) {\n  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\nconvert.gray.hsl = function(args) {\n  return [0, 0, args[0]];\n};\nconvert.gray.hsv = convert.gray.hsl;\nconvert.gray.hwb = function(gray) {\n  return [0, 100, gray[0]];\n};\nconvert.gray.cmyk = function(gray) {\n  return [0, 0, 0, gray[0]];\n};\nconvert.gray.lab = function(gray) {\n  return [gray[0], 0, 0];\n};\nconvert.gray.hex = function(gray) {\n  const value = Math.round(gray[0] / 100 * 255) & 255;\n  const integer = (value << 16) + (value << 8) + value;\n  const string = integer.toString(16).toUpperCase();\n  return \"000000\".slice(string.length) + string;\n};\nconvert.rgb.gray = function(rgb) {\n  const value = (rgb[0] + rgb[1] + rgb[2]) / 3;\n  return [value / 255 * 100];\n};\n\n// node_modules/color-convert/route.js\nfunction buildGraph() {\n  const graph = {};\n  const models2 = Object.keys(conversions_default);\n  for (let { length } = models2, i = 0; i < length; i++) {\n    graph[models2[i]] = {\n      // http://jsperf.com/1-vs-infinity\n      // micro-opt, but this is simple.\n      distance: -1,\n      parent: null\n    };\n  }\n  return graph;\n}\nfunction deriveBFS(fromModel) {\n  const graph = buildGraph();\n  const queue = [fromModel];\n  graph[fromModel].distance = 0;\n  while (queue.length > 0) {\n    const current = queue.pop();\n    const adjacents = Object.keys(conversions_default[current]);\n    for (let { length } = adjacents, i = 0; i < length; i++) {\n      const adjacent = adjacents[i];\n      const node = graph[adjacent];\n      if (node.distance === -1) {\n        node.distance = graph[current].distance + 1;\n        node.parent = current;\n        queue.unshift(adjacent);\n      }\n    }\n  }\n  return graph;\n}\nfunction link(from, to) {\n  return function(args) {\n    return to(from(args));\n  };\n}\nfunction wrapConversion(toModel, graph) {\n  const path = [graph[toModel].parent, toModel];\n  let fn = conversions_default[graph[toModel].parent][toModel];\n  let cur = graph[toModel].parent;\n  while (graph[cur].parent) {\n    path.unshift(graph[cur].parent);\n    fn = link(conversions_default[graph[cur].parent][cur], fn);\n    cur = graph[cur].parent;\n  }\n  fn.conversion = path;\n  return fn;\n}\nfunction route(fromModel) {\n  const graph = deriveBFS(fromModel);\n  const conversion = {};\n  const models2 = Object.keys(graph);\n  for (let { length } = models2, i = 0; i < length; i++) {\n    const toModel = models2[i];\n    const node = graph[toModel];\n    if (node.parent === null) {\n      continue;\n    }\n    conversion[toModel] = wrapConversion(toModel, graph);\n  }\n  return conversion;\n}\nvar route_default = route;\n\n// node_modules/color-convert/index.js\nvar convert2 = {};\nvar models = Object.keys(conversions_default);\nfunction wrapRaw(fn) {\n  const wrappedFn = function(...args) {\n    const arg0 = args[0];\n    if (arg0 === void 0 || arg0 === null) {\n      return arg0;\n    }\n    if (arg0.length > 1) {\n      args = arg0;\n    }\n    return fn(args);\n  };\n  if (\"conversion\" in fn) {\n    wrappedFn.conversion = fn.conversion;\n  }\n  return wrappedFn;\n}\nfunction wrapRounded(fn) {\n  const wrappedFn = function(...args) {\n    const arg0 = args[0];\n    if (arg0 === void 0 || arg0 === null) {\n      return arg0;\n    }\n    if (arg0.length > 1) {\n      args = arg0;\n    }\n    const result = fn(args);\n    if (typeof result === \"object\") {\n      for (let { length } = result, i = 0; i < length; i++) {\n        result[i] = Math.round(result[i]);\n      }\n    }\n    return result;\n  };\n  if (\"conversion\" in fn) {\n    wrappedFn.conversion = fn.conversion;\n  }\n  return wrappedFn;\n}\nfor (const fromModel of models) {\n  convert2[fromModel] = {};\n  Object.defineProperty(convert2[fromModel], \"channels\", { value: conversions_default[fromModel].channels });\n  Object.defineProperty(convert2[fromModel], \"labels\", { value: conversions_default[fromModel].labels });\n  const routes = route_default(fromModel);\n  const routeModels = Object.keys(routes);\n  for (const toModel of routeModels) {\n    const fn = routes[toModel];\n    convert2[fromModel][toModel] = wrapRounded(fn);\n    convert2[fromModel][toModel].raw = wrapRaw(fn);\n  }\n}\nvar color_convert_default = convert2;\n\n// node_modules/color/index.js\nvar skippedModels = [\n  // To be honest, I don't really feel like keyword belongs in color convert, but eh.\n  \"keyword\",\n  // Gray conflicts with some method names, and has its own method defined.\n  \"gray\",\n  // Shouldn't really be in color-convert either...\n  \"hex\"\n];\nvar hashedModelKeys = {};\nfor (const model of Object.keys(color_convert_default)) {\n  hashedModelKeys[[...color_convert_default[model].labels].sort().join(\"\")] = model;\n}\nvar limiters = {};\nfunction Color(object, model) {\n  if (!(this instanceof Color)) {\n    return new Color(object, model);\n  }\n  if (model && model in skippedModels) {\n    model = null;\n  }\n  if (model && !(model in color_convert_default)) {\n    throw new Error(\"Unknown model: \" + model);\n  }\n  let i;\n  let channels;\n  if (object == null) {\n    this.model = \"rgb\";\n    this.color = [0, 0, 0];\n    this.valpha = 1;\n  } else if (object instanceof Color) {\n    this.model = object.model;\n    this.color = [...object.color];\n    this.valpha = object.valpha;\n  } else if (typeof object === \"string\") {\n    const result = color_string_default.get(object);\n    if (result === null) {\n      throw new Error(\"Unable to parse color from string: \" + object);\n    }\n    this.model = result.model;\n    channels = color_convert_default[this.model].channels;\n    this.color = result.value.slice(0, channels);\n    this.valpha = typeof result.value[channels] === \"number\" ? result.value[channels] : 1;\n  } else if (object.length > 0) {\n    this.model = model || \"rgb\";\n    channels = color_convert_default[this.model].channels;\n    const newArray = Array.prototype.slice.call(object, 0, channels);\n    this.color = zeroArray(newArray, channels);\n    this.valpha = typeof object[channels] === \"number\" ? object[channels] : 1;\n  } else if (typeof object === \"number\") {\n    this.model = \"rgb\";\n    this.color = [\n      object >> 16 & 255,\n      object >> 8 & 255,\n      object & 255\n    ];\n    this.valpha = 1;\n  } else {\n    this.valpha = 1;\n    const keys = Object.keys(object);\n    if (\"alpha\" in object) {\n      keys.splice(keys.indexOf(\"alpha\"), 1);\n      this.valpha = typeof object.alpha === \"number\" ? object.alpha : 0;\n    }\n    const hashedKeys = keys.sort().join(\"\");\n    if (!(hashedKeys in hashedModelKeys)) {\n      throw new Error(\"Unable to parse color from object: \" + JSON.stringify(object));\n    }\n    this.model = hashedModelKeys[hashedKeys];\n    const { labels } = color_convert_default[this.model];\n    const color = [];\n    for (i = 0; i < labels.length; i++) {\n      color.push(object[labels[i]]);\n    }\n    this.color = zeroArray(color);\n  }\n  if (limiters[this.model]) {\n    channels = color_convert_default[this.model].channels;\n    for (i = 0; i < channels; i++) {\n      const limit = limiters[this.model][i];\n      if (limit) {\n        this.color[i] = limit(this.color[i]);\n      }\n    }\n  }\n  this.valpha = Math.max(0, Math.min(1, this.valpha));\n  if (Object.freeze) {\n    Object.freeze(this);\n  }\n}\nColor.prototype = {\n  toString() {\n    return this.string();\n  },\n  toJSON() {\n    return this[this.model]();\n  },\n  string(places) {\n    let self = this.model in color_string_default.to ? this : this.rgb();\n    self = self.round(typeof places === \"number\" ? places : 1);\n    const arguments_ = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n    return color_string_default.to[self.model](...arguments_);\n  },\n  percentString(places) {\n    const self = this.rgb().round(typeof places === \"number\" ? places : 1);\n    const arguments_ = self.valpha === 1 ? self.color : [...self.color, this.valpha];\n    return color_string_default.to.rgb.percent(...arguments_);\n  },\n  array() {\n    return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];\n  },\n  object() {\n    const result = {};\n    const { channels } = color_convert_default[this.model];\n    const { labels } = color_convert_default[this.model];\n    for (let i = 0; i < channels; i++) {\n      result[labels[i]] = this.color[i];\n    }\n    if (this.valpha !== 1) {\n      result.alpha = this.valpha;\n    }\n    return result;\n  },\n  unitArray() {\n    const rgb = this.rgb().color;\n    rgb[0] /= 255;\n    rgb[1] /= 255;\n    rgb[2] /= 255;\n    if (this.valpha !== 1) {\n      rgb.push(this.valpha);\n    }\n    return rgb;\n  },\n  unitObject() {\n    const rgb = this.rgb().object();\n    rgb.r /= 255;\n    rgb.g /= 255;\n    rgb.b /= 255;\n    if (this.valpha !== 1) {\n      rgb.alpha = this.valpha;\n    }\n    return rgb;\n  },\n  round(places) {\n    places = Math.max(places || 0, 0);\n    return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);\n  },\n  alpha(value) {\n    if (value !== void 0) {\n      return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);\n    }\n    return this.valpha;\n  },\n  // Rgb\n  red: getset(\"rgb\", 0, maxfn(255)),\n  green: getset(\"rgb\", 1, maxfn(255)),\n  blue: getset(\"rgb\", 2, maxfn(255)),\n  hue: getset([\"hsl\", \"hsv\", \"hsl\", \"hwb\", \"hcg\"], 0, (value) => (value % 360 + 360) % 360),\n  saturationl: getset(\"hsl\", 1, maxfn(100)),\n  lightness: getset(\"hsl\", 2, maxfn(100)),\n  saturationv: getset(\"hsv\", 1, maxfn(100)),\n  value: getset(\"hsv\", 2, maxfn(100)),\n  chroma: getset(\"hcg\", 1, maxfn(100)),\n  gray: getset(\"hcg\", 2, maxfn(100)),\n  white: getset(\"hwb\", 1, maxfn(100)),\n  wblack: getset(\"hwb\", 2, maxfn(100)),\n  cyan: getset(\"cmyk\", 0, maxfn(100)),\n  magenta: getset(\"cmyk\", 1, maxfn(100)),\n  yellow: getset(\"cmyk\", 2, maxfn(100)),\n  black: getset(\"cmyk\", 3, maxfn(100)),\n  x: getset(\"xyz\", 0, maxfn(95.047)),\n  y: getset(\"xyz\", 1, maxfn(100)),\n  z: getset(\"xyz\", 2, maxfn(108.833)),\n  l: getset(\"lab\", 0, maxfn(100)),\n  a: getset(\"lab\", 1),\n  b: getset(\"lab\", 2),\n  keyword(value) {\n    if (value !== void 0) {\n      return new Color(value);\n    }\n    return color_convert_default[this.model].keyword(this.color);\n  },\n  hex(value) {\n    if (value !== void 0) {\n      return new Color(value);\n    }\n    return color_string_default.to.hex(...this.rgb().round().color);\n  },\n  hexa(value) {\n    if (value !== void 0) {\n      return new Color(value);\n    }\n    const rgbArray = this.rgb().round().color;\n    let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();\n    if (alphaHex.length === 1) {\n      alphaHex = \"0\" + alphaHex;\n    }\n    return color_string_default.to.hex(...rgbArray) + alphaHex;\n  },\n  rgbNumber() {\n    const rgb = this.rgb().color;\n    return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;\n  },\n  luminosity() {\n    const rgb = this.rgb().color;\n    const lum = [];\n    for (const [i, element] of rgb.entries()) {\n      const chan = element / 255;\n      lum[i] = chan <= 0.04045 ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;\n    }\n    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n  },\n  contrast(color2) {\n    const lum1 = this.luminosity();\n    const lum2 = color2.luminosity();\n    if (lum1 > lum2) {\n      return (lum1 + 0.05) / (lum2 + 0.05);\n    }\n    return (lum2 + 0.05) / (lum1 + 0.05);\n  },\n  level(color2) {\n    const contrastRatio = this.contrast(color2);\n    if (contrastRatio >= 7) {\n      return \"AAA\";\n    }\n    return contrastRatio >= 4.5 ? \"AA\" : \"\";\n  },\n  isDark() {\n    const rgb = this.rgb().color;\n    const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 1e4;\n    return yiq < 128;\n  },\n  isLight() {\n    return !this.isDark();\n  },\n  negate() {\n    const rgb = this.rgb();\n    for (let i = 0; i < 3; i++) {\n      rgb.color[i] = 255 - rgb.color[i];\n    }\n    return rgb;\n  },\n  lighten(ratio) {\n    const hsl = this.hsl();\n    hsl.color[2] += hsl.color[2] * ratio;\n    return hsl;\n  },\n  darken(ratio) {\n    const hsl = this.hsl();\n    hsl.color[2] -= hsl.color[2] * ratio;\n    return hsl;\n  },\n  saturate(ratio) {\n    const hsl = this.hsl();\n    hsl.color[1] += hsl.color[1] * ratio;\n    return hsl;\n  },\n  desaturate(ratio) {\n    const hsl = this.hsl();\n    hsl.color[1] -= hsl.color[1] * ratio;\n    return hsl;\n  },\n  whiten(ratio) {\n    const hwb = this.hwb();\n    hwb.color[1] += hwb.color[1] * ratio;\n    return hwb;\n  },\n  blacken(ratio) {\n    const hwb = this.hwb();\n    hwb.color[2] += hwb.color[2] * ratio;\n    return hwb;\n  },\n  grayscale() {\n    const rgb = this.rgb().color;\n    const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n    return Color.rgb(value, value, value);\n  },\n  fade(ratio) {\n    return this.alpha(this.valpha - this.valpha * ratio);\n  },\n  opaquer(ratio) {\n    return this.alpha(this.valpha + this.valpha * ratio);\n  },\n  rotate(degrees) {\n    const hsl = this.hsl();\n    let hue = hsl.color[0];\n    hue = (hue + degrees) % 360;\n    hue = hue < 0 ? 360 + hue : hue;\n    hsl.color[0] = hue;\n    return hsl;\n  },\n  mix(mixinColor, weight) {\n    if (!mixinColor || !mixinColor.rgb) {\n      throw new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n    }\n    const color1 = mixinColor.rgb();\n    const color2 = this.rgb();\n    const p = weight === void 0 ? 0.5 : weight;\n    const w = 2 * p - 1;\n    const a = color1.alpha() - color2.alpha();\n    const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;\n    const w2 = 1 - w1;\n    return Color.rgb(\n      w1 * color1.red() + w2 * color2.red(),\n      w1 * color1.green() + w2 * color2.green(),\n      w1 * color1.blue() + w2 * color2.blue(),\n      color1.alpha() * p + color2.alpha() * (1 - p)\n    );\n  }\n};\nfor (const model of Object.keys(color_convert_default)) {\n  if (skippedModels.includes(model)) {\n    continue;\n  }\n  const { channels } = color_convert_default[model];\n  Color.prototype[model] = function(...arguments_) {\n    if (this.model === model) {\n      return new Color(this);\n    }\n    if (arguments_.length > 0) {\n      return new Color(arguments_, model);\n    }\n    return new Color([...assertArray(color_convert_default[this.model][model].raw(this.color)), this.valpha], model);\n  };\n  Color[model] = function(...arguments_) {\n    let color = arguments_[0];\n    if (typeof color === \"number\") {\n      color = zeroArray(arguments_, channels);\n    }\n    return new Color(color, model);\n  };\n}\nfunction roundTo(number, places) {\n  return Number(number.toFixed(places));\n}\nfunction roundToPlace(places) {\n  return function(number) {\n    return roundTo(number, places);\n  };\n}\nfunction getset(model, channel, modifier) {\n  model = Array.isArray(model) ? model : [model];\n  for (const m of model) {\n    (limiters[m] ||= [])[channel] = modifier;\n  }\n  model = model[0];\n  return function(value) {\n    let result;\n    if (value !== void 0) {\n      if (modifier) {\n        value = modifier(value);\n      }\n      result = this[model]();\n      result.color[channel] = value;\n      return result;\n    }\n    result = this[model]().color[channel];\n    if (modifier) {\n      result = modifier(result);\n    }\n    return result;\n  };\n}\nfunction maxfn(max) {\n  return function(v) {\n    return Math.max(0, Math.min(max, v));\n  };\n}\nfunction assertArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\nfunction zeroArray(array, length) {\n  for (let i = 0; i < length; i++) {\n    if (typeof array[i] !== \"number\") {\n      array[i] = 0;\n    }\n  }\n  return array;\n}\nvar index_default = Color;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@img+colour@1.0.0/node_modules/@img/colour/color.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@img+colour@1.0.0/node_modules/@img/colour/index.cjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/.pnpm/@img+colour@1.0.0/node_modules/@img/colour/index.cjs ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./color.cjs */ \"(rsc)/./node_modules/.pnpm/@img+colour@1.0.0/node_modules/@img/colour/color.cjs\")[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGltZytjb2xvdXJAMS4wLjAvbm9kZV9tb2R1bGVzL0BpbWcvY29sb3VyL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBQSxxSkFBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVucm91dGVyLWxhbmdncmFwaC8uL25vZGVfbW9kdWxlcy8ucG5wbS9AaW1nK2NvbG91ckAxLjAuMC9ub2RlX21vZHVsZXMvQGltZy9jb2xvdXIvaW5kZXguY2pzPzA3ZWYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9jb2xvci5janNcIikuZGVmYXVsdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@img+colour@1.0.0/node_modules/@img/colour/index.cjs\n");

/***/ })

};
;